{"version":3,"file":"mergeStyleSets.js","sourceRoot":"../src/","sources":["mergeStyleSets.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAE5E;;;;;GAKG;AACH,MAAM;IACJ,iBAAuD;SAAvD,UAAuD,EAAvD,qBAAuD,EAAvD,IAAuD;QAAvD,4BAAuD;;IAEvD,kCAAkC;IAClC,IAAM,YAAY,GAAQ,EAAE,CAAC;IAC7B,IAAM,QAAQ,GAA8B,EAAE,CAAC;IAE/C,IAAI,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAExB,IAAI,MAAM,EAAE;QACV,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,MAAM,GAAG,eAAe,eAAI,OAAO,CAAC,CAAC;SACtC;QAED,IAAM,aAAa,GAAG,EAAE,CAAC;QAEzB,KAAK,IAAM,IAAI,IAAI,MAAM,EAAE;YACzB,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBAC/B,IAAM,IAAI,GAAW,MAAM,CAAC,IAAI,CAAC,CAAC;gBAElC,kCAAkC;gBAC5B,IAAA,4BAAqD,EAAnD,oBAAO,EAAE,oBAAO,CAAoC;gBAC5D,IAAM,YAAY,GAAG,mBAAmB,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;gBAEzE,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAEjC,IAAI,YAAY,EAAE;oBAChB,QAAQ,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,SAAS,CAAC;oBACxC,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACzE;aACF;SACF;QAED,KAA2B,UAAa,EAAb,+BAAa,EAAb,2BAAa,EAAb,IAAa;YAAnC,IAAM,YAAY,sBAAA;YACrB,IAAI,YAAY,EAAE;gBAChB,iBAAiB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;aAC3C;SACF;KACF;IAED,OAAO,YAAY,CAAC;AACtB,CAAC","sourcesContent":["import { extractStyleParts } from './extractStyleParts';\r\nimport { concatStyleSets } from './concatStyleSets';\r\nimport { IStyle } from './IStyle';\r\nimport { styleToRegistration, applyRegistration } from './styleToClassName';\r\n\r\n/**\r\n * Allows you to pass in 1 or more sets of areas which will return a merged\r\n * set of classes.\r\n *\r\n * @public\r\n */\r\nexport function mergeStyleSets<K extends string>(\r\n  ...cssSets: ({[P in K]?: IStyle } | null | undefined)[]\r\n): {[P in K]: string} {\r\n  // tslint:disable-next-line:no-any\r\n  const classNameSet: any = {};\r\n  const classMap: { [key: string]: string } = {};\r\n\r\n  let cssSet = cssSets[0];\r\n\r\n  if (cssSet) {\r\n    if (cssSets.length > 1) {\r\n      cssSet = concatStyleSets(...cssSets);\r\n    }\r\n\r\n    const registrations = [];\r\n\r\n    for (const prop in cssSet) {\r\n      if (cssSet.hasOwnProperty(prop)) {\r\n        const args: IStyle = cssSet[prop];\r\n\r\n        // tslint:disable-next-line:no-any\r\n        const { classes, objects } = extractStyleParts(args as any);\r\n        const registration = styleToRegistration({ displayName: prop }, objects);\r\n\r\n        registrations.push(registration);\r\n\r\n        if (registration) {\r\n          classMap[prop] = registration.className;\r\n          classNameSet[prop] = classes.concat([registration.className]).join(' ');\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const registration of registrations) {\r\n      if (registration) {\r\n        applyRegistration(registration, classMap);\r\n      }\r\n    }\r\n  }\r\n\r\n  return classNameSet;\r\n}\r\n"]}