{"version":3,"file":"MessageBar.js","sourceRoot":"../src/","sources":["components/MessageBar/MessageBar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  DelayedRender,\r\n  css,\r\n  getId\r\n} from '../../Utilities';\r\nimport { IconButton } from '../../Button';\r\nimport { Icon } from '../../Icon';\r\nimport { IMessageBarProps, MessageBarType } from './MessageBar.types';\r\nimport * as stylesImport from './MessageBar.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IMessageBarState {\r\n  labelId?: string;\r\n  showContent?: boolean;\r\n  expandSingleLine?: boolean;\r\n}\r\n\r\nexport class MessageBar extends BaseComponent<IMessageBarProps, IMessageBarState> {\r\n\r\n  public static defaultProps: IMessageBarProps = {\r\n    messageBarType: MessageBarType.info,\r\n    onDismiss: undefined,\r\n    isMultiline: true,\r\n  };\r\n\r\n  private ICON_MAP = {\r\n    [MessageBarType.info]: 'Info',\r\n    [MessageBarType.warning]: 'Info',\r\n    [MessageBarType.error]: 'ErrorBadge',\r\n    [MessageBarType.blocked]: 'Blocked2',\r\n    [MessageBarType.remove]: 'Blocked', // TODO remove deprecated value at >= 1.0.0\r\n    [MessageBarType.severeWarning]: 'Warning',\r\n    [MessageBarType.success]: 'Completed'\r\n  };\r\n\r\n  constructor(props: IMessageBarProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      labelId: getId('MessageBar'),\r\n      showContent: false,\r\n      expandSingleLine: false,\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { isMultiline } = this.props;\r\n\r\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\r\n  }\r\n\r\n  private _getActionsDiv(): JSX.Element | null {\r\n    if (this.props.actions) {\r\n      return (\r\n        <div\r\n          className={ this.props.isMultiline ?\r\n            ('ms-MessageBar-actions ' + styles.actions) :\r\n            ('ms-MessageBar-actionsSingleLine ' + styles.actionsSingleLine) }\r\n        >\r\n          { this.props.actions }\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getClassName(): string {\r\n    return css(this.props.className, 'ms-MessageBar', styles.root, {\r\n      ['ms-MessageBar ' + styles.root]: this.props.messageBarType === MessageBarType.info,\r\n      ['ms-MessageBar--error ' + styles.rootIsError]: this.props.messageBarType === MessageBarType.error,\r\n      ['ms-MessageBar--blocked ' + styles.rootIsBlocked]: (this.props.messageBarType === MessageBarType.blocked) ||\r\n        (this.props.messageBarType === MessageBarType.remove), // TODO remove deprecated value at >= 1.0.0\r\n      ['ms-MessageBar--severeWarning ' + styles.rootIsSevereWarning]: this.props.messageBarType === MessageBarType.severeWarning,\r\n      ['ms-MessageBar--success ' + styles.rootIsSuccess]: this.props.messageBarType === MessageBarType.success,\r\n      ['ms-MessageBar--warning ' + styles.rootIsWarning]: this.props.messageBarType === MessageBarType.warning\r\n    });\r\n  }\r\n\r\n  private _getDismissDiv(): JSX.Element | null {\r\n    if (this.props.onDismiss) {\r\n      return (\r\n        <IconButton\r\n          disabled={ false }\r\n          className={ css('ms-MessageBar-dismissal', styles.dismissal) }\r\n          onClick={ this.props.onDismiss }\r\n          iconProps={ { iconName: 'Clear' } }\r\n          ariaLabel={ this.props.dismissButtonAriaLabel }\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getDismissSingleLine(): JSX.Element | null {\r\n    if (this.props.onDismiss) {\r\n      return (\r\n        <div className={ css('ms-MessageBar-dismissSingleLine', styles.dismissSingleLine) }>\r\n          { this._getDismissDiv() }\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getExpandSingleLine(): JSX.Element | null {\r\n    if (!this.props.actions && this.props.truncated) {\r\n      return (\r\n        <div className={ css('ms-MessageBar-expandSingleLine', styles.expandSingleLine) }>\r\n          <IconButton\r\n            disabled={ false }\r\n            className={ css('ms-MessageBar-expand', styles.expand) }\r\n            onClick={ this._onClick }\r\n            iconProps={ { iconName: this.state.expandSingleLine ? 'DoubleChevronUp' : 'DoubleChevronDown' } }\r\n            ariaLabel={ this.props.overflowButtonAriaLabel }\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getIconSpan(): JSX.Element {\r\n    return (\r\n      <div className={ css('ms-MessageBar-icon', styles.icon) }>\r\n        <Icon iconName={ this.ICON_MAP[this.props.messageBarType!] } />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderMultiLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\r\n    return (\r\n      <div\r\n        className={\r\n          css(this._getClassName(),\r\n            'ms-MessageBar-multiline',\r\n            styles.multiLine,\r\n            this.props.onDismiss && styles.dismissalMultiLine\r\n          )\r\n        }\r\n        role='status'\r\n        aria-live={ this._getAnnouncementPriority() }\r\n      >\r\n        <div className={ css(styles.content, 'ms-MessageBar-content') }>\r\n          { this._getIconSpan() }\r\n          { this._renderInnerText() }\r\n          { this._getDismissDiv() }\r\n        </div>\r\n        { this._getActionsDiv() }\r\n      </div >\r\n    );\r\n  }\r\n\r\n  private _renderSingleLine(): React.ReactElement<React.HTMLAttributes<HTMLAreaElement>> {\r\n    return (\r\n      <div\r\n        className={\r\n          css(this._getClassName(),\r\n            'ms-MessageBar-singleline',\r\n            styles.singleLine,\r\n            this.props.onDismiss && 'ms-MessageBar-dismissalSingleLine',\r\n            this.props.truncated && 'ms-MessageBar-expandingSingleLine',\r\n            this.props.truncated && styles.expandingSingleLine\r\n          )\r\n        }\r\n      >\r\n        <div className={ css(styles.content, 'ms-MessageBar-content') }>\r\n          { this._getIconSpan() }\r\n          { this._renderInnerText() }\r\n          { this._getExpandSingleLine() }\r\n          { this._getActionsDiv() }\r\n          { this._getDismissSingleLine() }\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  private _renderInnerText(): JSX.Element {\r\n    return (\r\n      <div\r\n        className={ css('ms-MessageBar-text', styles.text, this.props.actions && styles.multiLineWithActions, !this.props.onDismiss && styles.noDismissButton, this.state.expandSingleLine && styles.expandSingleLine) }\r\n        id={ this.state.labelId }\r\n      >\r\n        <span\r\n          className={ css('ms-MessageBar-innerText ' + styles.innerText) }\r\n          role='status'\r\n          aria-live={ this._getAnnouncementPriority() }\r\n        >\r\n          <DelayedRender>\r\n            <span>{ this.props.children }</span>\r\n          </DelayedRender>\r\n        </span>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  private _getAnnouncementPriority(): 'assertive' | 'polite' {\r\n    switch (this.props.messageBarType) {\r\n      case MessageBarType.blocked:\r\n      case MessageBarType.error:\r\n      case MessageBarType.severeWarning:\r\n        return 'assertive';\r\n    }\r\n    return 'polite';\r\n  }\r\n\r\n  private _onClick = (ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) => {\r\n    this.setState({ expandSingleLine: !this.state.expandSingleLine });\r\n  }\r\n}"]}