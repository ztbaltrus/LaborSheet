{"version":3,"file":"ProgressIndicator.Basic.Example.js","sourceRoot":"../src/","sources":["components/ProgressIndicator/examples/ProgressIndicator.Basic.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,iBAAiB,EAClB,MAAM,8CAA8C,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,sCAAsC,CAAC;AAM7D,IAAM,cAAc,GAAG,GAAG,CAAC;AAC3B,IAAM,kBAAkB,GAAG,GAAG,CAAC;AAC/B,IAAM,iBAAiB,GAAG,IAAI,CAAC;AAE/B;IAAmD,yDAAwD;IAKzG,uCAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAQb;QANC,KAAI,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,KAAI,CAAC,CAAC;QAE9B,KAAI,CAAC,KAAK,GAAG;YACX,eAAe,EAAE,CAAC;SACnB,CAAC;QACF,KAAI,CAAC,kBAAkB,GAAG,KAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC;;IAC/D,CAAC;IAEM,yDAAiB,GAAxB;QACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAEM,4DAAoB,GAA3B;QACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IAEM,8CAAM,GAAb;QACU,IAAA,4CAAe,CAAgB;QAEvC,OAAO,CACL,oBAAC,iBAAiB,IAChB,KAAK,EAAC,eAAe,EACrB,WAAW,EAAC,qBAAqB,EACjC,eAAe,EAAG,eAAe,GACjC,CACH,CAAC;IACJ,CAAC;IAEO,0DAAkB,GAA1B;QAAA,iBAoBC;QAnBC,iBAAiB;QACjB,IAAI,CAAC,QAAQ,CAAC;YACZ,eAAe,EAAE,CAAC;SACnB,CAAC,CAAC;QAEH,kBAAkB;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;YACvC,IAAI,eAAe,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,GAAG,kBAAkB,CAAC;YAEtE,6CAA6C;YAC7C,IAAI,eAAe,IAAI,GAAG,EAAE;gBAC1B,eAAe,GAAG,GAAG,CAAC;gBACtB,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;gBAC1C,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;aACpE;YACD,KAAI,CAAC,QAAQ,CAAC;gBACZ,eAAe,EAAE,eAAe;aACjC,CAAC,CAAC;QACL,CAAC,EAAE,cAAc,CAAC,CAAC;IACrB,CAAC;IACH,oCAAC;AAAD,CAAC,AAzDD,CAAmD,KAAK,CAAC,SAAS,GAyDjE","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ProgressIndicator\r\n} from 'office-ui-fabric-react/lib/ProgressIndicator';\r\nimport { Async } from 'office-ui-fabric-react/lib/Utilities';\r\n\r\nexport interface IProgressIndicatorBasicExampleState {\r\n  percentComplete: number;\r\n}\r\n\r\nconst INTERVAL_DELAY = 100;\r\nconst INTERVAL_INCREMENT = .01;\r\nconst RESTART_WAIT_TIME = 2000;\r\n\r\nexport class ProgressIndicatorBasicExample extends React.Component<{}, IProgressIndicatorBasicExampleState> {\r\n\r\n  private _interval: number;\r\n  private _async: Async;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this._async = new Async(this);\r\n\r\n    this.state = {\r\n      percentComplete: 0\r\n    };\r\n    this._startProgressDemo = this._startProgressDemo.bind(this);\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this._startProgressDemo();\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this._async.dispose();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { percentComplete } = this.state;\r\n\r\n    return (\r\n      <ProgressIndicator\r\n        label='Example title'\r\n        description='Example description'\r\n        percentComplete={ percentComplete }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _startProgressDemo(): void {\r\n    // reset the demo\r\n    this.setState({\r\n      percentComplete: 0\r\n    });\r\n\r\n    // update progress\r\n    this._interval = this._async.setInterval(() => {\r\n      let percentComplete = this.state.percentComplete + INTERVAL_INCREMENT;\r\n\r\n      // once complete, set the demo to start again\r\n      if (percentComplete >= 1.0) {\r\n        percentComplete = 1.0;\r\n        this._async.clearInterval(this._interval);\r\n        this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\r\n      }\r\n      this.setState({\r\n        percentComplete: percentComplete\r\n      });\r\n    }, INTERVAL_DELAY);\r\n  }\r\n}\r\n"]}