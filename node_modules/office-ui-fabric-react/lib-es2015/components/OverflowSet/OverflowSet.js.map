{"version":3,"file":"OverflowSet.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  css,\r\n  BaseComponent,\r\n  createRef,\r\n  getNativeProps,\r\n  divProperties,\r\n  focusFirstChild,\r\n  elementContains\r\n} from '../../Utilities';\r\nimport { mergeStyles } from '../../Styling';\r\nimport { IOverflowSet, IOverflowSetProps, IOverflowSetItemProps } from './OverflowSet.types';\r\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\r\nimport { KeytipManager } from '../../utilities/keytips/KeytipManager';\r\nimport { IKeytipProps } from '../../Keytip';\r\nimport * as stylesImport from './OverflowSet.scss';\r\n\r\nconst styles: any = stylesImport;\r\n\r\nexport class OverflowSet extends BaseComponent<IOverflowSetProps, {}> implements IOverflowSet {\r\n\r\n  private _focusZone = createRef<IFocusZone>();\r\n  private _persistedKeytips: { [uniqueID: string]: IKeytipProps } = {};\r\n  private _keytipManager: KeytipManager = KeytipManager.getInstance();\r\n  private _divContainer = createRef<HTMLDivElement>();\r\n\r\n  constructor(props: IOverflowSetProps) {\r\n    super(props);\r\n\r\n    if (props.doNotContainWithinFocusZone) {\r\n      this._warnMutuallyExclusive({\r\n        'doNotContainWithinFocusZone': 'focusZoneProps'\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      items,\r\n      overflowItems,\r\n      className,\r\n      focusZoneProps,\r\n      vertical = false,\r\n      role = 'menubar',\r\n      doNotContainWithinFocusZone\r\n    } = this.props;\r\n\r\n    let Tag;\r\n    let uniqueComponentProps;\r\n\r\n    if (doNotContainWithinFocusZone) {\r\n      Tag = 'div';\r\n      uniqueComponentProps = {\r\n        ...getNativeProps(this.props, divProperties),\r\n        ref: this._divContainer\r\n      };\r\n    } else {\r\n      Tag = FocusZone;\r\n      uniqueComponentProps = {\r\n        ...getNativeProps(this.props, divProperties),\r\n        ...focusZoneProps,\r\n        componentRef: this._focusZone,\r\n        direction: vertical ? FocusZoneDirection.vertical : FocusZoneDirection.horizontal\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Tag\r\n        { ...uniqueComponentProps }\r\n        className={ mergeStyles(\r\n          'ms-OverflowSet',\r\n          styles.root,\r\n          vertical && styles.rootVertical,\r\n          className\r\n        ) }\r\n        role={ role }\r\n      >\r\n        { items && this._onRenderItems(items) }\r\n        { overflowItems && overflowItems.length > 0 && this._onRenderOverflowButtonWrapper(overflowItems) }\r\n      </Tag>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets focus to the first tabbable item in the OverflowSet.\r\n   * @param {boolean} forceIntoFirstElement If true, focus will be forced into the first element,\r\n   * even if focus is already in theOverflowSet\r\n   * @returns True if focus could be set to an active element, false if no operation was taken.\r\n   */\r\n  public focus(forceIntoFirstElement?: boolean): boolean {\r\n    let focusSucceeded = false;\r\n\r\n    if (this.props.doNotContainWithinFocusZone) {\r\n      if (this._divContainer.current) {\r\n        focusSucceeded = focusFirstChild(this._divContainer.current);\r\n      }\r\n    } else if (this._focusZone.current) {\r\n      focusSucceeded = this._focusZone.current.focus(forceIntoFirstElement);\r\n    }\r\n\r\n    return focusSucceeded;\r\n  }\r\n\r\n  /**\r\n   * Sets focus to a specific child element within the OverflowSet.\r\n   * @param {HTMLElement} childElement The child element within the zone to focus.\r\n   * @returns True if focus could be set to an active element, false if no operation was taken.\r\n   */\r\n  public focusElement(childElement?: HTMLElement): boolean {\r\n    let focusSucceeded = false;\r\n\r\n    if (!childElement) {\r\n      return false;\r\n    }\r\n\r\n    if (this.props.doNotContainWithinFocusZone) {\r\n      if (this._divContainer.current && elementContains(this._divContainer.current, childElement)) {\r\n        childElement.focus();\r\n        focusSucceeded = document.activeElement === childElement;\r\n      }\r\n    } else if (this._focusZone.current) {\r\n      focusSucceeded = this._focusZone.current.focusElement(childElement);\r\n    }\r\n\r\n    return focusSucceeded;\r\n  }\r\n\r\n  // Add keytip register/unregister handlers to lifecycle functions to correctly manage persisted keytips\r\n  public componentDidMount() {\r\n    this._registerPersistedKeytips();\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._unregisterPersistedKeytips();\r\n  }\r\n\r\n  public componentWillUpdate() {\r\n    this._unregisterPersistedKeytips();\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    this._registerPersistedKeytips();\r\n  }\r\n\r\n  private _registerPersistedKeytips() {\r\n    Object.keys(this._persistedKeytips).forEach((key: string) => {\r\n      const keytip = this._persistedKeytips[key];\r\n      const uniqueID = this._keytipManager.register(keytip, true);\r\n      // Update map\r\n      this._persistedKeytips[uniqueID] = keytip;\r\n      delete this._persistedKeytips[key];\r\n    });\r\n  }\r\n\r\n  private _unregisterPersistedKeytips() {\r\n    // Delete all persisted keytips saved\r\n    Object.keys(this._persistedKeytips).forEach((uniqueID: string) => {\r\n      this._keytipManager.unregister(this._persistedKeytips[uniqueID], uniqueID, true);\r\n    });\r\n    this._persistedKeytips = {};\r\n  }\r\n\r\n  private _onRenderItems = (items: IOverflowSetItemProps[]): JSX.Element[] => {\r\n    return items.map((item, i) => {\r\n      const wrapperDivProps: React.HTMLProps<HTMLDivElement> = { className: css('ms-OverflowSet-item', styles.item) };\r\n      return (\r\n        <div key={ item.key } { ...wrapperDivProps }>\r\n          { this.props.onRenderItem(item) }\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  private _onRenderOverflowButtonWrapper = (items: any[]): JSX.Element => {\r\n    const wrapperDivProps: React.HTMLProps<HTMLDivElement> = { className: css('ms-OverflowSet-overflowButton', styles.item) };\r\n    const overflowKeytipSequences = this.props.keytipSequences;\r\n    let newOverflowItems: any[] = [];\r\n\r\n    if (overflowKeytipSequences) {\r\n      items.forEach((overflowItem) => {\r\n        const keytip = (overflowItem as IOverflowSetItemProps).keytipProps;\r\n        if (keytip) {\r\n          // Create persisted keytip\r\n          const persistedKeytip: IKeytipProps = {\r\n            content: keytip.content,\r\n            keySequences: keytip.keySequences,\r\n            disabled: keytip.disabled || !!(overflowItem.disabled || overflowItem.isDisabled)\r\n          };\r\n\r\n          if (keytip.hasDynamicChildren || this._getSubMenuForItem(overflowItem)) {\r\n            // If the keytip has a submenu or children nodes, change onExecute to persistedKeytipExecute\r\n            persistedKeytip.onExecute = this._keytipManager.menuExecute.bind(this._keytipManager, overflowKeytipSequences, overflowItem.keytipProps.keySequences);\r\n          } else {\r\n            // If the keytip doesn't have a submenu, just execute the original function\r\n            persistedKeytip.onExecute = keytip.onExecute;\r\n          }\r\n\r\n          // Add this persisted keytip to our internal list, use a temporary uniqueID (its content)\r\n          // uniqueID will get updated on register\r\n          this._persistedKeytips[persistedKeytip.content] = persistedKeytip;\r\n\r\n          // Add the overflow sequence to this item\r\n          const newOverflowItem = {\r\n            ...overflowItem,\r\n            keytipProps: {\r\n              ...keytip,\r\n              overflowSetSequence: overflowKeytipSequences\r\n            }\r\n          };\r\n          newOverflowItems.push(newOverflowItem);\r\n        } else {\r\n          // Nothing to change, add overflowItem to list\r\n          newOverflowItems.push(overflowItem);\r\n        }\r\n      });\r\n    } else {\r\n      newOverflowItems = items;\r\n    }\r\n    return (\r\n      <div { ...wrapperDivProps }>\r\n        { this.props.onRenderOverflowButton(newOverflowItems) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the subMenu for an overflow item\r\n   * Checks if itemSubMenuProvider has been defined, if not defaults to subMenuProps\r\n   */\r\n  private _getSubMenuForItem(item: any): any[] | undefined {\r\n    if (this.props.itemSubMenuProvider) {\r\n      return this.props.itemSubMenuProvider(item);\r\n    }\r\n    if (item.subMenuProps) {\r\n      return item.subMenuProps.items;\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n"]}