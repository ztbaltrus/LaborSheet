import * as tslib_1 from "tslib";
import * as React from 'react';
import { ExampleCard, ComponentPage, PropertiesTableSet, PageMarkdown, } from '@uifabric/example-app-base';
import { items, overflowItems, farItems } from './examples/data';
import { CommandBarBasicExample } from './examples/CommandBar.Basic.Example';
import { CommandBarNonFocusableItemsExample } from './examples/CommandBar.NonFocusable.Example';
import { CommandBarCustomizationExample } from './examples/CommandBar.Customization.Example';
import { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';
import { CommandBarStatus } from './CommandBar.checklist';
var CommandBarBasicExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/CommandBar/examples/CommandBar.Basic.Example.tsx');
var CommandBarNoFocusableItemsExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/CommandBar/examples/CommandBar.NonFocusable.Example.tsx');
var CommandBarCustomizationExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/CommandBar/examples/CommandBar.Customization.Example.tsx');
var CommandBarPage = /** @class */ (function (_super) {
    tslib_1.__extends(CommandBarPage, _super);
    function CommandBarPage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommandBarPage.prototype.render = function () {
        var cmdBarParamsTextAndIcons = { items: items, overflowItems: overflowItems, farItems: farItems };
        return (React.createElement(ComponentPage, { title: 'CommandBar', componentName: 'CommandBarExample', componentUrl: 'https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/office-ui-fabric-react/src/components/CommandBar', exampleCards: React.createElement("div", null,
                React.createElement(ExampleCard, { title: 'CommandBar with search box and overflowing menu items', code: CommandBarBasicExampleCode },
                    React.createElement(CommandBarBasicExample, tslib_1.__assign({}, cmdBarParamsTextAndIcons))),
                React.createElement(ExampleCard, { title: 'CommandBar with non-focusable items', code: CommandBarNoFocusableItemsExampleCode },
                    React.createElement(CommandBarNonFocusableItemsExample, null)),
                React.createElement(ExampleCard, { title: 'CommandBar with customized rendered items', code: CommandBarCustomizationExampleCode },
                    React.createElement(CommandBarCustomizationExample, null))), propertiesTables: React.createElement(PropertiesTableSet, { sources: [
                    require('!raw-loader!office-ui-fabric-react/src/components/CommandBar/CommandBar.types.ts'),
                    require('!raw-loader!office-ui-fabric-react/src/components/ContextualMenu/ContextualMenu.types.ts')
                ] }), overview: React.createElement(PageMarkdown, null, require('!raw-loader!office-ui-fabric-react/src/components/CommandBar/docs/CommandBarOverview.md')), bestPractices: React.createElement("div", null), dos: React.createElement(PageMarkdown, null, require('!raw-loader!office-ui-fabric-react/src/components/CommandBar/docs/CommandBarDos.md')), donts: React.createElement(PageMarkdown, null, require('!raw-loader!office-ui-fabric-react/src/components/CommandBar/docs/CommandBarDonts.md')), isHeaderVisible: this.props.isHeaderVisible, componentStatus: React.createElement(ComponentStatus, tslib_1.__assign({}, CommandBarStatus)) }));
    };
    return CommandBarPage;
}(React.Component));
export { CommandBarPage };
//# sourceMappingURL=CommandBarPage.js.map