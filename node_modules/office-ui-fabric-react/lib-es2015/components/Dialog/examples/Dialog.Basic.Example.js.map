{"version":3,"file":"Dialog.Basic.Example.js","sourceRoot":"../src/","sources":["components/Dialog/examples/Dialog.Basic.Example.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,mCAAmC,CAAC;AACrF,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,MAAM,mCAAmC,CAAC;AACjF,OAAO,6BAA6B,CAAC;AAErC;IAAwC,8CAEtC;IAEA,4BAAY,KAAS;QAArB,YACE,kBAAM,KAAK,CAAC,SAKb;QAsCO,iBAAW,GAAG;YACpB,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC;QACvC,CAAC,CAAA;QAEO,kBAAY,GAAG;YACrB,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QACtC,CAAC,CAAA;QA/CC,KAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,IAAI;SACjB,CAAC;;IACJ,CAAC;IAEM,mCAAM,GAAb;QACE,OAAO,CACL;YACE,oBAAC,aAAa,IACZ,aAAa,EAAC,yBAAyB,EACvC,OAAO,EAAG,IAAI,CAAC,WAAW,EAC1B,IAAI,EAAC,aAAa,GAClB;YACF,+BAAO,EAAE,EAAC,WAAW,EAAC,SAAS,EAAC,kBAAkB,sBAAwB;YAC1E,+BAAO,EAAE,EAAC,aAAa,EAAC,SAAS,EAAC,kBAAkB,4BAA8B;YAElF,oBAAC,MAAM,IACL,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,UAAU,EAC9B,SAAS,EAAG,IAAI,CAAC,YAAY,EAC7B,kBAAkB,EAAG;oBACnB,IAAI,EAAE,UAAU,CAAC,MAAM;oBACvB,KAAK,EAAE,qBAAqB;oBAC5B,OAAO,EAAE,4GAA4G;iBACtH,EACD,UAAU,EAAG;oBACX,WAAW,EAAE,WAAW;oBACxB,cAAc,EAAE,aAAa;oBAC7B,UAAU,EAAE,KAAK;oBACjB,kBAAkB,EAAE,uBAAuB;iBAC5C;gBAEC,IAAI,CAAC,qEAAqE;gBAC5E,oBAAC,YAAY;oBACX,oBAAC,aAAa,IAAC,OAAO,EAAG,IAAI,CAAC,YAAY,EAAG,IAAI,EAAC,MAAM,GAAG;oBAC3D,oBAAC,aAAa,IAAC,OAAO,EAAG,IAAI,CAAC,YAAY,EAAG,IAAI,EAAC,QAAQ,GAAG,CAChD,CACR,CACL,CACP,CAAC;IACJ,CAAC;IASH,yBAAC;AAAD,CAAC,AAvDD,CAAwC,KAAK,CAAC,SAAS,GAuDtD","sourcesContent":["import * as React from 'react';\r\nimport { Dialog, DialogType, DialogFooter } from 'office-ui-fabric-react/lib/Dialog';\r\nimport { PrimaryButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport './Dialog.Basic.Example.scss';\r\n\r\nexport class DialogBasicExample extends React.Component<{}, {\r\n  hideDialog: boolean\r\n}> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      hideDialog: true\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <DefaultButton\r\n          secondaryText='Opens the Sample Dialog'\r\n          onClick={ this._showDialog }\r\n          text='Open Dialog'\r\n        />\r\n        <label id='myLabelId' className='screenReaderOnly'>My sample Label</label>\r\n        <label id='mySubTextId' className='screenReaderOnly'>My Sample description</label>\r\n\r\n        <Dialog\r\n          hidden={ this.state.hideDialog }\r\n          onDismiss={ this._closeDialog }\r\n          dialogContentProps={ {\r\n            type: DialogType.normal,\r\n            title: 'All emails together',\r\n            subText: 'Your Inbox has changed. No longer does it include favorites, it is a singular destination for your emails.'\r\n          } }\r\n          modalProps={ {\r\n            titleAriaId: 'myLabelId',\r\n            subtitleAriaId: 'mySubTextId',\r\n            isBlocking: false,\r\n            containerClassName: 'ms-dialogMainOverride'\r\n          } }\r\n        >\r\n          { null /** You can also include null values as the result of conditionals */ }\r\n          <DialogFooter>\r\n            <PrimaryButton onClick={ this._closeDialog } text='Save' />\r\n            <DefaultButton onClick={ this._closeDialog } text='Cancel' />\r\n          </DialogFooter>\r\n        </Dialog>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _showDialog = (): void => {\r\n    this.setState({ hideDialog: false });\r\n  }\r\n\r\n  private _closeDialog = (): void => {\r\n    this.setState({ hideDialog: true });\r\n  }\r\n}\r\n"]}