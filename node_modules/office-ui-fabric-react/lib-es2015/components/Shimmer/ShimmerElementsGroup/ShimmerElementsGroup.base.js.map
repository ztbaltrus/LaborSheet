{"version":3,"file":"ShimmerElementsGroup.base.js","sourceRoot":"../src/","sources":["components/Shimmer/ShimmerElementsGroup/ShimmerElementsGroup.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent, classNamesFunction, customizable } from '../../../Utilities';\r\nimport {\r\n  IShimmerElementsGroupProps,\r\n  IShimmerElementsGroupStyleProps,\r\n  IShimmerElementsGroupStyles\r\n} from './ShimmerElementsGroup.types';\r\nimport { IStyleSet } from '../../../Styling';\r\nimport { ShimmerElementType, ShimmerElementsDefaultHeights, IShimmerElement } from '../Shimmer.types';\r\nimport { ShimmerLine } from '../ShimmerLine/ShimmerLine';\r\nimport { IShimmerLineStyles, IShimmerLineStyleProps } from '../ShimmerLine/ShimmerLine.types';\r\nimport { ShimmerGap } from '../ShimmerGap/ShimmerGap';\r\nimport { IShimmerGapStyles, IShimmerGapStyleProps } from '../ShimmerGap/ShimmerGap.types';\r\nimport { ShimmerCircle } from '../ShimmerCircle/ShimmerCircle';\r\nimport { IShimmerCircleStyles, IShimmerCircleStyleProps } from '../ShimmerCircle/ShimmerCircle.types';\r\n\r\nconst getClassNames = classNamesFunction<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>();\r\n\r\n@customizable('ShimmerElementsGroup', ['theme'])\r\nexport class ShimmerElementsGroupBase extends BaseComponent<IShimmerElementsGroupProps, {}> {\r\n  public static defaultProps: IShimmerElementsGroupProps = {\r\n    flexWrap: false\r\n  };\r\n\r\n  private _classNames: { [key in keyof IShimmerElementsGroupStyles]: string };\r\n\r\n  constructor(props: IShimmerElementsGroupProps) {\r\n    super(props);\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { getStyles, width, shimmerElements, rowHeight, flexWrap, theme } = this.props;\r\n\r\n    this._classNames = getClassNames(getStyles!, {\r\n      theme: theme!,\r\n      flexWrap\r\n    });\r\n\r\n    const height = rowHeight ? rowHeight : this._findMaxElementHeight(shimmerElements ? shimmerElements : []);\r\n\r\n    return (\r\n      // tslint:disable-next-line:jsx-ban-props\r\n      <div style={ { width: width ? width : 'auto' } } className={ this._classNames.root }>\r\n        { this._getRenderedElements(shimmerElements, height) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _getRenderedElements = (shimmerElements?: IShimmerElement[], rowHeight?: number): React.ReactNode => {\r\n    const renderedElements: React.ReactNode = shimmerElements ? (\r\n      shimmerElements.map(\r\n        (elem: IShimmerElement, index: number): JSX.Element => {\r\n          const { type, ...filteredElem } = elem;\r\n          switch (elem.type) {\r\n            case ShimmerElementType.circle:\r\n              return <ShimmerCircle key={ index } { ...filteredElem } getStyles={ this._getBorderStyles(elem, rowHeight) } />;\r\n            case ShimmerElementType.gap:\r\n              return <ShimmerGap key={ index } { ...filteredElem } getStyles={ this._getBorderStyles(elem, rowHeight) } />;\r\n            case ShimmerElementType.line:\r\n              return <ShimmerLine key={ index } { ...filteredElem } getStyles={ this._getBorderStyles(elem, rowHeight) } />;\r\n          }\r\n        }\r\n      )\r\n    ) : (\r\n        <ShimmerLine height={ ShimmerElementsDefaultHeights.line } getStyles={ this._getDefaultLineStyle } />\r\n      );\r\n\r\n    return renderedElements;\r\n  }\r\n\r\n  private _getBorderStyles = (\r\n    elem: IShimmerElement,\r\n    rowHeight?: number\r\n  ): (props: IShimmerCircleStyleProps | IShimmerGapStyleProps | IShimmerLineStyleProps) => IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\r\n    return (props: IShimmerCircleStyleProps | IShimmerGapStyleProps | IShimmerLineStyleProps): IShimmerCircleStyles | IShimmerGapStyles | IShimmerLineStyles => {\r\n      const elemHeight: number | undefined = elem.height;\r\n      const dif: number = rowHeight && elemHeight ? rowHeight - elemHeight : 0;\r\n\r\n      let borderStyle: IStyleSet | undefined;\r\n\r\n      if (!elem.verticalAlign || elem.verticalAlign === 'center') {\r\n        borderStyle = {\r\n          borderBottomWidth: `${dif ? Math.floor(dif / 2) : 0}px`,\r\n          borderTopWidth: `${dif ? Math.ceil(dif / 2) : 0}px`\r\n        };\r\n      } else if (elem.verticalAlign && elem.verticalAlign === 'top') {\r\n        borderStyle = {\r\n          borderBottomWidth: `${dif ? dif : 0}px`,\r\n          borderTopWidth: `0px`\r\n        };\r\n      } else if (elem.verticalAlign && elem.verticalAlign === 'bottom') {\r\n        borderStyle = {\r\n          borderBottomWidth: `0px`,\r\n          borderTopWidth: `${dif ? dif : 0}px`\r\n        };\r\n      }\r\n\r\n      return {\r\n        root: [{ ...borderStyle }]\r\n      };\r\n    };\r\n  }\r\n\r\n  /**\r\n   * User should not worry to provide which of the elements is the highest, we do the calculation for him.\r\n   * Plus if user forgot to specify the height we assign their defaults.\r\n   */\r\n  private _findMaxElementHeight = (elements: IShimmerElement[]): number => {\r\n    const itemsDefaulted: IShimmerElement[] = elements.map(\r\n      (elem: IShimmerElement): IShimmerElement => {\r\n        switch (elem.type) {\r\n          case ShimmerElementType.circle:\r\n            if (!elem.height) {\r\n              elem.height = ShimmerElementsDefaultHeights.circle;\r\n            }\r\n          case ShimmerElementType.line:\r\n            if (!elem.height) {\r\n              elem.height = ShimmerElementsDefaultHeights.line;\r\n            }\r\n          case ShimmerElementType.gap:\r\n            if (!elem.height) {\r\n              elem.height = ShimmerElementsDefaultHeights.gap;\r\n            }\r\n        }\r\n        return elem;\r\n      }\r\n    );\r\n\r\n    const rowHeight = itemsDefaulted.reduce((acc: number, next: IShimmerElement): number => {\r\n      return next.height ? (next.height > acc ? next.height : acc) : acc;\r\n    }, 0);\r\n\r\n    return rowHeight;\r\n  }\r\n\r\n  private _getDefaultLineStyle = (props: IShimmerLineStyleProps): IShimmerLineStyles => {\r\n    return { root: [{ borderWidth: '0px' }] };\r\n  }\r\n}\r\n"]}