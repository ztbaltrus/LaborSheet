{"version":3,"file":"Layer.Customized.Example.js","sourceRoot":"../src/","sources":["components/Layer/examples/Layer.Customized.Example.tsx"],"names":[],"mappings":";;;IAYA;QAA4C,kDAAiD;QAC3F,gCAAY,KAAS;YAArB,YACE,kBAAM,KAAK,CAAC,SAMb;YAuDO,qBAAe,GAAG;gBACxB,KAAI,CAAC,QAAQ,CAAC;oBACZ,SAAS,EAAE,KAAK;iBACjB,CAAC,CAAC;YACL,CAAC,CAAA;YAEO,wBAAkB,GAAG,UAAC,KAAsD,EAAE,OAAiB;gBACrG,KAAI,CAAC,QAAQ,CAAC;oBACZ,SAAS,EAAE,CAAC,CAAC,OAAO;iBACrB,CAAC,CAAC;YACL,CAAC,CAAA;YAEO,wBAAkB,GAAG,UAAC,KAAsD,EAAE,OAAiB;gBACrG,KAAI,CAAC,QAAQ,CAAC;oBACZ,SAAS,EAAE,CAAC,CAAC,OAAO;iBACrB,CAAC,CAAC;YACL,CAAC,CAAA;YA3EC,KAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,IAAI;aAChB,CAAC;;QACJ,CAAC;QAEM,uCAAM,GAAb;YACE,OAAO,CACL;gBACE;;oBACI,0CAAkB;qMAGlB;gBACJ,oBAAC,mBAAQ,IAAC,KAAK,EAAC,YAAY,EAAC,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAG,QAAQ,EAAG,IAAI,CAAC,kBAAkB,GAAK;gBACrG,oBAAC,mBAAQ,IAAC,KAAK,EAAC,YAAY,EAAC,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAG,QAAQ,EAAG,IAAI,CAAC,kBAAkB,GAAK;gBACrG,oBAAC,sBAAU,IACT,cAAc,EACZ,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;wBACrB,KAAK,EAAE;4BACL,MAAM,EAAE,MAAM;yBACf;qBACF,CAAC,CAAC,CAAC,EAAE,IAIN,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;oBACpB,CACE,oBAAC,aAAK,IACJ,MAAM,EAAG,IAAI,EACb,cAAc,EAAG,IAAI,EACrB,UAAU,EAAC,MAAM,EACjB,kBAAkB,EAChB;4BACE,2BAA2B,EAAE,IAAI;4BACjC,oBAAoB,EAAE,KAAK;yBAC5B,EAEH,WAAW,EAAG,IAAI,CAAC,eAAe,GAClC,CACH,CAAC,CAAC,CAAC,CACF,gCAAO,CACR,CAEM;gBACb,oBAAC,qBAAS,IACR,EAAE,EAAC,MAAM,EACT,KAAK,EACH;wBACE,QAAQ,EAAE,UAAU;wBACpB,MAAM,EAAE,OAAO;wBACf,QAAQ,EAAE,QAAQ;qBACnB,GAEH,CACE,CACP,CAAC;QACJ,CAAC;QAmBH,6BAAC;IAAD,CAAC,AAhFD,CAA4C,KAAK,CAAC,SAAS,GAgF1D;IAhFY,wDAAsB","sourcesContent":["\r\nimport * as React from 'react';\r\nimport { Customizer } from '@uifabric/utilities';\r\nimport { Panel } from '../../../Panel';\r\nimport { Checkbox } from '../../../Checkbox';\r\nimport { LayerHost } from '../LayerHost';\r\n\r\nexport interface ILayerCustomizedExampleState {\r\n  showPanel: boolean;\r\n  trapPanel: boolean;\r\n}\r\n\r\nexport class LayerCustomizedExample extends React.Component<{}, ILayerCustomizedExampleState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showPanel: true,\r\n      trapPanel: true\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div>\r\n        <p>\r\n          A <code>Panel</code> is rendered, trapped in a specified container.\r\n          Use 'Show panel' to show/hide the panel (or click the X to dismiss it).\r\n          Use 'Trap panel' to release the panel from its bounds.\r\n        </p>\r\n        <Checkbox label='Show panel' checked={ this.state.showPanel } onChange={ this._onShowPanelChange } />\r\n        <Checkbox label='Trap panel' checked={ this.state.trapPanel } onChange={ this._onTrapPanelChange } />\r\n        <Customizer\r\n          scopedSettings={\r\n            this.state.trapPanel ? {\r\n              Layer: {\r\n                hostId: 'test'\r\n              }\r\n            } : {}\r\n          }\r\n        >\r\n          {\r\n            this.state.showPanel ?\r\n              (\r\n                <Panel\r\n                  isOpen={ true }\r\n                  hasCloseButton={ true }\r\n                  headerText='Test'\r\n                  focusTrapZoneProps={\r\n                    {\r\n                      isClickableOutsideFocusTrap: true,\r\n                      forceFocusInsideTrap: false\r\n                    }\r\n                  }\r\n                  onDismissed={ this._onDismissPanel }\r\n                />\r\n              ) : (\r\n                <div />\r\n              )\r\n          }\r\n        </Customizer>\r\n        <LayerHost\r\n          id='test'\r\n          style={\r\n            {\r\n              position: 'relative',\r\n              height: '400px',\r\n              overflow: 'hidden'\r\n            }\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onDismissPanel = (): void => {\r\n    this.setState({\r\n      showPanel: false\r\n    });\r\n  }\r\n\r\n  private _onShowPanelChange = (event: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean): void => {\r\n    this.setState({\r\n      showPanel: !!checked\r\n    });\r\n  }\r\n\r\n  private _onTrapPanelChange = (event: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean): void => {\r\n    this.setState({\r\n      trapPanel: !!checked\r\n    });\r\n  }\r\n}\r\n"]}