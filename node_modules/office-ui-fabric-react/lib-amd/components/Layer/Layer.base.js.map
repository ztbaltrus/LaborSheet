{"version":3,"file":"Layer.base.js","sourceRoot":"../src/","sources":["components/Layer/Layer.base.tsx"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport { Fabric } from '../../Fabric';\r\nimport {\r\n  ILayerProps,\r\n  ILayerStyleProps,\r\n  ILayerStyles,\r\n} from './Layer.types';\r\nimport {\r\n  BaseComponent,\r\n  classNamesFunction,\r\n  customizable,\r\n  getDocument,\r\n  setVirtualParent,\r\n  createRef\r\n} from '../../Utilities';\r\n\r\nconst _layersByHostId: { [hostId: string]: LayerBase[] } = {};\r\nlet _defaultHostSelector: string | undefined;\r\n\r\nconst getClassNames = classNamesFunction<ILayerStyleProps, ILayerStyles>();\r\n\r\n@customizable('Layer', ['theme', 'hostId'])\r\nexport class LayerBase extends BaseComponent<ILayerProps, {}> {\r\n\r\n  public static defaultProps: ILayerProps = {\r\n    onLayerDidMount: () => undefined,\r\n    onLayerWillUnmount: () => undefined\r\n  };\r\n\r\n  private _rootElement = createRef<HTMLDivElement>();\r\n  private _host: Node;\r\n  private _layerElement: HTMLElement | undefined;\r\n  private _hasMounted: boolean;\r\n  /**\r\n   * Used for notifying applicable Layers that a host is available/unavailable and to re-evaluate Layers that\r\n   * care about the specific host.\r\n   */\r\n  public static notifyHostChanged(id: string) {\r\n    if (_layersByHostId[id]) {\r\n      _layersByHostId[id].forEach(layer => layer.forceUpdate());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the default target selector to use when determining the host in which\r\n   * Layered content will be injected into. If not provided, an element will be\r\n   * created at the end of the document body.\r\n   *\r\n   * Passing in a falsey value will clear the default target and reset back to\r\n   * using a created element at the end of document body.\r\n   */\r\n  public static setDefaultTarget(selector?: string) {\r\n    _defaultHostSelector = selector;\r\n  }\r\n\r\n  constructor(props: ILayerProps) {\r\n    super(props);\r\n\r\n    this._warnDeprecations({\r\n      onLayerMounted: 'onLayerDidMount'\r\n    });\r\n\r\n    if (this.props.hostId) {\r\n      if (!_layersByHostId[this.props.hostId]) {\r\n        _layersByHostId[this.props.hostId] = [];\r\n      }\r\n\r\n      _layersByHostId[this.props.hostId].push(this);\r\n    }\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this.componentDidUpdate();\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this._removeLayerElement();\r\n\r\n    if (this.props.hostId) {\r\n      _layersByHostId[this.props.hostId] = _layersByHostId[this.props.hostId].filter(layer => layer !== this);\r\n      if (!_layersByHostId[this.props.hostId].length) {\r\n        delete _layersByHostId[this.props.hostId];\r\n      }\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(): void {\r\n    const host = this._getHost();\r\n\r\n    const { className, getStyles, theme } = this.props;\r\n    const classNames = getClassNames(getStyles!,\r\n      {\r\n        theme: theme!,\r\n        className,\r\n        isNotHost: !this.props.hostId\r\n      }\r\n    );\r\n\r\n    if (host !== this._host) {\r\n      this._removeLayerElement();\r\n    }\r\n\r\n    if (host) {\r\n      this._host = host;\r\n\r\n      if (!this._layerElement) {\r\n        const rootElement = this._rootElement.current;\r\n        const doc = getDocument(rootElement);\r\n\r\n        if (!doc || !rootElement) {\r\n          return;\r\n        }\r\n\r\n        this._layerElement = doc.createElement('div');\r\n        this._layerElement.className = classNames.root!;\r\n\r\n        host.appendChild(this._layerElement);\r\n        setVirtualParent(this._layerElement, rootElement);\r\n      }\r\n\r\n      // Using this 'unstable' method allows us to retain the React context across the layer projection.\r\n      ReactDOM.unstable_renderSubtreeIntoContainer(\r\n        this,\r\n        (\r\n          <Fabric className={ classNames.content }>\r\n            { this.props.children }\r\n          </Fabric>\r\n        ),\r\n        this._layerElement,\r\n        () => {\r\n          if (!this._hasMounted) {\r\n            this._hasMounted = true;\r\n\r\n            // TODO: @deprecated cleanup required.\r\n            if (this.props.onLayerMounted) {\r\n              this.props.onLayerMounted();\r\n            }\r\n\r\n            this.props.onLayerDidMount!();\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <span\r\n        className='ms-Layer'\r\n        ref={ this._rootElement }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _removeLayerElement(): void {\r\n    if (this._layerElement) {\r\n      this.props.onLayerWillUnmount!();\r\n\r\n      ReactDOM.unmountComponentAtNode(this._layerElement);\r\n      const parentNode = this._layerElement.parentNode;\r\n      if (parentNode) {\r\n        parentNode.removeChild(this._layerElement);\r\n      }\r\n      this._layerElement = undefined;\r\n      this._hasMounted = false;\r\n    }\r\n  }\r\n\r\n  private _getHost(): Node | undefined {\r\n    const { hostId } = this.props;\r\n    const doc = getDocument(this._rootElement.current);\r\n\r\n    if (!doc) {\r\n      return undefined;\r\n    }\r\n\r\n    if (hostId) {\r\n      return doc.getElementById(hostId) as Node;\r\n    } else {\r\n      return _defaultHostSelector ? doc.querySelector(_defaultHostSelector) as Node : doc.body;\r\n    }\r\n  }\r\n\r\n}\r\n"]}