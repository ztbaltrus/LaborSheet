{"version":3,"file":"SpinButton.js","sourceRoot":"../src/","sources":["components/SpinButton/SpinButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { IconButton } from '../../Button';\r\nimport { Label } from '../../Label';\r\nimport { Icon } from '../../Icon';\r\nimport {\r\n  BaseComponent,\r\n  getId,\r\n  KeyCodes,\r\n  customizable,\r\n  calculatePrecision,\r\n  precisionRound,\r\n  createRef\r\n} from '../../Utilities';\r\nimport {\r\n  ISpinButton,\r\n  ISpinButtonProps,\r\n} from './SpinButton.types';\r\nimport { Position } from '../../utilities/positioning';\r\nimport { getStyles, getArrowButtonStyles } from './SpinButton.styles';\r\nimport { getClassNames } from './SpinButton.classNames';\r\nimport { KeytipData } from '../../KeytipData';\r\n\r\nexport enum KeyboardSpinDirection {\r\n  down = -1,\r\n  notSpinning = 0,\r\n  up = 1\r\n}\r\n\r\nexport interface ISpinButtonState {\r\n\r\n  /**\r\n   * Is true when the control has focus.\r\n   */\r\n  isFocused: boolean;\r\n\r\n  /**\r\n   * the value of the spin button\r\n   */\r\n  value: string;\r\n\r\n  /**\r\n   * keyboard spin direction, used to style the up or down button\r\n   * as active when up/down arrow is pressed\r\n   */\r\n  keyboardSpinDirection: KeyboardSpinDirection;\r\n\r\n  /**\r\n   * The calculated precision for the value.\r\n   */\r\n  precision: number;\r\n}\r\n\r\n@customizable('SpinButton', ['theme'])\r\nexport class SpinButton extends BaseComponent<ISpinButtonProps, ISpinButtonState> implements ISpinButton {\r\n\r\n  public static defaultProps: ISpinButtonProps = {\r\n    step: 1,\r\n    min: 0,\r\n    max: 100,\r\n    disabled: false,\r\n    labelPosition: Position.start,\r\n    label: '',\r\n    incrementButtonIcon: { iconName: 'ChevronUpSmall' },\r\n    decrementButtonIcon: { iconName: 'ChevronDownSmall' }\r\n  };\r\n\r\n  private _input = createRef<HTMLInputElement>();\r\n  private _inputId: string;\r\n  private _labelId: string;\r\n  private _lastValidValue: string;\r\n  private _spinningByMouse: boolean;\r\n\r\n  private _onValidate?: (value: string) => string | void;\r\n  private _onIncrement?: (value: string) => string | void;\r\n  private _onDecrement?: (value: string) => string | void;\r\n\r\n  private _currentStepFunctionHandle: number;\r\n  private _initialStepDelay = 400;\r\n  private _stepDelay = 75;\r\n\r\n  constructor(props: ISpinButtonProps) {\r\n    super(props);\r\n\r\n    this._warnMutuallyExclusive({\r\n      'value': 'defaultValue'\r\n    });\r\n\r\n    const value = props.value || props.defaultValue || String(props.min) || '0';\r\n    this._lastValidValue = value;\r\n\r\n    // Ensure that the autocalculated precision is not negative.\r\n    const precision = props.precision || Math.max(calculatePrecision(props.step!), 0);\r\n\r\n    this.state = {\r\n      isFocused: false,\r\n      value: value,\r\n      keyboardSpinDirection: KeyboardSpinDirection.notSpinning,\r\n      precision\r\n    };\r\n\r\n    this._currentStepFunctionHandle = -1;\r\n    this._labelId = getId('Label');\r\n    this._inputId = getId('input');\r\n    this._spinningByMouse = false;\r\n\r\n    if (!props.defaultValue && props.value !== undefined) {\r\n      this._onValidate = props.onValidate;\r\n      this._onIncrement = props.onIncrement;\r\n      this._onDecrement = props.onDecrement;\r\n    } else {\r\n      this._onValidate = this._defaultOnValidate;\r\n      this._onIncrement = this._defaultOnIncrement;\r\n      this._onDecrement = this._defaultOnDecrement;\r\n    }\r\n  }\r\n\r\n  /**\r\n  * Invoked when a component is receiving new props. This method is not called for the initial render.\r\n  */\r\n  public componentWillReceiveProps(newProps: ISpinButtonProps): void {\r\n    this._lastValidValue = this.state.value;\r\n    let value: string = newProps.value ? newProps.value : String(newProps.min);\r\n    if (newProps.defaultValue) {\r\n      value = String(Math.max(newProps.min as number, Math.min(newProps.max as number, Number(newProps.defaultValue))));\r\n    }\r\n\r\n    this.setState({\r\n      value: value,\r\n      precision: newProps.precision || this.state.precision\r\n    });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      disabled,\r\n      label,\r\n      min,\r\n      max,\r\n      labelPosition,\r\n      iconProps,\r\n      incrementButtonIcon,\r\n      incrementButtonAriaLabel,\r\n      decrementButtonIcon,\r\n      decrementButtonAriaLabel,\r\n      title,\r\n      ariaLabel,\r\n      styles: customStyles,\r\n      upArrowButtonStyles: customUpArrowButtonStyles,\r\n      downArrowButtonStyles: customDownArrowButtonStyles,\r\n      theme,\r\n      ariaPositionInSet,\r\n      ariaSetSize,\r\n      keytipProps\r\n    } = this.props;\r\n\r\n    const {\r\n      isFocused,\r\n      value,\r\n      keyboardSpinDirection\r\n    } = this.state;\r\n\r\n    const classNames = this.props.getClassNames ?\r\n      this.props.getClassNames(\r\n        theme!,\r\n        !!disabled,\r\n        !!isFocused,\r\n        keyboardSpinDirection,\r\n        labelPosition\r\n      ) : getClassNames(\r\n        getStyles(theme!, customStyles),\r\n        !!disabled,\r\n        !!isFocused,\r\n        keyboardSpinDirection,\r\n        labelPosition\r\n      );\r\n\r\n    return (\r\n      <div className={ classNames.root }>\r\n        { labelPosition !== Position.bottom && <div className={ classNames.labelWrapper }>\r\n          { iconProps && <Icon { ...iconProps } className={ classNames.icon } aria-hidden='true' /> }\r\n          { label &&\r\n            <Label\r\n              id={ this._labelId }\r\n              htmlFor={ this._inputId }\r\n              className={ classNames.label }\r\n            >\r\n              { label }\r\n            </Label>\r\n          }\r\n        </div> }\r\n        <KeytipData keytipProps={ keytipProps } disabled={ disabled }>\r\n          { (keytipAttributes: any): JSX.Element => (\r\n            <div\r\n              className={ classNames.spinButtonWrapper }\r\n              title={ title && title }\r\n              aria-label={ ariaLabel && ariaLabel }\r\n              aria-posinset={ ariaPositionInSet }\r\n              aria-setsize={ ariaSetSize }\r\n              data-ktp-target={ keytipAttributes['data-ktp-target'] }\r\n            >\r\n              <input\r\n                value={ value }\r\n                id={ this._inputId }\r\n                onChange={ this._onChange }\r\n                onInput={ this._onInputChange }\r\n                className={ classNames.input }\r\n                type='text'\r\n                autoComplete='off'\r\n                role='spinbutton'\r\n                aria-labelledby={ label && this._labelId }\r\n                aria-valuenow={ !isNaN(Number(value)) ? Number(value) : undefined }\r\n                aria-valuetext={ isNaN(Number(value)) ? value : undefined }\r\n                aria-valuemin={ min }\r\n                aria-valuemax={ max }\r\n                aria-describedby={ keytipAttributes['aria-describedby'] }\r\n                onBlur={ this._onBlur }\r\n                ref={ this._input }\r\n                onFocus={ this._onFocus }\r\n                onKeyDown={ this._handleKeyDown }\r\n                onKeyUp={ this._handleKeyUp }\r\n                readOnly={ disabled }\r\n                disabled={ disabled }\r\n                aria-disabled={ disabled }\r\n                data-lpignore={ true }\r\n                data-ktp-execute-target={ keytipAttributes['data-ktp-execute-target'] }\r\n              />\r\n              <span className={ classNames.arrowBox }>\r\n                <IconButton\r\n                  styles={ getArrowButtonStyles(theme!, true, customUpArrowButtonStyles) }\r\n                  className={ 'ms-UpButton' }\r\n                  checked={ keyboardSpinDirection === KeyboardSpinDirection.up }\r\n                  disabled={ disabled }\r\n                  iconProps={ incrementButtonIcon }\r\n                  onMouseDown={ this._onIncrementMouseDown }\r\n                  onMouseLeave={ this._stop }\r\n                  onMouseUp={ this._stop }\r\n                  tabIndex={ -1 }\r\n                  ariaLabel={ incrementButtonAriaLabel }\r\n                  data-is-focusable={ false }\r\n                />\r\n                <IconButton\r\n                  styles={ getArrowButtonStyles(theme!, false, customDownArrowButtonStyles) }\r\n                  className={ 'ms-DownButton' }\r\n                  checked={ keyboardSpinDirection === KeyboardSpinDirection.down }\r\n                  disabled={ disabled }\r\n                  iconProps={ decrementButtonIcon }\r\n                  onMouseDown={ this._onDecrementMouseDown }\r\n                  onMouseLeave={ this._stop }\r\n                  onMouseUp={ this._stop }\r\n                  tabIndex={ -1 }\r\n                  ariaLabel={ decrementButtonAriaLabel }\r\n                  data-is-focusable={ false }\r\n                />\r\n              </span>\r\n            </div>\r\n          ) }\r\n        </KeytipData>\r\n        { labelPosition === Position.bottom && <div className={ classNames.labelWrapper }>\r\n          { iconProps && <Icon iconName={ iconProps.iconName } className={ classNames.icon } aria-hidden='true' /> }\r\n          { label &&\r\n            <Label\r\n              id={ this._labelId }\r\n              htmlFor={ this._inputId }\r\n              className={ classNames.label }\r\n            >\r\n              { label }\r\n            </Label>\r\n          }\r\n        </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._input.current) {\r\n      this._input.current.focus();\r\n    }\r\n  }\r\n\r\n  private _onFocus = (ev: React.FocusEvent<HTMLInputElement>): void => {\r\n    // We can't set focus on a non-existing element\r\n    if (!this._input.current) {\r\n      return;\r\n    }\r\n\r\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\r\n      this._stop();\r\n    }\r\n\r\n    this._input.current.select();\r\n\r\n    this.setState({ isFocused: true });\r\n\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(ev);\r\n    }\r\n  }\r\n\r\n  private _onBlur = (ev: React.FocusEvent<HTMLInputElement>): void => {\r\n    this._validate(ev);\r\n    this.setState({ isFocused: false });\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(ev);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the value of the spin button.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this.props.value === undefined ? this.state.value : this.props.value;\r\n  }\r\n\r\n  /**\r\n   * Validate function to use if one is not passed in\r\n   */\r\n  private _defaultOnValidate = (value: string) => {\r\n    if (isNaN(Number(value))) {\r\n      return this._lastValidValue;\r\n    }\r\n    const newValue = Math.min(this.props.max as number, Math.max(this.props.min as number, Number(value)));\r\n    return String(newValue);\r\n  }\r\n\r\n  /**\r\n   * Increment function to use if one is not passed in\r\n   */\r\n  private _defaultOnIncrement = (value: string): string | void => {\r\n    let newValue: number = Math.min(Number(value) + Number(this.props.step)!, this.props.max!);\r\n    newValue = precisionRound(newValue, this.state.precision);\r\n    return String(newValue);\r\n  }\r\n\r\n  /**\r\n   * Increment function to use if one is not passed in\r\n   */\r\n  private _defaultOnDecrement = (value: string): string | void => {\r\n    let newValue: number = Math.max(Number(value) - Number(this.props.step)!, this.props.min!);\r\n    newValue = precisionRound(newValue, this.state.precision);\r\n    return String(newValue);\r\n  }\r\n\r\n  private _onChange(): void {\r\n    /**\r\n     * A noop input change handler.\r\n     * https://github.com/facebook/react/issues/7027.\r\n     * Using the native onInput handler fixes the issue but onChange\r\n     * still need to be wired to avoid React console errors\r\n     * TODO: Check if issue is resolved when React 16 is available.\r\n     */\r\n  }\r\n\r\n  /**\r\n   * This is used when validating text entry\r\n   * in the input (not when changed via the buttons)\r\n   * @param event - the event that fired\r\n   */\r\n  private _validate = (event: React.FocusEvent<HTMLInputElement>): void => {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n    if (this.state.value) {\r\n      const newValue = this._onValidate!(value);\r\n      if (newValue) {\r\n        this._lastValidValue = newValue;\r\n        this.setState({ value: newValue });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The method is needed to ensure we are updating the actual input value.\r\n   * without this our value will never change (and validation will not have the correct number)\r\n   * @param event - the event that was fired\r\n   */\r\n  private _onInputChange = (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n\r\n    this.setState({\r\n      value: value,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update the value with the given stepFunction\r\n   * @param shouldSpin - should we fire off another updateValue when we are done here? This should be true\r\n   * when spinning in response to a mouseDown\r\n   * @param stepFunction - function to use to step by\r\n   */\r\n  private _updateValue = (shouldSpin: boolean, stepDelay: number, stepFunction: (value: string) => string | void): void => {\r\n    const newValue: string | void = stepFunction(this.state.value);\r\n    if (newValue) {\r\n      this._lastValidValue = newValue;\r\n      this.setState({ value: newValue });\r\n    }\r\n\r\n    if (this._spinningByMouse !== shouldSpin) {\r\n      this._spinningByMouse = shouldSpin;\r\n    }\r\n\r\n    if (shouldSpin) {\r\n      this._currentStepFunctionHandle = this._async.setTimeout(() => { this._updateValue(shouldSpin, this._stepDelay, stepFunction); }, stepDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop spinning (clear any currently pending update and set spinning to false)\r\n   */\r\n  private _stop = (): void => {\r\n    if (this._currentStepFunctionHandle >= 0) {\r\n      this._async.clearTimeout(this._currentStepFunctionHandle);\r\n      this._currentStepFunctionHandle = -1;\r\n    }\r\n\r\n    if (this._spinningByMouse || this.state.keyboardSpinDirection !== KeyboardSpinDirection.notSpinning) {\r\n      this._spinningByMouse = false;\r\n      this.setState({ keyboardSpinDirection: KeyboardSpinDirection.notSpinning });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle keydown on the text field. We need to update\r\n   * the value when up or down arrow are depressed\r\n   * @param event - the keyboardEvent that was fired\r\n   */\r\n  private _handleKeyDown = (event: React.KeyboardEvent<HTMLElement>): void => {\r\n\r\n    // eat the up and down arrow keys to keep focus in the spinButton\r\n    // (especially when a spinButton is inside of a FocusZone)\r\n    if (event.which === KeyCodes.up || event.which === KeyCodes.down) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    }\r\n\r\n    if (this.props.disabled) {\r\n      this._stop();\r\n      return;\r\n    }\r\n\r\n    let spinDirection = KeyboardSpinDirection.notSpinning;\r\n\r\n    if (event.which === KeyCodes.up) {\r\n\r\n      spinDirection = KeyboardSpinDirection.up;\r\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\r\n    } else if (event.which === KeyCodes.down) {\r\n\r\n      spinDirection = KeyboardSpinDirection.down;\r\n      this._updateValue(false /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\r\n    } else if (event.which === KeyCodes.enter) {\r\n      event.currentTarget.blur();\r\n      this.focus();\r\n    } else if (event.which === KeyCodes.escape) {\r\n      if (this.state.value !== this._lastValidValue) {\r\n        this.setState({ value: this._lastValidValue });\r\n      }\r\n    }\r\n\r\n    // style the increment/decrement button to look active\r\n    // when the corresponding up/down arrow keys trigger a step\r\n    if (this.state.keyboardSpinDirection !== spinDirection) {\r\n      this.setState({ keyboardSpinDirection: spinDirection });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make sure that we have stopped spinning on keyUp\r\n   * if the up or down arrow fired this event\r\n   * @param event stop spinning if we\r\n   */\r\n  private _handleKeyUp = (event: React.KeyboardEvent<HTMLElement>): void => {\r\n    if (this.props.disabled || event.which === KeyCodes.up || event.which === KeyCodes.down) {\r\n      this._stop();\r\n      return;\r\n    }\r\n  }\r\n\r\n  private _onIncrementMouseDown = (): void => {\r\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onIncrement!);\r\n  }\r\n\r\n  private _onDecrementMouseDown = (): void => {\r\n    this._updateValue(true /* shouldSpin */, this._initialStepDelay, this._onDecrement!);\r\n  }\r\n}\r\n"]}