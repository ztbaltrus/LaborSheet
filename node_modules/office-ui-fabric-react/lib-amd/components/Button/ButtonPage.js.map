{"version":3,"file":"ButtonPage.js","sourceRoot":"../src/","sources":["components/Button/ButtonPage.tsx"],"names":[],"mappings":";;;IAsBA,IAAM,aAAa,GAAQ,mBAAmB,CAAC;IAE/C,IAAM,wBAAwB,GAAG,OAAO,CACtC,8FAA8F,CACrF,CAAC;IACZ,IAAM,yBAAyB,GAAG,OAAO,CACvC,+FAA+F,CACtF,CAAC;IACZ,IAAM,uBAAuB,GAAG,OAAO,CACrC,6FAA6F,CACpF,CAAC;IACZ,IAAM,2BAA2B,GAAG,OAAO,CACzC,iGAAiG,CACxF,CAAC;IACZ,IAAM,qBAAqB,GAAG,OAAO,CACnC,2FAA2F,CAClF,CAAC;IACZ,IAAM,uBAAuB,GAAG,OAAO,CACrC,6FAA6F,CACpF,CAAC;IACZ,IAAM,6BAA6B,GAAG,OAAO,CAC3C,mGAAmG,CAC1F,CAAC;IACZ,IAAM,+BAA+B,GAAG,OAAO,CAC7C,qGAAqG,CAC5F,CAAC;IACZ,IAAM,qBAAqB,GAAG,OAAO,CACnC,2FAA2F,CAClF,CAAC;IACZ,IAAM,sBAAsB,GAAG,OAAO,CACpC,4FAA4F,CACnF,CAAC;IAOZ;QAAgC,sCAA8D;QAC5F,oBAAY,KAA8B;YAA1C,YACE,kBAAM,KAAK,CAAC,SAKb;YAJC,KAAI,CAAC,KAAK,GAAG;gBACX,kBAAkB,EAAE,KAAK;gBACzB,iBAAiB,EAAE,KAAK;aACzB,CAAC;;QACJ,CAAC;QAEM,2BAAM,GAAb;YACE,OAAO,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,QAAQ,EACd,aAAa,EAAC,eAAe,EAC7B,YAAY,EAAC,uHAAuH,EACpI,YAAY,EACV;oBACE,oBAAC,mBAAQ,IACP,SAAS,EAAG,aAAa,CAAC,eAAe,EACzC,KAAK,EAAC,iBAAiB,EACvB,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EACvC,QAAQ,EAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,GAC7C;oBACF,oBAAC,mBAAQ,IACP,SAAS,EAAG,aAAa,CAAC,eAAe,EACzC,KAAK,EAAC,iBAAiB,EACvB,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,EACtC,QAAQ,EAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,GAC5C;oBACF,oBAAC,8BAAW,IAAC,KAAK,EAAC,gBAAgB,EAAC,IAAI,EAAG,wBAAwB;wBACjE,oBAAC,6CAAoB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CAChG;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,iBAAiB,EAAC,IAAI,EAAG,yBAAyB;wBACnE,oBAAC,+CAAqB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CACjG;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,oBAAoB,EAAC,IAAI,EAAG,2BAA2B;wBACxE,oBAAC,mDAAuB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CACnG;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,cAAc,EAAC,IAAI,EAAG,sBAAsB;wBAC7D,oBAAC,yCAAkB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CAC9F;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,aAAa,EAAC,IAAI,EAAG,qBAAqB;wBAC3D,oBAAC,uCAAiB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CAC7F;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,wBAAwB,EAAC,IAAI,EAAG,+BAA+B;wBAChF,oBAAC,2DAA2B,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CACvG;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,eAAe,EAAC,IAAI,EAAG,uBAAuB;wBAC/D,oBAAC,2CAAmB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CAC/F,CACV,EAER,0BAA0B,EACxB;oBACE,oBAAC,8BAAW,IAAC,KAAK,EAAC,oBAAoB,EAAC,IAAI,EAAG,uBAAuB;wBACpE,oBAAC,2CAAmB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CAC/F;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,gDAAgD,EAAC,IAAI,EAAG,6BAA6B;wBACtG,oBAAC,uDAAyB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CACrG;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,8BAA8B,EAAC,IAAI,EAAG,qBAAqB;wBAC5E,oBAAC,uCAAiB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CAC7F;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,qBAAqB,EAAC,IAAI,EAAG,sBAAsB;wBACpE,oBAAC,+CAAwB,IAAC,QAAQ,EAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,EAAG,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,GAAK,CACpG,CACV,EAER,gBAAgB,EAAG,IAAI,EACvB,kBAAkB,EAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,EACpC,gBAAgB,EACd,oBAAC,qCAAkB,IACjB,OAAO,EAAG;wBACR,OAAO,CAAS,0EAA0E,CAAC;qBAC5F,GACD,EAEJ,QAAQ,EACN,oBAAC,+BAAY,QACT,OAAO,CAAS,iFAAiF,CAAC,CACvF,EAEjB,aAAa,EACX,gCAAO,EAET,GAAG,EACD,oBAAC,+BAAY,QACT,OAAO,CAAS,4EAA4E,CAAC,CAClF,EAEjB,KAAK,EACH,oBAAC,+BAAY,QACT,OAAO,CAAS,8EAA8E,CAAC,CACpF,EAEjB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAC5C,eAAe,EACb,oBAAC,iCAAe,uBACT,+BAAY,EACjB,GAEJ,CACH,CAAC;QACJ,CAAC;QAEO,uCAAkB,GAA1B,UAA2B,EAAiC,EAAE,QAAiB;YAC7E,IAAI,CAAC,QAAQ,CAAC;gBACZ,kBAAkB,EAAE,QAAQ;aAC7B,CAAC,CAAC;QACL,CAAC;QAEO,sCAAiB,GAAzB,UAA0B,EAAiC,EAAE,OAAgB;YAC3E,IAAI,CAAC,QAAQ,CAAC;gBACZ,iBAAiB,EAAE,OAAO;aAC3B,CAAC,CAAC;QACL,CAAC;QACH,iBAAC;IAAD,CAAC,AApHD,CAAgC,KAAK,CAAC,SAAS,GAoH9C;IApHY,gCAAU","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  ComponentPage,\r\n  PropertiesTableSet,\r\n  PageMarkdown,\r\n} from '@uifabric/example-app-base';\r\nimport { ButtonStatus } from './Button.checklist';\r\nimport { ButtonDefaultExample } from './examples/Button.Default.Example';\r\nimport { ButtonContextualMenuExample } from './examples/Button.ContextualMenu.Example';\r\nimport { ButtonCompoundExample } from './examples/Button.Compound.Example';\r\nimport { ButtonActionExample } from './examples/Button.Action.Example';\r\nimport { ButtonCommandBarExample } from './examples/Button.CommandBar.Example';\r\nimport { ButtonIconExample } from './examples/Button.Icon.Example';\r\nimport { ButtonAnchorExample } from './examples/Button.Anchor.Example';\r\nimport { ButtonScreenReaderExample } from './examples/Button.ScreenReader.Example';\r\nimport { ButtonSwapExample } from './examples/Button.Swap.Example';\r\nimport { ButtonSplitExample, ButtonSplitCustomExample } from './examples/Button.Split.Example';\r\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\r\nimport { Checkbox } from 'office-ui-fabric-react/lib/Checkbox';\r\nimport * as exampleStylesImport from '../../common/_exampleStyles.scss';\r\nconst exampleStyles: any = exampleStylesImport;\r\n\r\nconst ButtonDefaultExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Default.Example.tsx'\r\n) as string;\r\nconst ButtonCompoundExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Compound.Example.tsx'\r\n) as string;\r\nconst ButtonActionExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Action.Example.tsx'\r\n) as string;\r\nconst ButtonCommandBarExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.CommandBar.Example.tsx'\r\n) as string;\r\nconst ButtonIconExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Icon.Example.tsx'\r\n) as string;\r\nconst ButtonAnchorExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Anchor.Example.tsx'\r\n) as string;\r\nconst ButtonScreenReaderExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.ScreenReader.Example.tsx'\r\n) as string;\r\nconst ButtonContextualMenuExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.ContextualMenu.Example.tsx'\r\n) as string;\r\nconst ButtonSwapExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Swap.Example.tsx'\r\n) as string;\r\nconst ButtonSplitExampleCode = require(\r\n  '!raw-loader!office-ui-fabric-react/src/components/Button/examples/Button.Split.Example.tsx'\r\n) as string;\r\n\r\nexport interface IButtonDemoPageState {\r\n  areButtonsDisabled?: boolean;\r\n  areButtonsChecked?: boolean;\r\n}\r\n\r\nexport class ButtonPage extends React.Component<IComponentDemoPageProps, IButtonDemoPageState> {\r\n  constructor(props: IComponentDemoPageProps) {\r\n    super(props);\r\n    this.state = {\r\n      areButtonsDisabled: false,\r\n      areButtonsChecked: false\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <ComponentPage\r\n        title='Button'\r\n        componentName='ButtonExample'\r\n        componentUrl='https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/office-ui-fabric-react/src/components/Button'\r\n        exampleCards={\r\n          <div>\r\n            <Checkbox\r\n              className={ exampleStyles.exampleCheckbox }\r\n              label='Disable buttons'\r\n              checked={ this.state.areButtonsDisabled }\r\n              onChange={ this._onDisabledChanged.bind(this) }\r\n            />\r\n            <Checkbox\r\n              className={ exampleStyles.exampleCheckbox }\r\n              label='Mark as checked'\r\n              checked={ this.state.areButtonsChecked }\r\n              onChange={ this._onToggledChanged.bind(this) }\r\n            />\r\n            <ExampleCard title='Default Button' code={ ButtonDefaultExampleCode }>\r\n              <ButtonDefaultExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Compound Button' code={ ButtonCompoundExampleCode }>\r\n              <ButtonCompoundExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Command Bar Button' code={ ButtonCommandBarExampleCode }>\r\n              <ButtonCommandBarExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Split Button' code={ ButtonSplitExampleCode }>\r\n              <ButtonSplitExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Icon Button' code={ ButtonIconExampleCode }>\r\n              <ButtonIconExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Contextual Menu Button' code={ ButtonContextualMenuExampleCode }>\r\n              <ButtonContextualMenuExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Action Button' code={ ButtonActionExampleCode }>\r\n              <ButtonActionExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        implementationExampleCards={\r\n          <div>\r\n            <ExampleCard title='Button Like Anchor' code={ ButtonAnchorExampleCode }>\r\n              <ButtonAnchorExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button with Aria Description for Screen Reader' code={ ButtonScreenReaderExampleCode }>\r\n              <ButtonScreenReaderExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button Swap with Focus State' code={ ButtonSwapExampleCode }>\r\n              <ButtonSwapExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Custom Split Button' code={ ButtonSplitExampleCode }>\r\n              <ButtonSplitCustomExample disabled={ this.state.areButtonsDisabled } checked={ this.state.areButtonsChecked } />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        allowNativeProps={ true }\r\n        nativePropsElement={ ['a', 'button'] }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/Button/Button.types.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <PageMarkdown>\r\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Button/docs/ButtonOverview.md') }\r\n          </PageMarkdown>\r\n        }\r\n        bestPractices={\r\n          <div />\r\n        }\r\n        dos={\r\n          <PageMarkdown>\r\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Button/docs/ButtonDos.md') }\r\n          </PageMarkdown>\r\n        }\r\n        donts={\r\n          <PageMarkdown>\r\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Button/docs/ButtonDonts.md') }\r\n          </PageMarkdown>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }\r\n        componentStatus={\r\n          <ComponentStatus\r\n            { ...ButtonStatus }\r\n          />\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onDisabledChanged(ev: React.MouseEvent<HTMLElement>, disabled: boolean): void {\r\n    this.setState({\r\n      areButtonsDisabled: disabled\r\n    });\r\n  }\r\n\r\n  private _onToggledChanged(ev: React.MouseEvent<HTMLElement>, toggled: boolean): void {\r\n    this.setState({\r\n      areButtonsChecked: toggled\r\n    });\r\n  }\r\n}\r\n"]}