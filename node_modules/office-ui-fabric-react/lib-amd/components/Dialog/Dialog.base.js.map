{"version":3,"file":"Dialog.base.js","sourceRoot":"../src/","sources":["components/Dialog/Dialog.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  classNamesFunction,\r\n  customizable,\r\n  getId\r\n} from '../../Utilities';\r\nimport {\r\n  IDialogProps,\r\n  IDialogStyleProps,\r\n  IDialogStyles,\r\n} from './Dialog.types';\r\nimport { DialogType, IDialogContentProps } from './DialogContent.types';\r\nimport { Modal, IModalProps } from '../../Modal';\r\nimport { withResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\r\n\r\nconst getClassNames = classNamesFunction<IDialogStyleProps, IDialogStyles>();\r\n\r\nimport { DialogContent } from './DialogContent';\r\n\r\nconst DefaultModalProps: IModalProps = {\r\n  isDarkOverlay: false,\r\n  isBlocking: false,\r\n  className: '',\r\n  containerClassName: ''\r\n};\r\n\r\nconst DefaultDialogContentProps: IDialogContentProps = {\r\n  type: DialogType.normal,\r\n  className: '',\r\n  topButtonsProps: [],\r\n};\r\n\r\n@customizable('Dialog', ['theme'])\r\n@withResponsiveMode\r\nexport class DialogBase extends BaseComponent<IDialogProps, {}> {\r\n  public static defaultProps: IDialogProps = {\r\n    hidden: true,\r\n  };\r\n\r\n  private _id: string;\r\n  private _defaultTitleTextId: string;\r\n  private _defaultSubTextId: string;\r\n\r\n  constructor(props: IDialogProps) {\r\n    super(props);\r\n\r\n    this._id = getId('Dialog');\r\n    this._defaultTitleTextId = this._id + '-title';\r\n    this._defaultSubTextId = this._id + '-subText';\r\n\r\n    this._warnDeprecations({\r\n      'isOpen': 'hidden',\r\n      'type': 'dialogContentProps.type',\r\n      'subText': 'dialogContentProps.subText',\r\n      'contentClassName': 'dialogContentProps.className',\r\n      'topButtonsProps': 'dialogContentProps.topButtonsProps',\r\n      'className': 'modalProps.className',\r\n      'isDarkOverlay': 'modalProps.isDarkOverlay',\r\n      'isBlocking': 'modalProps.isBlocking',\r\n      'containerClassName': 'modalProps.containerClassName',\r\n      'onDismissed': 'modalProps.onDismissed',\r\n      'onLayerDidMount': 'modalProps.onLayerDidMount',\r\n      'ariaDescribedById': 'modalProps.subtitleAriaId',\r\n      'ariaLabelledById': 'modalProps.titleAriaId'\r\n    });\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      className,\r\n      containerClassName,\r\n      contentClassName,\r\n      elementToFocusOnDismiss,\r\n      firstFocusableSelector,\r\n      forceFocusInsideTrap,\r\n      getStyles,\r\n      hidden,\r\n      ignoreExternalFocusing,\r\n      isBlocking,\r\n      isClickableOutsideFocusTrap,\r\n      isDarkOverlay,\r\n      isOpen,\r\n      onDismiss,\r\n      onDismissed,\r\n      onLayerDidMount,\r\n      responsiveMode,\r\n      subText,\r\n      theme,\r\n      title,\r\n      topButtonsProps,\r\n      type,\r\n    } = this.props;\r\n\r\n    const modalProps = {\r\n      ...DefaultModalProps,\r\n      ...this.props.modalProps\r\n    };\r\n\r\n    const dialogContentProps: IDialogContentProps = {\r\n      ...DefaultDialogContentProps,\r\n      ...this.props.dialogContentProps,\r\n    };\r\n\r\n    const classNames = getClassNames(getStyles!, {\r\n      theme: theme!,\r\n      className: className || modalProps!.className,\r\n      containerClassName: containerClassName || modalProps!.containerClassName,\r\n      hidden,\r\n    });\r\n\r\n    return (\r\n      <Modal\r\n        elementToFocusOnDismiss={ elementToFocusOnDismiss }\r\n        firstFocusableSelector={ firstFocusableSelector }\r\n        forceFocusInsideTrap={ forceFocusInsideTrap }\r\n        ignoreExternalFocusing={ ignoreExternalFocusing }\r\n        isClickableOutsideFocusTrap={ isClickableOutsideFocusTrap }\r\n        onDismissed={ onDismissed }\r\n        onLayerDidMount={ onLayerDidMount }\r\n        responsiveMode={ responsiveMode }\r\n        { ...modalProps }\r\n        isDarkOverlay={ isDarkOverlay !== undefined ? isDarkOverlay : modalProps!.isDarkOverlay }\r\n        isBlocking={ isBlocking !== undefined ? isBlocking : modalProps!.isBlocking }\r\n        isOpen={ isOpen !== undefined ? isOpen : !hidden }\r\n        className={ classNames.root }\r\n        containerClassName={ classNames.main }\r\n        onDismiss={ onDismiss ? onDismiss : modalProps!.onDismiss }\r\n        subtitleAriaId={ this._getSubTextId() }\r\n        titleAriaId={ this._getTitleTextId() }\r\n      >\r\n        <DialogContent\r\n          titleId={ this._defaultTitleTextId }\r\n          subTextId={ this._defaultSubTextId }\r\n          title={ title }\r\n          subText={ subText }\r\n          showCloseButton={ isBlocking !== undefined ? !isBlocking : !modalProps!.isBlocking }\r\n          topButtonsProps={ topButtonsProps ? topButtonsProps : dialogContentProps!.topButtonsProps }\r\n          type={ type !== undefined ? type : dialogContentProps!.type }\r\n          onDismiss={ onDismiss ? onDismiss : dialogContentProps!.onDismiss }\r\n          className={ contentClassName || dialogContentProps!.className }\r\n          { ...dialogContentProps }\r\n        >\r\n          { this.props.children }\r\n        </DialogContent>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  private _getSubTextId = (): string | undefined => {\r\n    const { ariaDescribedById, modalProps, dialogContentProps, subText } = this.props;\r\n    let id = ariaDescribedById || (modalProps && modalProps.subtitleAriaId);\r\n\r\n    if (!id) {\r\n      id = (subText || (dialogContentProps && dialogContentProps.subText)) && this._defaultSubTextId;\r\n    }\r\n\r\n    return id;\r\n  }\r\n\r\n  private _getTitleTextId = (): string | undefined => {\r\n    const { ariaLabelledById, modalProps, dialogContentProps, title } = this.props;\r\n    let id = ariaLabelledById || (modalProps && modalProps.titleAriaId);\r\n\r\n    if (!id) {\r\n      id = (title || (dialogContentProps && dialogContentProps.title)) && this._defaultTitleTextId;\r\n    }\r\n\r\n    return id;\r\n  }\r\n}\r\n"]}