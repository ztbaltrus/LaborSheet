{"version":3,"file":"DatePicker.Format.Example.js","sourceRoot":"../src/","sources":["components/DatePicker/examples/DatePicker.Format.Example.tsx"],"names":[],"mappings":";;;IASA,IAAM,gBAAgB,GAAuB;QAC3C,MAAM,EAAE;YACN,SAAS;YACT,UAAU;YACV,OAAO;YACP,OAAO;YACP,KAAK;YACL,MAAM;YACN,MAAM;YACN,QAAQ;YACR,WAAW;YACX,SAAS;YACT,UAAU;YACV,UAAU;SACX;QAED,WAAW,EAAE;YACX,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;YACL,KAAK;SACN;QAED,IAAI,EAAE;YACJ,QAAQ;YACR,QAAQ;YACR,SAAS;YACT,WAAW;YACX,UAAU;YACV,QAAQ;YACR,UAAU;SACX;QAED,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;QAE9C,SAAS,EAAE,aAAa;QACxB,kBAAkB,EAAE,sBAAsB;QAC1C,kBAAkB,EAAE,kBAAkB;QACtC,iBAAiB,EAAE,qBAAqB;QACxC,iBAAiB,EAAE,iBAAiB;QAEpC,sBAAsB,EAAE,yBAAyB;QAEjD,wBAAwB,EAAE,sBAAsB;KACjD,CAAC;IAOF;QAA6C,mDAG1C;QACD,iCAAmB,KAAS;YAA5B,YACE,kBAAM,KAAK,CAAC,SAMb;YAiCO,mBAAa,GAAG,UAAC,IAA6B;gBACpD,KAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YACjC,CAAC,CAAA;YAEO,cAAQ,GAAG;gBACjB,KAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YACjC,CAAC,CAAA;YAEO,mBAAa,GAAG,UAAC,IAAU;gBACjC,OAAO,CACL,IAAI,CAAC,OAAO,EAAE;oBACd,GAAG;oBACH,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;oBACrB,GAAG;oBACH,IAAI,CAAC,WAAW,EAAE,GAAG,GAAG,CACzB,CAAC;YACJ,CAAC,CAAA;YAEO,4BAAsB,GAAG,UAAC,KAAa;gBAC7C,IAAM,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,IAAI,EAAE,CAAC;gBAC5C,IAAM,MAAM,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC/C,IAAM,GAAG,GACP,MAAM,CAAC,MAAM,GAAG,CAAC;oBACf,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACpD,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;gBACrB,IAAM,KAAK,GACT,MAAM,CAAC,MAAM,GAAG,CAAC;oBACf,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;oBACxD,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACtB,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC5E,IAAI,IAAI,GAAG,GAAG,EAAE;oBACd,IAAI,IAAI,IAAI,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC;iBACvD;gBACD,OAAO,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;YACpC,CAAC,CAAA;YAvEC,KAAI,CAAC,KAAK,GAAG;gBACX,cAAc,EAAE,sBAAS,CAAC,MAAM;gBAChC,KAAK,EAAE,IAAI;aACZ,CAAC;;QACJ,CAAC;QAEM,wCAAM,GAAb;YACQ,IAAA,eAAsC,EAApC,kCAAc,EAAE,gBAAK,CAAgB;YAC7C,IAAM,IAAI,GACR,uFAAuF,CAAC;YAC1F,OAAO,CACL,6BAAK,SAAS,EAAC,wBAAwB;gBACrC,uTAMI;gBACJ,oBAAC,uBAAU,IACT,KAAK,EAAC,YAAY,EAClB,UAAU,EAAG,KAAK,EAClB,cAAc,EAAG,IAAI,EACrB,SAAS,EAAG,IAAI,EAChB,cAAc,EAAG,cAAc,EAC/B,OAAO,EAAG,gBAAgB,EAC1B,KAAK,EAAG,KAAM,EACd,YAAY,EAAG,IAAI,CAAC,aAAa,EACjC,UAAU,EAAG,IAAI,CAAC,aAAa,EAC/B,mBAAmB,EAAG,IAAI,CAAC,sBAAsB,GACjD;gBACF,oBAAC,sBAAa,IAAC,OAAO,EAAG,IAAI,CAAC,QAAQ,EAAG,IAAI,EAAC,OAAO,GAAG;gBACxD,iCAAO,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAQ,CAC9C,CACP,CAAC;QACJ,CAAC;QAqCH,8BAAC;IAAD,CAAC,AA/ED,CAA6C,KAAK,CAAC,SAAS,GA+E3D;IA/EY,0DAAuB","sourcesContent":["import * as React from 'react';\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport {\r\n  DatePicker,\r\n  DayOfWeek,\r\n  IDatePickerStrings\r\n} from 'office-ui-fabric-react/lib/DatePicker';\r\nimport './DatePicker.Examples.scss';\r\n\r\nconst DayPickerStrings: IDatePickerStrings = {\r\n  months: [\r\n    'January',\r\n    'February',\r\n    'March',\r\n    'April',\r\n    'May',\r\n    'June',\r\n    'July',\r\n    'August',\r\n    'September',\r\n    'October',\r\n    'November',\r\n    'December'\r\n  ],\r\n\r\n  shortMonths: [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec'\r\n  ],\r\n\r\n  days: [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday'\r\n  ],\r\n\r\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\r\n\r\n  goToToday: 'Go to today',\r\n  prevMonthAriaLabel: 'Go to previous month',\r\n  nextMonthAriaLabel: 'Go to next month',\r\n  prevYearAriaLabel: 'Go to previous year',\r\n  nextYearAriaLabel: 'Go to next year',\r\n\r\n  isRequiredErrorMessage: 'Start date is required.',\r\n\r\n  invalidInputErrorMessage: 'Invalid date format.'\r\n};\r\n\r\nexport interface IDatePickerFormatExampleState {\r\n  firstDayOfWeek?: DayOfWeek;\r\n  value?: Date | null;\r\n}\r\n\r\nexport class DatePickerFormatExample extends React.Component<\r\n  {},\r\n  IDatePickerFormatExampleState\r\n  > {\r\n  public constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      firstDayOfWeek: DayOfWeek.Sunday,\r\n      value: null\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const { firstDayOfWeek, value } = this.state;\r\n    const desc =\r\n      'This field is required. One of the support input formats is year dash month dash day.';\r\n    return (\r\n      <div className='docs-DatePickerExample'>\r\n        <p>\r\n          Applications can customize how dates are formatted and parsed.\r\n          Formatted dates can be ambiguous, so the control will avoid parsing\r\n          the formatted strings of dates selected using the UI when text input\r\n          is allowed. In this example, we are formatting and parsing dates as\r\n          dd/MM/yy.\r\n        </p>\r\n        <DatePicker\r\n          label='Start date'\r\n          isRequired={ false }\r\n          allowTextInput={ true }\r\n          ariaLabel={ desc }\r\n          firstDayOfWeek={ firstDayOfWeek }\r\n          strings={ DayPickerStrings }\r\n          value={ value! }\r\n          onSelectDate={ this._onSelectDate }\r\n          formatDate={ this._onFormatDate }\r\n          parseDateFromString={ this._onParseDateFromString }\r\n        />\r\n        <DefaultButton onClick={ this._onClick } text='Clear' />\r\n        <div>{ (this.state.value || '').toString() }</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onSelectDate = (date: Date | null | undefined): void => {\r\n    this.setState({ value: date });\r\n  }\r\n\r\n  private _onClick = (): void => {\r\n    this.setState({ value: null });\r\n  }\r\n\r\n  private _onFormatDate = (date: Date): string => {\r\n    return (\r\n      date.getDate() +\r\n      '/' +\r\n      (date.getMonth() + 1) +\r\n      '/' +\r\n      date.getFullYear() % 100\r\n    );\r\n  }\r\n\r\n  private _onParseDateFromString = (value: string): Date => {\r\n    const date = this.state.value || new Date();\r\n    const values = (value || '').trim().split('/');\r\n    const day =\r\n      values.length > 0\r\n        ? Math.max(1, Math.min(31, parseInt(values[0], 10)))\r\n        : date.getDate();\r\n    const month =\r\n      values.length > 1\r\n        ? Math.max(1, Math.min(12, parseInt(values[1], 10))) - 1\r\n        : date.getMonth();\r\n    let year = values.length > 2 ? parseInt(values[2], 10) : date.getFullYear();\r\n    if (year < 100) {\r\n      year += date.getFullYear() - date.getFullYear() % 100;\r\n    }\r\n    return new Date(year, month, day);\r\n  }\r\n}\r\n"]}