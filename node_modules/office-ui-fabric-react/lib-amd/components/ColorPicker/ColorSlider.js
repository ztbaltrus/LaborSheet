define(["require", "exports", "tslib", "react", "../../Utilities", "./ColorPicker.scss"], function (require, exports, tslib_1, React, Utilities_1, stylesImport) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var styles = stylesImport;
    var ColorSlider = /** @class */ (function (_super) {
        tslib_1.__extends(ColorSlider, _super);
        function ColorSlider(props) {
            var _this = _super.call(this, props) || this;
            _this._root = Utilities_1.createRef();
            _this._onMouseDown = function (ev) {
                _this._events.on(window, 'mousemove', _this._onMouseMove, true);
                _this._events.on(window, 'mouseup', _this._onMouseUp, true);
                _this._onMouseMove(ev);
            };
            _this._onMouseMove = function (ev) {
                if (!_this._root.current) {
                    return;
                }
                var _a = _this.props, onChanged = _a.onChanged, minValue = _a.minValue, maxValue = _a.maxValue;
                var rectSize = _this._root.current.getBoundingClientRect();
                var currentPercentage = (ev.clientX - rectSize.left) / rectSize.width;
                var newValue = Math.min(maxValue, Math.max(minValue, currentPercentage * maxValue));
                _this.setState({
                    isAdjusting: true,
                    currentValue: newValue
                });
                if (onChanged) {
                    onChanged(newValue);
                }
                ev.preventDefault();
                ev.stopPropagation();
            };
            _this._onMouseUp = function (ev) {
                _this._events.off();
                _this.setState({
                    isAdjusting: false,
                    origin: undefined
                });
            };
            var value = _this.props.value;
            _this.state = {
                isAdjusting: false,
                origin: undefined,
                currentValue: value
            };
            return _this;
        }
        ColorSlider.prototype.componentWillReceiveProps = function (newProps) {
            if (newProps && newProps.value) {
                this.setState({ currentValue: newProps.value });
            }
        };
        ColorSlider.prototype.render = function () {
            var _a = this.props, className = _a.className, minValue = _a.minValue, maxValue = _a.maxValue, overlayStyle = _a.overlayStyle;
            var _b = this.state, currentValue = _b.currentValue, isAdjusting = _b.isAdjusting;
            var currentPercentage = 100 * (currentValue - minValue) / (maxValue - minValue);
            return (React.createElement("div", { ref: this._root, className: Utilities_1.css('ms-ColorPicker-slider', styles.slider, className, isAdjusting && 'is-adjusting'), onMouseDown: this._onMouseDown },
                React.createElement("div", { className: Utilities_1.css('ms-ColorPicker-sliderOverlay', styles.sliderOverlay), style: overlayStyle }),
                React.createElement("div", { className: Utilities_1.css('ms-ColorPicker-thumb is-slider', styles.thumb, styles.thumbIsSlider), style: { left: currentPercentage + '%' } })));
        };
        ColorSlider.defaultProps = {
            minValue: 0,
            maxValue: 100,
            thumbColor: 'inherit',
            value: 0
        };
        return ColorSlider;
    }(Utilities_1.BaseComponent));
    exports.ColorSlider = ColorSlider;
});
//# sourceMappingURL=ColorSlider.js.map