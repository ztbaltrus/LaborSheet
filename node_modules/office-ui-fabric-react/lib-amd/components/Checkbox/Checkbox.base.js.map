{"version":3,"file":"Checkbox.base.js","sourceRoot":"../src/","sources":["components/Checkbox/Checkbox.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  getId,\r\n  createRef,\r\n  customizable\r\n} from '../../Utilities';\r\nimport { Icon } from '../../Icon';\r\nimport {\r\n  ICheckbox,\r\n  ICheckboxProps,\r\n} from './Checkbox.types';\r\nimport {\r\n  ICheckboxClassNames,\r\n  getClassNames\r\n} from './Checkbox.classNames';\r\nimport { getStyles } from './Checkbox.styles';\r\nimport { KeytipData } from '../../KeytipData';\r\n\r\nexport interface ICheckboxState {\r\n  /** Is true when Uncontrolled control is checked. */\r\n  isChecked?: boolean;\r\n}\r\n\r\n@customizable('Checkbox', ['theme'])\r\nexport class Checkbox extends BaseComponent<ICheckboxProps, ICheckboxState> implements ICheckbox {\r\n  public static defaultProps: ICheckboxProps = {\r\n    boxSide: 'start'\r\n  };\r\n\r\n  private _checkBox = createRef<HTMLElement>();\r\n  private _id: string;\r\n  private _classNames: ICheckboxClassNames;\r\n\r\n  /**\r\n   * Initialize a new instance of the TopHeaderV2\r\n   * @param props Props for the component\r\n   * @param context Context or initial state for the base component.\r\n   */\r\n  constructor(props: ICheckboxProps, context?: any) {\r\n    super(props, context);\r\n\r\n    this._warnMutuallyExclusive({\r\n      'checked': 'defaultChecked'\r\n    });\r\n\r\n    this._id = getId('checkbox-');\r\n    this.state = {\r\n      isChecked: !!(props.checked !== undefined ? props.checked : props.defaultChecked)\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ICheckboxProps): void {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        isChecked: !!newProps.checked // convert null to false\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the Checkbox based on passed props\r\n   */\r\n  public render(): JSX.Element {\r\n    const {\r\n      checked,\r\n      className,\r\n      defaultChecked,\r\n      disabled,\r\n      inputProps,\r\n      name,\r\n      boxSide,\r\n      theme,\r\n      ariaLabel,\r\n      ariaLabelledBy,\r\n      ariaDescribedBy,\r\n      styles: customStyles,\r\n      onRenderLabel = this._onRenderLabel,\r\n      checkmarkIconProps,\r\n      ariaPositionInSet,\r\n      ariaSetSize,\r\n      keytipProps\r\n    } = this.props;\r\n\r\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\r\n    const isReversed = boxSide !== 'start' ? true : false;\r\n\r\n    this._classNames = this.props.getClassNames ?\r\n      this.props.getClassNames(theme!, !!disabled, !!isChecked, !!isReversed, className)\r\n      : getClassNames(\r\n        getStyles(theme!, customStyles),\r\n        !!disabled,\r\n        !!isChecked,\r\n        !!isReversed,\r\n        className\r\n      );\r\n\r\n    return (\r\n      <KeytipData keytipProps={ keytipProps } disabled={ disabled }>\r\n        { (keytipAttributes: any): JSX.Element => (\r\n          <button\r\n            { ...inputProps }\r\n            data-ktp-execute-target={ keytipAttributes['data-ktp-execute-target'] }\r\n            { ...(checked !== undefined && { checked }) }\r\n            { ...(defaultChecked !== undefined && { defaultChecked }) }\r\n            disabled={ disabled }\r\n            ref={ this._checkBox }\r\n            name={ name }\r\n            id={ this._id }\r\n            role='checkbox'\r\n            type='button'\r\n            className={ this._classNames.root }\r\n            onClick={ this._onClick }\r\n            onFocus={ this._onFocus }\r\n            onBlur={ this._onBlur }\r\n            aria-checked={ isChecked }\r\n            aria-disabled={ disabled }\r\n            aria-label={ ariaLabel }\r\n            aria-labelledby={ ariaLabelledBy }\r\n            aria-describedby={ (ariaDescribedBy || '') + (keytipAttributes['aria-describedby'] || '') }\r\n            aria-posinset={ ariaPositionInSet }\r\n            aria-setsize={ ariaSetSize }\r\n          >\r\n            <label className={ this._classNames.label } htmlFor={ this._id } >\r\n              <div\r\n                className={ this._classNames.checkbox }\r\n                data-ktp-target={ keytipAttributes['data-ktp-target'] }\r\n              >\r\n                <Icon iconName='CheckMark' { ...checkmarkIconProps } className={ this._classNames.checkmark } />\r\n              </div>\r\n              { onRenderLabel(this.props, this._onRenderLabel) }\r\n            </label>\r\n          </button>\r\n        ) }\r\n      </KeytipData>\r\n    );\r\n  }\r\n\r\n  public get checked(): boolean {\r\n    return this.state.isChecked!;\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._checkBox.current) {\r\n      this._checkBox.current.focus();\r\n    }\r\n  }\r\n\r\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onFocus) {\r\n      inputProps.onFocus(ev);\r\n    }\r\n  }\r\n\r\n  private _onBlur = (ev: React.FocusEvent<HTMLElement>): void => {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onBlur) {\r\n      inputProps.onBlur(ev);\r\n    }\r\n  }\r\n\r\n  private _onClick = (ev: React.FormEvent<HTMLElement>): void => {\r\n    const { disabled, onChange } = this.props;\r\n    const { isChecked } = this.state;\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n\r\n    if (!disabled) {\r\n      if (onChange) {\r\n        onChange(ev, !isChecked);\r\n      }\r\n\r\n      if (this.props.checked === undefined) {\r\n        this.setState({ isChecked: !isChecked });\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onRenderLabel = (props: ICheckboxProps): JSX.Element | null => {\r\n    const { label } = props;\r\n\r\n    return label ? (\r\n      <span className={ this._classNames.text }>{ label }</span>\r\n    ) : (\r\n        null\r\n      );\r\n  }\r\n}\r\n"]}