{"version":3,"file":"Modal.js","sourceRoot":"../src/","sources":["components/Modal/Modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  getId,\r\n  createRef\r\n} from '../../Utilities';\r\nimport { FocusTrapZone, IFocusTrapZone } from '../FocusTrapZone/index';\r\nimport { IModalProps, IModal } from './Modal.types';\r\nimport { Overlay } from '../../Overlay';\r\nimport { Layer } from '../../Layer';\r\nimport { Popup } from '../Popup/index';\r\nimport { withResponsiveMode, ResponsiveMode } from '../../utilities/decorators/withResponsiveMode';\r\nimport * as stylesImport from './Modal.scss';\r\nconst styles: any = stylesImport;\r\n\r\n// @TODO - need to change this to a panel whenever the breakpoint is under medium (verify the spec)\r\n\r\nexport interface IDialogState {\r\n  isOpen?: boolean;\r\n  isVisible?: boolean;\r\n  isVisibleClose?: boolean;\r\n  id?: string;\r\n}\r\n\r\n@withResponsiveMode\r\nexport class Modal extends BaseComponent<IModalProps, IDialogState> implements IModal {\r\n\r\n  public static defaultProps: IModalProps = {\r\n    isOpen: false,\r\n    isDarkOverlay: true,\r\n    isBlocking: false,\r\n    className: '',\r\n    containerClassName: '',\r\n  };\r\n\r\n  private _onModalCloseTimer: number;\r\n  private _focusTrapZone = createRef<IFocusTrapZone>();\r\n\r\n  constructor(props: IModalProps) {\r\n    super(props);\r\n    this.state = {\r\n      id: getId('Modal'),\r\n      isOpen: props.isOpen,\r\n      isVisible: props.isOpen,\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IModalProps): void {\r\n    clearTimeout(this._onModalCloseTimer);\r\n\r\n    // Opening the dialog\r\n    if (newProps.isOpen) {\r\n      if (!this.state.isOpen) {\r\n        // First Open\r\n        this.setState({\r\n          isOpen: true\r\n        });\r\n      } else {\r\n        // Reopen during closing\r\n        this.setState({\r\n          isVisible: true\r\n        });\r\n      }\r\n    }\r\n\r\n    // Closing the dialog\r\n    if (!newProps.isOpen && this.state.isOpen) {\r\n      this._onModalCloseTimer = this._async.setTimeout(this._onModalClose, parseFloat(styles.duration) * 1000);\r\n      this.setState({\r\n        isVisible: false\r\n      });\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IModalProps, prevState: IDialogState) {\r\n    if (!prevProps.isOpen && !prevState.isVisible) {\r\n      this.setState({\r\n        isVisible: true\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element | null {\r\n    const {\r\n      elementToFocusOnDismiss,\r\n      firstFocusableSelector,\r\n      forceFocusInsideTrap,\r\n      ignoreExternalFocusing,\r\n      isBlocking,\r\n      isClickableOutsideFocusTrap,\r\n      isDarkOverlay,\r\n      onDismiss,\r\n      onLayerDidMount,\r\n      responsiveMode,\r\n      titleAriaId,\r\n      subtitleAriaId,\r\n    } = this.props;\r\n    const { isOpen, isVisible } = this.state;\r\n\r\n    const modalClassName = css(\r\n      'ms-Modal',\r\n      styles.root,\r\n      this.props.className,\r\n      !!isOpen && 'is-open',\r\n      !!isVisible && styles.rootIsVisible\r\n    );\r\n\r\n    if (!isOpen) {\r\n      return null;\r\n    }\r\n\r\n    // @temp tuatology - Will adjust this to be a panel at certain breakpoints\r\n    if (responsiveMode! >= ResponsiveMode.small) {\r\n      return (\r\n        <Layer onLayerDidMount={ onLayerDidMount }>\r\n          <Popup\r\n            role={ isBlocking ? 'alertdialog' : 'dialog' }\r\n            ariaLabelledBy={ titleAriaId }\r\n            ariaDescribedBy={ subtitleAriaId }\r\n            onDismiss={ onDismiss }\r\n          >\r\n            <div className={ modalClassName }>\r\n              <Overlay isDarkThemed={ isDarkOverlay } onClick={ isBlocking ? undefined : (onDismiss as any) } />\r\n              <FocusTrapZone\r\n                componentRef={ this._focusTrapZone }\r\n                className={ css('ms-Dialog-main', styles.main, this.props.containerClassName) }\r\n                elementToFocusOnDismiss={ elementToFocusOnDismiss }\r\n                isClickableOutsideFocusTrap={ isClickableOutsideFocusTrap ? isClickableOutsideFocusTrap : !isBlocking }\r\n                ignoreExternalFocusing={ ignoreExternalFocusing }\r\n                forceFocusInsideTrap={ forceFocusInsideTrap }\r\n                firstFocusableSelector={ firstFocusableSelector }\r\n              >\r\n                { this.props.children }\r\n              </FocusTrapZone>\r\n            </div>\r\n          </Popup>\r\n        </Layer>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public focus() {\r\n    if (this._focusTrapZone.current) {\r\n      this._focusTrapZone.current.focus();\r\n    }\r\n  }\r\n\r\n  // Watch for completed animations and set the state\r\n  private _onModalClose(): void {\r\n    this.setState({\r\n      isOpen: false\r\n    });\r\n\r\n    // Call the onDismiss callback\r\n    if (this.props.onDismissed) {\r\n      this.props.onDismissed();\r\n    }\r\n  }\r\n}\r\n"]}