{"version":3,"file":"Image.base.js","sourceRoot":"../src/","sources":["components/Image/Image.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  classNamesFunction,\r\n  customizable,\r\n  getNativeProps,\r\n  imageProperties,\r\n  createRef\r\n} from '../../Utilities';\r\nimport {\r\n  IImageProps,\r\n  IImageStyles,\r\n  IImageStyleProps,\r\n  ImageCoverStyle,\r\n  ImageFit,\r\n  ImageLoadState\r\n} from './Image.types';\r\n\r\nconst getClassNames = classNamesFunction<IImageStyleProps, IImageStyles>();\r\n\r\nexport interface IImageState {\r\n  loadState?: ImageLoadState;\r\n}\r\n\r\nconst KEY_PREFIX = 'fabricImage';\r\n\r\n@customizable('Image', ['theme'])\r\nexport class ImageBase extends BaseComponent<IImageProps, IImageState> {\r\n  public static defaultProps = {\r\n    shouldFadeIn: true\r\n  };\r\n\r\n  private static _svgRegex = /\\.svg$/i;\r\n\r\n  // Make an initial assumption about the image layout until we can\r\n  // check the rendered element. The value here only takes effect when\r\n  // shouldStartVisible is true.\r\n  private _coverStyle: ImageCoverStyle = ImageCoverStyle.portrait;\r\n  private _imageElement = createRef<HTMLImageElement>();\r\n  private _frameElement = createRef<HTMLDivElement>();\r\n\r\n  constructor(props: IImageProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loadState: ImageLoadState.notLoaded\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IImageProps): void {\r\n    if (nextProps.src !== this.props.src) {\r\n      this.setState({\r\n        loadState: ImageLoadState.notLoaded\r\n      });\r\n    } else if (this.state.loadState === ImageLoadState.loaded) {\r\n      this._computeCoverStyle(nextProps);\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(prevProps: IImageProps, prevState: IImageState) {\r\n    this._checkImageLoaded();\r\n    if (this.props.onLoadingStateChange\r\n      && prevState.loadState !== this.state.loadState) {\r\n      this.props.onLoadingStateChange(this.state.loadState!);\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const imageProps = getNativeProps(this.props, imageProperties, ['width', 'height']);\r\n    const {\r\n      src,\r\n      alt,\r\n      width,\r\n      height,\r\n      shouldFadeIn,\r\n      shouldStartVisible,\r\n      className,\r\n      imageFit,\r\n      role,\r\n      maximizeFrame,\r\n      getStyles,\r\n      theme\r\n    } = this.props;\r\n    const { loadState } = this.state;\r\n    const coverStyle = this.props.coverStyle !== undefined ? this.props.coverStyle : this._coverStyle;\r\n    const classNames = getClassNames(getStyles!,\r\n      {\r\n        theme: theme!,\r\n        className,\r\n        width,\r\n        height,\r\n        maximizeFrame,\r\n        shouldFadeIn,\r\n        shouldStartVisible,\r\n        isLoaded: loadState === ImageLoadState.loaded || (loadState === ImageLoadState.notLoaded && this.props.shouldStartVisible),\r\n        isLandscape: coverStyle === ImageCoverStyle.landscape,\r\n        isCenter: imageFit === ImageFit.center,\r\n        isContain: imageFit === ImageFit.contain,\r\n        isCover: imageFit === ImageFit.cover,\r\n        isNone: imageFit === ImageFit.none,\r\n        isError: loadState === ImageLoadState.error,\r\n        isNotImageFit: imageFit === undefined\r\n      }\r\n    );\r\n\r\n    // If image dimensions aren't specified, the natural size of the image is used.\r\n    return (\r\n      <div\r\n        className={ classNames.root }\r\n        style={ { width: width, height: height } }\r\n        ref={ this._frameElement }\r\n      >\r\n        <img\r\n          { ...imageProps }\r\n          onLoad={ this._onImageLoaded }\r\n          onError={ this._onImageError }\r\n          key={ KEY_PREFIX + this.props.src || '' }\r\n          className={ classNames.image }\r\n          ref={ this._imageElement }\r\n          src={ src }\r\n          alt={ alt }\r\n          role={ role }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onImageLoaded = (ev: React.SyntheticEvent<HTMLImageElement>): void => {\r\n    const { src, onLoad } = this.props;\r\n    if (onLoad) {\r\n      onLoad(ev);\r\n    }\r\n\r\n    this._computeCoverStyle(this.props);\r\n\r\n    if (src) {\r\n      this.setState({\r\n        loadState: ImageLoadState.loaded\r\n      });\r\n    }\r\n  }\r\n\r\n  private _checkImageLoaded(): void {\r\n    const { src } = this.props;\r\n    const { loadState } = this.state;\r\n\r\n    if (loadState === ImageLoadState.notLoaded) {\r\n      // testing if naturalWidth and naturalHeight are greater than zero is better than checking\r\n      // .complete, because .complete will also be set to true if the image breaks. However,\r\n      // for some browsers, SVG images do not have a naturalWidth or naturalHeight, so fall back\r\n      // to checking .complete for these images.\r\n      const isLoaded: boolean = this._imageElement.current ? src && (this._imageElement.current.naturalWidth > 0 && this._imageElement.current.naturalHeight > 0) ||\r\n        (this._imageElement.current.complete && ImageBase._svgRegex.test(src!)) : false;\r\n\r\n      if (isLoaded) {\r\n        this._computeCoverStyle(this.props);\r\n        this.setState({\r\n          loadState: ImageLoadState.loaded\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private _computeCoverStyle(props: IImageProps): void {\r\n    const { imageFit, width, height } = props;\r\n\r\n    // Do not compute cover style if it was already specified in props\r\n    if ((imageFit === ImageFit.cover || imageFit === ImageFit.contain) &&\r\n      this.props.coverStyle === undefined &&\r\n      this._imageElement.current &&\r\n      this._frameElement.current) {\r\n      // Determine the desired ratio using the width and height props.\r\n      // If those props aren't available, measure measure the frame.\r\n      let desiredRatio;\r\n      if (!!width && !!height) {\r\n        desiredRatio = (width as number) / (height as number);\r\n      } else {\r\n        desiredRatio = this._frameElement.current.clientWidth / this._frameElement.current.clientHeight;\r\n      }\r\n\r\n      // Examine the source image to determine its original ratio.\r\n      const naturalRatio = this._imageElement.current.naturalWidth / this._imageElement.current.naturalHeight;\r\n\r\n      // Should we crop from the top or the sides?\r\n      if (naturalRatio > desiredRatio) {\r\n        this._coverStyle = ImageCoverStyle.landscape;\r\n      } else {\r\n        this._coverStyle = ImageCoverStyle.portrait;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onImageError = (ev: React.SyntheticEvent<HTMLImageElement>): void => {\r\n    if (this.props.onError) {\r\n      this.props.onError(ev);\r\n    }\r\n    this.setState({\r\n      loadState: ImageLoadState.error\r\n    });\r\n  }\r\n}\r\n"]}