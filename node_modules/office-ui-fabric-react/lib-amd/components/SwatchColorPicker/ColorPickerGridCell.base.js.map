{"version":3,"file":"ColorPickerGridCell.base.js","sourceRoot":"../src/","sources":["components/SwatchColorPicker/ColorPickerGridCell.base.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { customizable } from '../../Utilities';\r\nimport {\r\n  IColorCellProps,\r\n  IColorPickerGridCellProps,\r\n  IColorPickerGridCellStyleProps,\r\n  IColorPickerGridCellStyles\r\n} from './ColorPickerGridCell.types';\r\nimport { getColorFromString } from '../../utilities/color/colors';\r\nimport { GridCell } from '../../utilities/grid/GridCell';\r\nimport { IGridCellProps } from '../../utilities/grid/GridCell.types';\r\nimport { IButtonClassNames } from '../Button/BaseButton.classNames';\r\nimport { getStyles as getActionButtonStyles } from '../Button/ActionButton/ActionButton.styles';\r\nimport { mergeStyleSets, ITheme } from '../../Styling';\r\nimport { classNamesFunction } from '../../Utilities';\r\n\r\nconst getClassNames = classNamesFunction<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>();\r\n\r\nclass ColorCell extends GridCell<IColorCellProps, IGridCellProps<IColorCellProps>> {\r\n}\r\n\r\n@customizable('ColorPickerGridCell', ['theme'])\r\nexport class ColorPickerGridCellBase extends React.Component<IColorPickerGridCellProps, {}> {\r\n\r\n  public static defaultProps = {\r\n    circle: true,\r\n    disabled: false,\r\n    selected: false,\r\n  } as IColorPickerGridCellProps;\r\n\r\n  private _classNames: {[key in keyof IColorPickerGridCellStyles]: string };\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      item,\r\n      id,\r\n      selected,\r\n      disabled,\r\n      getStyles,\r\n      theme,\r\n      circle,\r\n      color,\r\n      onClick,\r\n      onHover,\r\n      onFocus,\r\n      onMouseEnter,\r\n      onMouseMove,\r\n      onMouseLeave,\r\n      onWheel,\r\n      onKeyDown\r\n    } = this.props;\r\n\r\n    this._classNames = getClassNames(\r\n      getStyles!,\r\n      {\r\n        theme: theme!,\r\n        disabled,\r\n        selected,\r\n        circle,\r\n        isWhite: this._isWhiteCell(color)\r\n      }\r\n    );\r\n\r\n    return (\r\n      <ColorCell\r\n        item={ item }\r\n        id={ `${id}-${item.id}-${item.index}` }\r\n        key={ item.id }\r\n        disabled={ disabled }\r\n        role={ 'gridcell' }\r\n        onRenderItem={ this._onRenderColorOption }\r\n        selected={ selected }\r\n        onClick={ onClick }\r\n        onHover={ onHover }\r\n        onFocus={ onFocus }\r\n        label={ item.label }\r\n        className={ this._classNames.colorCell }\r\n        getClassNames={ this._getClassNames }\r\n        index={ item.index }\r\n        onMouseEnter={ onMouseEnter }\r\n        onMouseMove={ onMouseMove }\r\n        onMouseLeave={ onMouseLeave }\r\n        onWheel={ onWheel }\r\n        onKeyDown={ onKeyDown }\r\n      />\r\n    );\r\n  }\r\n\r\n  /**\r\n * Render the core of a color cell\r\n * @returns {JSX.Element} - Element representing the core of the item\r\n */\r\n  private _onRenderColorOption = (colorOption: IColorCellProps): JSX.Element => {\r\n    // Build an SVG for the cell with the given shape and color properties\r\n    return (\r\n      <svg className={ this._classNames.svg } viewBox='0 0 20 20' fill={ getColorFromString(colorOption.color as string)!.str } >\r\n        {\r\n          this.props.circle ?\r\n            <circle cx='50%' cy='50%' r='50%' /> :\r\n            <rect width='100%' height='100%' />\r\n        }\r\n      </svg>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Validate if the cell's color is white or not to apply whiteCell style\r\n   * @param inputColor - The color of the current cell\r\n   * @returns - Whether the cell's color is white or not.\r\n   */\r\n  private _isWhiteCell(inputColor: string | undefined): boolean {\r\n    return inputColor!.toLocaleLowerCase() === '#ffffff';\r\n  }\r\n\r\n  /**\r\n   * Method to override the getClassNames func in a button.\r\n   */\r\n  private _getClassNames = (\r\n    theme: ITheme,\r\n    className: string,\r\n    variantClassName: string,\r\n    iconClassName: string | undefined,\r\n    menuIconClassName: string | undefined,\r\n    disabled: boolean,\r\n    checked: boolean,\r\n    expanded: boolean,\r\n    isSplit: boolean | undefined): IButtonClassNames => {\r\n    const styles = getActionButtonStyles(theme);\r\n    return mergeStyleSets(this._classNames as {}, {\r\n      root: [\r\n        'ms-Button',\r\n        styles.root,\r\n        variantClassName,\r\n        className,\r\n        checked && [\r\n          'is-checked',\r\n          styles.rootChecked\r\n        ],\r\n        disabled && [\r\n          'is-disabled',\r\n          styles.rootDisabled\r\n        ],\r\n        !disabled && !checked && {\r\n          selectors: {\r\n            ':hover': styles.rootHovered,\r\n            ':focus': styles.rootFocused,\r\n            ':active': styles.rootPressed,\r\n          }\r\n        },\r\n        disabled && checked && [\r\n          styles.rootCheckedDisabled\r\n        ],\r\n        !disabled && checked && {\r\n          selectors: {\r\n            ':hover': styles.rootCheckedHovered,\r\n            ':active': styles.rootCheckedPressed\r\n          }\r\n        }\r\n      ],\r\n      flexContainer: [\r\n        'ms-Button-flexContainer',\r\n        styles.flexContainer\r\n      ]\r\n    });\r\n  }\r\n\r\n}"]}