{"version":3,"file":"CalendarPage.js","sourceRoot":"../src/","sources":["components/Calendar/CalendarPage.tsx"],"names":[],"mappings":";;;IAeA,IAAM,yBAAyB,GAAG,OAAO,CAAC,iGAAiG,CAAW,CAAC;IACvJ,IAAM,yBAAyB,GAAG,OAAO,CAAC,iGAAiG,CAAW,CAAC;IAEvJ;QAAkC,wCAA6C;QAA/E;;QAgMA,CAAC;QA/LQ,6BAAM,GAAb;YACE,IAAM,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;YACnC,OAAO,CACL,oBAAC,gCAAa,IACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EAAC,yHAAyH,EACtI,YAAY,EACV;oBACE,oBAAC,8BAAW,IAAC,KAAK,EAAC,iBAAiB,EAAC,IAAI,EAAG,yBAAyB;wBACnE,oBAAC,+CAAqB,IACpB,oBAAoB,EAAG,KAAK,EAC5B,aAAa,EAAG,wBAAa,CAAC,GAAG,EACjC,uBAAuB,EAAG,KAAK,EAC/B,aAAa,EAAG,IAAI,GACpB,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,oEAAoE,EAC1E,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,wBAAwB,EAAG,IAAI,EAC/B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,aAAa,EAAG,wBAAa,CAAC,GAAG,EACjC,uBAAuB,EAAG,KAAK,EAC/B,aAAa,EAAG,KAAK,GACrB,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,mCAAmC,EACzC,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,aAAa,EAAG,wBAAa,CAAC,GAAG,EACjC,uBAAuB,EAAG,KAAK,EAC/B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,aAAa,EAAG,IAAI,GACpB,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,qCAAqC,EAC3C,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,aAAa,EAAG,wBAAa,CAAC,IAAI,EAClC,uBAAuB,EAAG,IAAI,EAC9B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,aAAa,EAAG,IAAI,EACpB,mBAAmB,EAAG,IAAI,GAC1B,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,sCAAsC,EAC5C,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,aAAa,EAAG,wBAAa,CAAC,KAAK,EACnC,uBAAuB,EAAG,IAAI,EAC9B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,aAAa,EAAG,IAAI,EACpB,mBAAmB,EAAG,IAAI,GAC1B,CACU;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,mCAAmC,EAAC,IAAI,EAAG,yBAAyB;wBACrF,oBAAC,+CAAqB,IACpB,oBAAoB,EAAG,KAAK,EAC5B,aAAa,EAAG,wBAAa,CAAC,GAAG,EACjC,uBAAuB,EAAG,KAAK,EAC/B,aAAa,EAAG,IAAI,EACpB,eAAe,EAAG,IAAI,GACtB,CACU;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,iDAAiD,EAAC,IAAI,EAAG,yBAAyB;wBACnG,oBAAC,+CAAqB,IACpB,oBAAoB,EAAG,KAAK,EAC5B,aAAa,EAAG,wBAAa,CAAC,GAAG,EACjC,uBAAuB,EAAG,KAAK,EAC/B,aAAa,EAAG,IAAI,EACpB,qBAAqB,EAAG,IAAI,GAC5B,CACU;oBACd,oBAAC,8BAAW,IAAC,KAAK,EAAC,qDAAqD,EAAC,IAAI,EAAG,yBAAyB;wBACvG,oBAAC,+CAAqB,IACpB,aAAa,EAAG,wBAAa,CAAC,KAAK,EACnC,uBAAuB,EAAG,KAAK,EAC/B,aAAa,EAAG,IAAI,EACpB,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,kBAAkB,EAAG,KAAK,GAC1B,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,uDAAuD,EAC7D,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,aAAa,EAAG,wBAAa,CAAC,GAAG,EACjC,uBAAuB,EAAG,IAAI,EAC9B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,aAAa,EAAG,KAAK,EACrB,OAAO,EAAG,oBAAS,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAC9B,OAAO,EAAG,mBAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,GAC5B,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,4GAA4G,EAClH,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,aAAa,EAAG,wBAAa,CAAC,QAAQ,EACtC,cAAc,EAAG,oBAAS,CAAC,MAAM,EACjC,uBAAuB,EAAG,IAAI,EAC9B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,aAAa,EAAG,IAAI,EACpB,YAAY,EAAG,CAAC,oBAAS,CAAC,OAAO,EAAE,oBAAS,CAAC,QAAQ,EAAE,oBAAS,CAAC,SAAS,EAAE,oBAAS,CAAC,MAAM,CAAC,GAC7F,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,iCAAiC,EACvC,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,qBAAqB,EAAG,IAAI,GAC5B,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,qCAAqC,EAC3C,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,kBAAkB,EAAG,KAAK,EAC1B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,YAAY,EAAG,wBAAwB,GACvC,CACU;oBACd,oBAAC,8BAAW,IACV,KAAK,EAAC,6DAA6D,EACnE,IAAI,EAAG,yBAAyB;wBAEhC,oBAAC,+CAAqB,IACpB,wBAAwB,EAAG,IAAI,EAC/B,qBAAqB,EAAG,KAAK,EAC7B,sBAAsB,EAAG,IAAI,EAC7B,YAAY,EAAG,iDAAiD,GAChE,CACU,CACV,EAER,gBAAgB,EACd,oBAAC,qCAAkB,IACjB,OAAO,EAAG;wBACR,OAAO,CAAS,8EAA8E,CAAC;qBAChG,GACD,EAEJ,QAAQ,EACN,oBAAC,+BAAY,QACT,OAAO,CAAS,qFAAqF,CAAC,CAC3F,EAEjB,aAAa,EACX,gCAAO,EAET,GAAG,EACD,oBAAC,+BAAY,QACT,OAAO,CAAS,gFAAgF,CAAC,CACtF,EAEjB,KAAK,EACH,oBAAC,+BAAY,QACT,OAAO,CAAS,kFAAkF,CAAC,CACxF,EAEjB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAe,EAC5C,eAAe,EACb,oBAAC,iCAAe,uBACT,mCAAc,EACnB,GAEJ,CACH,CAAC;QACJ,CAAC;QAEH,mBAAC;IAAD,CAAC,AAhMD,CAAkC,KAAK,CAAC,SAAS,GAgMhD;IAhMY,oCAAY","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ComponentPage,\r\n  ExampleCard,\r\n  IComponentDemoPageProps,\r\n  PropertiesTableSet,\r\n  PageMarkdown,\r\n} from '@uifabric/example-app-base';\r\nimport { DateRangeType, DayOfWeek } from 'office-ui-fabric-react/lib/Calendar';\r\nimport { CalendarButtonExample } from './examples/Calendar.Button.Example';\r\nimport { CalendarInlineExample } from './examples/Calendar.Inline.Example';\r\nimport { ComponentStatus } from '../../demo/ComponentStatus/ComponentStatus';\r\nimport { CalendarStatus } from './Calendar.checklist';\r\nimport { addMonths, addYears } from '../../utilities/dateMath/DateMath';\r\n\r\nconst CalendarButtonExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Button.Example.tsx') as string;\r\nconst CalendarInlineExampleCode = require('!raw-loader!office-ui-fabric-react/src/components/Calendar/examples/Calendar.Inline.Example.tsx') as string;\r\n\r\nexport class CalendarPage extends React.Component<IComponentDemoPageProps, any> {\r\n  public render(): JSX.Element {\r\n    const today = new Date(Date.now());\r\n    return (\r\n      <ComponentPage\r\n        title='Calendar'\r\n        componentName='CalendarExample'\r\n        componentUrl='https://github.com/OfficeDev/office-ui-fabric-react/tree/master/packages/office-ui-fabric-react/src/components/Calendar'\r\n        exampleCards={\r\n          <div>\r\n            <ExampleCard title='Inline Calendar' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample\r\n                isMonthPickerVisible={ false }\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with overlayed month picker when header is clicked'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                showMonthPickerAsOverlay={ true }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ false }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with month picker'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                showGoToToday={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with week selection'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Week }\r\n                autoNavigateOnSelection={ true }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                showGoToToday={ true }\r\n                showNavigateButtons={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with month selection'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Month }\r\n                autoNavigateOnSelection={ true }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                showGoToToday={ true }\r\n                showNavigateButtons={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard title='Inline Calendar with week numbers' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample\r\n                isMonthPickerVisible={ false }\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ true }\r\n                showWeekNumbers={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard title='Inline Calendar with 6 weeks display by default' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample\r\n                isMonthPickerVisible={ false }\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ true }\r\n                showSixWeeksByDefault={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard title='Inline Calendar with month picker and no day picker' code={ CalendarInlineExampleCode }>\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Month }\r\n                autoNavigateOnSelection={ false }\r\n                showGoToToday={ true }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                isDayPickerVisible={ false }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Inline Calendar with date boundary (minDate, maxDate)'\r\n              code={ CalendarInlineExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.Day }\r\n                autoNavigateOnSelection={ true }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                showGoToToday={ false }\r\n                minDate={ addMonths(today, -1) }\r\n                maxDate={ addYears(today, 1) }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Calendar with selectableDays = [Tuesday, Wednesday, Friday, Saturday] provided, first day of week = Monday'\r\n              code={ CalendarButtonExampleCode }\r\n            >\r\n              <CalendarInlineExample\r\n                dateRangeType={ DateRangeType.WorkWeek }\r\n                firstDayOfWeek={ DayOfWeek.Monday }\r\n                autoNavigateOnSelection={ true }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                showGoToToday={ true }\r\n                workWeekDays={ [DayOfWeek.Tuesday, DayOfWeek.Saturday, DayOfWeek.Wednesday, DayOfWeek.Friday] }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Calendar launched from a button'\r\n              code={ CalendarButtonExampleCode }\r\n            >\r\n              <CalendarButtonExample\r\n                highlightCurrentMonth={ true }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Month picker launched from a button'\r\n              code={ CalendarButtonExampleCode }\r\n            >\r\n              <CalendarButtonExample\r\n                isDayPickerVisible={ false }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                buttonString={ 'Click for Month Picker' }\r\n              />\r\n            </ExampleCard>\r\n            <ExampleCard\r\n              title='Calendar with overlayed month picker launched from a button'\r\n              code={ CalendarButtonExampleCode }\r\n            >\r\n              <CalendarButtonExample\r\n                showMonthPickerAsOverlay={ true }\r\n                highlightCurrentMonth={ false }\r\n                highlightSelectedMonth={ true }\r\n                buttonString={ 'Click for Overlayed Day Picker and Month Picker' }\r\n              />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet\r\n            sources={ [\r\n              require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/Calendar.types.ts')\r\n            ] }\r\n          />\r\n        }\r\n        overview={\r\n          <PageMarkdown>\r\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarOverview.md') }\r\n          </PageMarkdown>\r\n        }\r\n        bestPractices={\r\n          <div />\r\n        }\r\n        dos={\r\n          <PageMarkdown>\r\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarDos.md') }\r\n          </PageMarkdown>\r\n        }\r\n        donts={\r\n          <PageMarkdown>\r\n            { require<string>('!raw-loader!office-ui-fabric-react/src/components/Calendar/docs/CalendarDonts.md') }\r\n          </PageMarkdown>\r\n        }\r\n        isHeaderVisible={ this.props.isHeaderVisible }\r\n        componentStatus={\r\n          <ComponentStatus\r\n            { ...CalendarStatus }\r\n          />\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n}\r\n"]}