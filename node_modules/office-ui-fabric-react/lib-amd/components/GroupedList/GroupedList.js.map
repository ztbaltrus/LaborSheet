{"version":3,"file":"GroupedList.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupedList.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  IRectangle,\r\n  assign,\r\n  css,\r\n  createRef\r\n} from '../../Utilities';\r\nimport {\r\n  IGroupedList,\r\n  IGroupedListProps,\r\n  IGroup\r\n} from './GroupedList.types';\r\nimport {\r\n  GroupedListSection\r\n} from './GroupedListSection';\r\nimport {\r\n  List,\r\n  ScrollToMode\r\n} from '../../List';\r\nimport {\r\n  SelectionMode\r\n} from '../../utilities/selection/index';\r\nimport * as stylesImport from './GroupedList.scss';\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IGroupedListState {\r\n  lastWidth?: number;\r\n  lastSelectionMode?: SelectionMode;\r\n  groups?: IGroup[];\r\n}\r\n\r\nexport class GroupedList extends BaseComponent<IGroupedListProps, IGroupedListState> implements IGroupedList {\r\n  public static defaultProps = {\r\n    selectionMode: SelectionMode.multiple,\r\n    isHeaderVisible: true,\r\n    groupProps: {}\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n  };\r\n\r\n  private _list = createRef<List>();\r\n\r\n  private _isSomeGroupExpanded: boolean;\r\n\r\n  constructor(props: IGroupedListProps) {\r\n    super(props);\r\n\r\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\r\n\r\n    this.state = {\r\n      lastWidth: 0,\r\n      groups: props.groups\r\n    };\r\n  }\r\n\r\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\r\n    if (this._list.current) {\r\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\r\n    }\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IGroupedListProps): void {\r\n    const {\r\n      groups,\r\n      selectionMode\r\n    } = this.props;\r\n    let shouldForceUpdates = false;\r\n\r\n    if (newProps.groups !== groups) {\r\n      this.setState({ groups: newProps.groups });\r\n      shouldForceUpdates = true;\r\n    }\r\n\r\n    if (newProps.selectionMode !== selectionMode) {\r\n      shouldForceUpdates = true;\r\n    }\r\n\r\n    if (shouldForceUpdates) {\r\n      this._forceListUpdates();\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      className,\r\n      usePageCache,\r\n      onShouldVirtualize\r\n    } = this.props;\r\n    const {\r\n      groups\r\n    } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className={ css('ms-GroupedList', styles.root, className) }\r\n        data-automationid='GroupedList'\r\n        data-is-scrollable='false'\r\n        role='presentation'\r\n      >\r\n        { !groups ?\r\n          this._renderGroup(null, 0) : (\r\n            <List\r\n              ref={ this._list }\r\n              items={ groups }\r\n              onRenderCell={ this._renderGroup }\r\n              getItemCountForPage={ this._returnOne }\r\n              getPageSpecification={ this._getPageSpecification }\r\n              usePageCache={ usePageCache }\r\n              onShouldVirtualize={ onShouldVirtualize }\r\n            />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public forceUpdate() {\r\n    super.forceUpdate();\r\n    this._forceListUpdates();\r\n  }\r\n\r\n  public toggleCollapseAll(allCollapsed: boolean): void {\r\n    const { groups } = this.state;\r\n    const { groupProps } = this.props;\r\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\r\n\r\n    if (groups) {\r\n      if (onToggleCollapseAll) {\r\n        onToggleCollapseAll(allCollapsed);\r\n      }\r\n\r\n      for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\r\n        groups[groupIndex].isCollapsed = allCollapsed;\r\n      }\r\n\r\n      this._updateIsSomeGroupExpanded();\r\n\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  private _renderGroup = (group: any, groupIndex: number): JSX.Element | null => {\r\n    const {\r\n      dragDropEvents,\r\n      dragDropHelper,\r\n      eventsToRegister,\r\n      groupProps,\r\n      items,\r\n      listProps,\r\n      onRenderCell,\r\n      selectionMode,\r\n      selection,\r\n      viewport,\r\n      onShouldVirtualize\r\n    } = this.props;\r\n\r\n    // override group header/footer props as needed\r\n    const dividerProps = {\r\n      onToggleSelectGroup: this._onToggleSelectGroup,\r\n      onToggleCollapse: this._onToggleCollapse,\r\n      onToggleSummarize: this._onToggleSummarize\r\n    };\r\n\r\n    const headerProps = assign({}, groupProps!.headerProps, dividerProps);\r\n    const showAllProps = assign({}, groupProps!.showAllProps, dividerProps);\r\n    const footerProps = assign({}, groupProps!.footerProps, dividerProps);\r\n    const groupNestingDepth = this._getGroupNestingDepth();\r\n\r\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <GroupedListSection\r\n        ref={ 'group_' + groupIndex }\r\n        key={ this._getGroupKey(group, groupIndex) }\r\n        dragDropEvents={ dragDropEvents }\r\n        dragDropHelper={ dragDropHelper }\r\n        eventsToRegister={ eventsToRegister }\r\n        footerProps={ footerProps }\r\n        getGroupItemLimit={ groupProps && groupProps.getGroupItemLimit }\r\n        group={ group }\r\n        groupIndex={ groupIndex }\r\n        groupNestingDepth={ groupNestingDepth }\r\n        headerProps={ headerProps }\r\n        listProps={ listProps }\r\n        items={ items }\r\n        onRenderCell={ onRenderCell }\r\n        onRenderGroupHeader={ groupProps!.onRenderHeader }\r\n        onRenderGroupShowAll={ groupProps!.onRenderShowAll }\r\n        onRenderGroupFooter={ groupProps!.onRenderFooter }\r\n        selectionMode={ selectionMode }\r\n        selection={ selection }\r\n        showAllProps={ showAllProps }\r\n        viewport={ viewport }\r\n        onShouldVirtualize={ onShouldVirtualize }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _returnOne(): number {\r\n    return 1;\r\n  }\r\n\r\n  private _getGroupKey(group: IGroup, index: number): string {\r\n    return 'group-' + ((group && group.key) ? group.key : String(index));\r\n  }\r\n\r\n  private _getGroupNestingDepth(): number {\r\n    const { groups } = this.state;\r\n    let level = 0;\r\n    let groupsInLevel = groups;\r\n\r\n    while (groupsInLevel && groupsInLevel.length > 0) {\r\n      level++;\r\n      groupsInLevel = groupsInLevel[0].children;\r\n    }\r\n\r\n    return level;\r\n  }\r\n\r\n  private _onToggleCollapse = (group: IGroup): void => {\r\n    const { groupProps } = this.props;\r\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\r\n\r\n    if (group) {\r\n      if (onToggleCollapse) {\r\n        onToggleCollapse(group);\r\n      }\r\n\r\n      group.isCollapsed = !group.isCollapsed;\r\n      this._updateIsSomeGroupExpanded();\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  private _onToggleSelectGroup = (group: IGroup): void => {\r\n    if (group) {\r\n      this.props.selection!.toggleRangeSelected(group.startIndex, group.count);\r\n    }\r\n  }\r\n\r\n  private _forceListUpdates(groups?: IGroup[]): void {\r\n    groups = groups || this.state.groups;\r\n\r\n    const groupCount = groups ? groups.length : 1;\r\n\r\n    if (this._list.current) {\r\n      this._list.current.forceUpdate();\r\n\r\n      for (let i = 0; i < groupCount; i++) {\r\n        const group = this._list.current.refs['group_' + String(i)] as GroupedListSection;\r\n        if (group) {\r\n          group.forceListUpdate();\r\n        }\r\n      }\r\n    } else {\r\n      const group = this.refs['group_' + String(0)] as GroupedListSection;\r\n      if (group) {\r\n        group.forceListUpdate();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onToggleSummarize = (group: IGroup): void => {\r\n    const { groupProps } = this.props;\r\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\r\n\r\n    if (onToggleSummarize) {\r\n      onToggleSummarize(group);\r\n    } else {\r\n      if (group) {\r\n        group.isShowingAll = !group.isShowingAll;\r\n      }\r\n\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  private _getPageSpecification = (itemIndex: number, visibleRect: IRectangle): {\r\n    key?: string;\r\n  } => {\r\n    const groups = this.state.groups;\r\n    const pageGroup = groups && groups[itemIndex];\r\n    return {\r\n      key: pageGroup && pageGroup.name\r\n    };\r\n  }\r\n\r\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\r\n    return !!(groups && groups.some(group => group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed));\r\n  }\r\n\r\n  private _updateIsSomeGroupExpanded(): void {\r\n    const { groups } = this.state;\r\n    const { onGroupExpandStateChanged } = this.props;\r\n\r\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\r\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\r\n      if (onGroupExpandStateChanged) {\r\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\r\n      }\r\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\r\n    }\r\n  }\r\n}\r\n"]}