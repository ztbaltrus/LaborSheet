{"version":3,"file":"ContextualMenuButton.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  buttonProperties,\r\n  getNativeProps,\r\n  createRef\r\n} from '../../../Utilities';\r\nimport { ContextualMenuItemWrapper } from './ContextualMenuItemWrapper';\r\nimport { KeytipData } from '../../../KeytipData';\r\nimport { getIsChecked, isItemDisabled, hasSubmenu } from '../../../utilities/contextualMenu/index';\r\nimport { ContextualMenuItem } from '../ContextualMenuItem';\r\n\r\nexport class ContextualMenuButton extends ContextualMenuItemWrapper {\r\n  private _btn = createRef<HTMLButtonElement>();\r\n\r\n  public render() {\r\n    const {\r\n      item,\r\n      classNames,\r\n      index,\r\n      focusableElementIndex,\r\n      totalItemCount,\r\n      hasCheckmarks,\r\n      hasIcons,\r\n      contextualMenuItemAs: ChildrenRenderer = ContextualMenuItem,\r\n      expandedMenuItemKey,\r\n      onItemMouseDown,\r\n      onItemClick,\r\n      openSubMenu,\r\n      dismissSubMenu,\r\n      dismissMenu\r\n    } = this.props;\r\n\r\n    const subMenuId = this._getSubMenuId(item);\r\n    let ariaLabel = '';\r\n\r\n    if (item.ariaLabel) {\r\n      ariaLabel = item.ariaLabel;\r\n    } else if (item.name) {\r\n      ariaLabel = item.name;\r\n    }\r\n\r\n    const isChecked: boolean | null | undefined = getIsChecked(item);\r\n    const canCheck: boolean = isChecked !== null;\r\n    const defaultRole = canCheck ? 'menuitemcheckbox' : 'menuitem';\r\n    const itemHasSubmenu = hasSubmenu(item);\r\n\r\n    const buttonNativeProperties = getNativeProps(item, buttonProperties);\r\n    // Do not add the disabled attribute to the button so that it is focusable\r\n    delete (buttonNativeProperties as any).disabled;\r\n\r\n    const itemButtonProperties = {\r\n      className: classNames.root,\r\n      onClick: this._onItemClick,\r\n      onKeyDown: itemHasSubmenu ? this._onItemKeyDown : null,\r\n      onMouseEnter: this._onItemMouseEnter,\r\n      onMouseLeave: this._onItemMouseLeave,\r\n      onMouseDown: (ev: any) => onItemMouseDown ? onItemMouseDown(item, ev) : undefined,\r\n      onMouseMove: this._onItemMouseMove,\r\n      href: item.href,\r\n      title: item.title,\r\n      'aria-label': ariaLabel,\r\n      'aria-haspopup': itemHasSubmenu || undefined,\r\n      'aria-owns': item.key === expandedMenuItemKey ? subMenuId : undefined,\r\n      'aria-expanded': itemHasSubmenu ? item.key === expandedMenuItemKey : undefined,\r\n      'aria-checked': !!isChecked,\r\n      'aria-posinset': focusableElementIndex + 1,\r\n      'aria-setsize': totalItemCount,\r\n      'aria-disabled': isItemDisabled(item),\r\n      role: item.role || defaultRole,\r\n      style: item.style\r\n    };\r\n\r\n    let { keytipProps } = item;\r\n    if (keytipProps && itemHasSubmenu) {\r\n      keytipProps = {\r\n        ...keytipProps,\r\n        hasMenu: true\r\n      };\r\n    }\r\n\r\n    return (\r\n      <KeytipData\r\n        keytipProps={ keytipProps }\r\n        ariaDescribedBy={ (buttonNativeProperties as any)['aria-describedby'] }\r\n        disabled={ isItemDisabled(item) }\r\n      >\r\n        { (keytipAttributes: any): JSX.Element => (\r\n          <button\r\n            ref={ this._btn }\r\n            { ...buttonNativeProperties as React.ButtonHTMLAttributes<HTMLButtonElement> }\r\n            { ...itemButtonProperties as React.ButtonHTMLAttributes<HTMLButtonElement> }\r\n            { ...keytipAttributes }\r\n          >\r\n            <ChildrenRenderer\r\n              componentRef={ item.componentRef }\r\n              item={ item }\r\n              classNames={ classNames }\r\n              index={ index }\r\n              onCheckmarkClick={ hasCheckmarks && onItemClick ? onItemClick.bind(this, item) : undefined }\r\n              hasIcons={ hasIcons }\r\n              openSubMenu={ openSubMenu }\r\n              dismissSubMenu={ dismissSubMenu }\r\n              dismissMenu={ dismissMenu }\r\n              getSubmenuTarget={ this._getSubmenuTarget }\r\n            />\r\n          </button>\r\n        ) }\r\n      </KeytipData>\r\n    );\r\n  }\r\n\r\n  protected _getSubmenuTarget = (): HTMLElement | undefined => {\r\n    return this._btn.current ? this._btn.current : undefined;\r\n  }\r\n}"]}