{"version":3,"file":"ContextualMenuItem.js","sourceRoot":"../src/","sources":["components/ContextualMenu/ContextualMenuItem.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { hasSubmenu, getIsChecked } from '../../utilities/contextualMenu/index';\r\nimport { BaseComponent, getRTL } from '../../Utilities';\r\nimport { Icon } from '../../Icon';\r\nimport { IContextualMenuItemProps } from './ContextualMenuItem.types';\r\n\r\nconst renderItemIcon = (props: IContextualMenuItemProps) => {\r\n  const {\r\n    item,\r\n    hasIcons,\r\n    classNames\r\n  } = props;\r\n\r\n  // Only present to allow continued use of item.icon which is deprecated.\r\n  const { iconProps, icon } = item;\r\n\r\n  if (!hasIcons) {\r\n    return null;\r\n  }\r\n\r\n  if (item.onRenderIcon) {\r\n    return (\r\n      item.onRenderIcon(props)\r\n    );\r\n  }\r\n\r\n  if (iconProps) {\r\n    return <Icon { ...iconProps } className={ classNames.icon } />;\r\n  }\r\n\r\n  return <Icon iconName={ icon } className={ classNames.icon } />;\r\n};\r\n\r\nconst renderCheckMarkIcon = ({ onCheckmarkClick, item, classNames }: IContextualMenuItemProps) => {\r\n  const isItemChecked = getIsChecked(item);\r\n  if (onCheckmarkClick) {\r\n    const onClick = (e: React.MouseEvent<HTMLElement>) => onCheckmarkClick(item, e);\r\n\r\n    return (\r\n      <Icon\r\n        iconName={ isItemChecked ? 'CheckMark' : '' }\r\n        className={ classNames.checkmarkIcon }\r\n        onClick={ onClick }\r\n      />\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst renderItemName = ({ item, classNames }: IContextualMenuItemProps) => {\r\n  if (item.name) {\r\n    return <span className={ classNames.label }>{ item.name }</span>;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst renderSecondaryText = ({ item, classNames }: IContextualMenuItemProps) => {\r\n  if (item.secondaryText) {\r\n    return <span className={ classNames.secondaryText }>{ item.secondaryText }</span>;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst renderSubMenuIcon = ({ item, classNames }: IContextualMenuItemProps) => {\r\n  if (hasSubmenu(item)) {\r\n    return (\r\n      <Icon\r\n        iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' }\r\n        { ...item.submenuIconProps }\r\n        className={ classNames.subMenuIcon }\r\n      />\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport class ContextualMenuItem extends BaseComponent<IContextualMenuItemProps, {}> {\r\n\r\n  public render() {\r\n    const { item, classNames } = this.props;\r\n\r\n    return (\r\n      <div\r\n        className={\r\n          item.split ? classNames.linkContentMenu : classNames.linkContent\r\n        }\r\n      >\r\n        { renderCheckMarkIcon(this.props) }\r\n        { renderItemIcon(this.props) }\r\n        { renderItemName(this.props) }\r\n        { renderSecondaryText(this.props) }\r\n        { renderSubMenuIcon(this.props) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public openSubMenu = (): void => {\r\n    const { item, openSubMenu, getSubmenuTarget } = this.props;\r\n    if (getSubmenuTarget) {\r\n      const submenuTarget = getSubmenuTarget();\r\n      if (hasSubmenu(item) && openSubMenu && submenuTarget) {\r\n        openSubMenu(item, submenuTarget);\r\n      }\r\n    }\r\n  }\r\n\r\n  public dismissSubMenu = (): void => {\r\n    const { item, dismissSubMenu } = this.props;\r\n    if (hasSubmenu(item) && dismissSubMenu) {\r\n      dismissSubMenu();\r\n    }\r\n  }\r\n\r\n  public dismissMenu = (dismissAll?: boolean): void => {\r\n    const { dismissMenu } = this.props;\r\n    if (dismissMenu) {\r\n      dismissMenu(undefined /* ev */, dismissAll);\r\n    }\r\n  }\r\n}\r\n"]}