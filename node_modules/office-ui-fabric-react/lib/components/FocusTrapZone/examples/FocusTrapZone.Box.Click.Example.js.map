{"version":3,"file":"FocusTrapZone.Box.Click.Example.js","sourceRoot":"../src/","sources":["components/FocusTrapZone/examples/FocusTrapZone.Box.Click.Example.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAE/B,4DAAkE;AAClE,0EAAyE;AACzE,wDAAuD;AACvD,kEAAiE;AACjE,4DAAoE;AACpE,4CAA0C;AAM1C;IAA+C,6CAAqF;IAGlI,2BAAY,KAA2C;QAAvD,YACE,kBAAM,KAAK,CAAC,SAKb;QA8DO,2BAAqB,GAAG;YAC9B,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;QACL,CAAC,CAAA;QAEO,+BAAyB,GAAG;YAClC,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,KAAK;aACjB,CAAC,CAAC;QACL,CAAC,CAAA;QAEO,mCAA6B,GAAG,UAAC,SAAkB;YACzD,KAAI,CAAC,QAAQ,CAAC;gBACZ,SAAS,EAAE,SAAS;aACrB,EAAE,cAAM,OAAA,KAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAApB,CAAoB,CAAC,CAAC;QACjC,CAAC,CAAA;QAEO,aAAO,GAAG,UAAC,MAAe;YAChC,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACxB,CAAC,CAAA;QArFC,KAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,KAAK;SACjB,CAAC;;IACJ,CAAC;IAEM,kCAAM,GAAb;QAAA,iBA4BC;QA3BS,IAAA,gCAAS,CAAgB;QAEjC,OAAO,CACL;YACE,oBAAC,sBAAa,IACZ,aAAa,EAAC,kCAAkC,EAChD,OAAO,EAAG,IAAI,CAAC,qBAAqB,EACpC,IAAI,EAAC,iBAAiB,GACtB;YAEA,CAAC;gBACD,IAAI,SAAS,EAAE;oBACb,OAAO,CACL,oBAAC,6BAAa,IAAC,2BAA2B,EAAG,IAAI,EAAG,oBAAoB,EAAG,KAAK,IAC5E,KAAI,CAAC,iBAAiB,EAAE,CACZ,CACjB,CAAC;iBACH;qBAAM;oBACL,OAAO,CACL,iCACI,KAAI,CAAC,iBAAiB,EAAE,CACtB,CACP,CAAC;iBACH;YACH,CAAC,CAAC,EAAE,CACA,CACP,CAAC;IACJ,CAAC;IAEO,6CAAiB,GAAzB;QAAA,iBA4BC;QA3BS,IAAA,gCAAS,CAAgB;QAEjC,OAAO,CACL,6BAAK,SAAS,EAAC,4BAA4B;YACzC,oBAAC,qBAAS,IAAC,KAAK,EAAC,mBAAmB,EAAC,WAAW,EAAC,8BAA8B,EAAC,SAAS,EAAC,EAAE,GAAG;YAC/F,oBAAC,WAAI,IAAC,IAAI,EAAC,EAAE,EAAC,SAAS,EAAC,EAAE,qCAAuC;YAAA,+BAAM;YAAA,+BAAM;YAC7E,oBAAC,eAAM,IACL,YAAY,EAAG,IAAI,CAAC,OAAO,EAC3B,OAAO,EAAG,SAAS,EACnB,SAAS,EAAG,IAAI,CAAC,6BAA6B,EAC9C,KAAK,EAAC,iBAAiB,EACvB,MAAM,EAAC,IAAI,EACX,OAAO,EAAC,KAAK,GACb;YACA,CAAC;gBACD,IAAI,SAAS,EAAE;oBACb,OAAO,CACL,oBAAC,sBAAa,IACZ,aAAa,EAAC,sBAAsB,EACpC,OAAO,EAAG,KAAI,CAAC,yBAAyB,EACxC,IAAI,EAAC,sBAAsB,GAC3B,CACH,CAAC;iBACH;YACH,CAAC,CAAC,EAAE,CACA,CACP,CAAC;IACJ,CAAC;IAuBH,wBAAC;AAAD,CAAC,AA5FD,CAA+C,KAAK,CAAC,SAAS,GA4F7D","sourcesContent":["import * as React from 'react';\r\n\r\nimport { DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { FocusTrapZone } from 'office-ui-fabric-react/lib/FocusTrapZone';\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Toggle, IToggle } from 'office-ui-fabric-react/lib/Toggle';\r\nimport './FocusTrapZone.Box.Example.scss';\r\n\r\nexport interface IBoxNoClickExampleExampleState {\r\n  isToggled: boolean;\r\n}\r\n\r\nexport default class BoxNoClickExample extends React.Component<React.HTMLAttributes<HTMLDivElement>, IBoxNoClickExampleExampleState> {\r\n  private _toggle: IToggle;\r\n\r\n  constructor(props: React.HTMLAttributes<HTMLDivElement>) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isToggled: false,\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    const { isToggled } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <DefaultButton\r\n          secondaryText='Focuses inside the FocusTrapZone'\r\n          onClick={ this._onButtonClickHandler }\r\n          text='Go to Trap Zone'\r\n        />\r\n\r\n        { (() => {\r\n          if (isToggled) {\r\n            return (\r\n              <FocusTrapZone isClickableOutsideFocusTrap={ true } forceFocusInsideTrap={ false }>\r\n                { this._internalContents() }\r\n              </FocusTrapZone>\r\n            );\r\n          } else {\r\n            return (\r\n              <div>\r\n                { this._internalContents() }\r\n              </div>\r\n            );\r\n          }\r\n        })() }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _internalContents() {\r\n    const { isToggled } = this.state;\r\n\r\n    return (\r\n      <div className='ms-FocusTrapZoneBoxExample'>\r\n        <TextField label='Default TextField' placeholder='Input inside Focus Trap Zone' className='' />\r\n        <Link href='' className='' >Hyperlink inside FocusTrapZone</Link><br /><br />\r\n        <Toggle\r\n          componentRef={ this._setRef }\r\n          checked={ isToggled }\r\n          onChanged={ this._onFocusTrapZoneToggleChanged }\r\n          label='Focus Trap Zone'\r\n          onText='On'\r\n          offText='Off'\r\n        />\r\n        { (() => {\r\n          if (isToggled) {\r\n            return (\r\n              <DefaultButton\r\n                secondaryText='Exit Focus Trap Zone'\r\n                onClick={ this._onExitButtonClickHandler }\r\n                text='Exit Focus Trap Zone'\r\n              />\r\n            );\r\n          }\r\n        })() }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onButtonClickHandler = (): void => {\r\n    this.setState({\r\n      isToggled: true\r\n    });\r\n  }\r\n\r\n  private _onExitButtonClickHandler = (): void => {\r\n    this.setState({\r\n      isToggled: false\r\n    });\r\n  }\r\n\r\n  private _onFocusTrapZoneToggleChanged = (isToggled: boolean): void => {\r\n    this.setState({\r\n      isToggled: isToggled\r\n    }, () => this._toggle.focus());\r\n  }\r\n\r\n  private _setRef = (toggle: IToggle): void => {\r\n    this._toggle = toggle;\r\n  }\r\n}"]}