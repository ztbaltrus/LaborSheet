{"version":3,"file":"Keytip.js","sourceRoot":"../src/","sources":["components/Keytip/Keytip.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,6CAAgD;AAChD,mEAA6F;AAC7F,yCAAwC;AAGxC,iDAAgD;AAChD,iDAA2E;AAE3E;;;;;;GAMG;AACH;IAA4B,kCAA+B;IAA3D;;IAmDA,CAAC;IAlDQ,uBAAM,GAAb;QACQ,IAAA,eAIQ,EAHZ,8BAAY,EACZ,kBAAM,EACN,4CAAmB,CACN;QAEb,IAAA,sCAAY,CACC;QAEf,IAAI,YAAoB,CAAC;QACzB,gDAAgD;QAChD,IAAI,mBAAmB,EAAE;YACvB,YAAY,GAAG,oCAAsB,CAAC,4BAAc,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC,CAAC;SAC1F;aAAM;YACL,YAAY,GAAG,oCAAsB,CAAC,YAAY,CAAC,CAAC;SACrD;QAED,IAAI,MAAM,EAAE;YACV,gEAAgE;YAChE,yBAAyB;YACzB,YAAY,wBACP,YAAY,IACf,WAAW,EAAE,IAAI,EACjB,eAAe,wBAChB,CAAC;SACH;QAED,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,eAAe,KAAK,SAAS,EAAE;YAC/D,mDAAmD;YACnD,YAAY,wBACP,YAAY,IACf,eAAe,yBAChB,CAAC;SACH;QAED,OAAO,CACL,oBAAC,iBAAO,uBACD,YAAY,IACjB,aAAa,EAAG,KAAK,EACrB,UAAU,EAAG,IAAI,EACjB,cAAc,EAAG,CAAC,EAClB,SAAS,EAAG,MAAM,CAAC,CAAC,CAAC,sCAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,gCAAgB,EACtE,sBAAsB,EAAG,IAAI,EAC7B,MAAM,EAAG,YAAY;YAErB,oBAAC,6BAAa,uBAAM,IAAI,CAAC,KAAK,EAAK,CAC3B,CACX,CAAC;IACJ,CAAC;IACH,aAAC;AAAD,CAAC,AAnDD,CAA4B,yBAAa,GAmDxC;AAnDY,wBAAM","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '../../Utilities';\r\nimport { mergeOverflows, ktpTargetFromSequences } from '../../utilities/keytips/KeytipUtils';\r\nimport { Callout } from '../../Callout';\r\nimport { DirectionalHint } from '../../ContextualMenu';\r\nimport { IKeytip, IKeytipProps } from './Keytip.types';\r\nimport { KeytipContent } from './KeytipContent';\r\nimport { getCalloutStyles, getCalloutOffsetStyles } from './Keytip.styles';\r\n\r\n/**\r\n * A callout corresponding to another Fabric component to describe a key sequence that will activate that component\r\n *\r\n * @export\r\n * @class Keytip\r\n * @extends {BaseComponent<IKeytipProps, {}}>}\r\n */\r\nexport class Keytip extends BaseComponent<IKeytipProps, {}> implements IKeytip {\r\n  public render(): JSX.Element {\r\n    const {\r\n      keySequences,\r\n      offset,\r\n      overflowSetSequence\r\n    } = this.props;\r\n    let {\r\n      calloutProps\r\n    } = this.props;\r\n\r\n    let keytipTarget: string;\r\n    // Take into consideration the overflow sequence\r\n    if (overflowSetSequence) {\r\n      keytipTarget = ktpTargetFromSequences(mergeOverflows(keySequences, overflowSetSequence));\r\n    } else {\r\n      keytipTarget = ktpTargetFromSequences(keySequences);\r\n    }\r\n\r\n    if (offset) {\r\n      // Set callout to top-left corner, will be further positioned in\r\n      // getCalloutOffsetStyles\r\n      calloutProps = {\r\n        ...calloutProps,\r\n        coverTarget: true,\r\n        directionalHint: DirectionalHint.topLeftEdge\r\n      };\r\n    }\r\n\r\n    if (!calloutProps || calloutProps.directionalHint === undefined) {\r\n      // Default callout directional hint to BottomCenter\r\n      calloutProps = {\r\n        ...calloutProps,\r\n        directionalHint: DirectionalHint.bottomCenter\r\n      };\r\n    }\r\n\r\n    return (\r\n      <Callout\r\n        { ...calloutProps }\r\n        isBeakVisible={ false }\r\n        doNotLayer={ true }\r\n        minPagePadding={ 0 }\r\n        getStyles={ offset ? getCalloutOffsetStyles(offset) : getCalloutStyles }\r\n        preventDismissOnScroll={ true }\r\n        target={ keytipTarget }\r\n      >\r\n        <KeytipContent { ...this.props } />\r\n      </Callout>\r\n    );\r\n  }\r\n}"]}