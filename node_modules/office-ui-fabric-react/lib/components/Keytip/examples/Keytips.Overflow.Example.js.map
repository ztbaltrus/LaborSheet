{"version":3,"file":"Keytips.Overflow.Example.js","sourceRoot":"../src/","sources":["components/Keytip/examples/Keytips.Overflow.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { keytipMap } from './KeytipSetup';\r\nimport { IOverflowSetItemProps, OverflowSet } from 'office-ui-fabric-react/lib/OverflowSet';\r\nimport { CommandBarButton, DefaultButton } from 'office-ui-fabric-react/lib/Button';\r\n\r\nexport interface IKeytipsOverflowExampleState {\r\n  items: IOverflowSetItemProps[];\r\n  overflowItems: IOverflowSetItemProps[];\r\n}\r\n\r\nexport class KeytipsOverflowExample extends React.Component<{}, IKeytipsOverflowExampleState> {\r\n  // Setup initial overflow items\r\n  private _initialItems = [\r\n    {\r\n      key: 'item1',\r\n      name: 'Link 1',\r\n      onClick: () => { return; },\r\n      keytipProps: keytipMap.OverflowButton1\r\n    },\r\n    {\r\n      key: 'item2',\r\n      name: 'Link 2',\r\n      onClick: () => { return; },\r\n      keytipProps: keytipMap.OverflowButton2\r\n    },\r\n    {\r\n      key: 'item3',\r\n      name: 'Link 3',\r\n      onClick: () => { return; },\r\n      keytipProps: keytipMap.OverflowButton3\r\n    }\r\n  ];\r\n\r\n  private _initialOverflowItems = [\r\n    {\r\n      key: 'item5',\r\n      name: 'Overflow Link 1',\r\n      keytipProps: {\r\n        ...keytipMap.OverflowButton5,\r\n        onExecute: (el: HTMLElement | null) => {\r\n          if (el) {\r\n            el.click();\r\n          } else {\r\n            console.log('first overflow item');\r\n          }\r\n        }\r\n      },\r\n      onClick: () => {\r\n        console.log('first overflow item');\r\n      }\r\n    },\r\n    {\r\n      key: 'item6',\r\n      name: 'Overflow Link 2',\r\n      keytipProps: {\r\n        ...keytipMap.OverflowButton6,\r\n        onExecute: (el: HTMLElement | null) => {\r\n          if (el) {\r\n            el.click();\r\n          } else {\r\n            console.log('second overflow item');\r\n          }\r\n        }\r\n      },\r\n      onClick: () => {\r\n        console.log('second overflow item');\r\n      },\r\n      subMenuProps: {\r\n        items: [\r\n          {\r\n            key: 'overflowSubMenu1',\r\n            name: 'Overflow Submenu Item 1',\r\n            keytipProps: keytipMap.OverflowSubMenuButton1\r\n          },\r\n          {\r\n            key: 'overflowSubMenu2',\r\n            name: 'Overflow Submenu Item 2'\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  ];\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    // Setup state\r\n    this.state = {\r\n      items: this._initialItems,\r\n      overflowItems: this._initialOverflowItems\r\n    };\r\n  }\r\n\r\n  /* tslint:disable:jsx-ban-props jsx-no-lambda */\r\n  public render() {\r\n    return (\r\n      <div>\r\n        <p>\r\n          Keytips in an overflow well have a special behavior. When a keytip goes into the overflow button menu, it will also register a 'persisted' keytip that can be accessed from the top level as a shortcut. A shortcut to a normal button item will trigger that button. A shortcut to a menu button item will open the overflow button menu and then open that item's menu as well. In this example triggering 'T' and 'Y' will show off this functionality (see console messages)\r\n        </p>\r\n        <OverflowSet\r\n          items={ this.state.items }\r\n          overflowItems={ this.state.overflowItems }\r\n          keytipSequences={ keytipMap.OverflowButton4.keySequences }\r\n          onRenderOverflowButton={ this._onRenderOverflowButton }\r\n          onRenderItem={ this._onRenderItem }\r\n        />\r\n        <p>\r\n          When an item is moved out of the overflow well, it behaves as a normal keytip\r\n        </p>\r\n        <DefaultButton\r\n          text={ 'Move overflow items' }\r\n          onClick={ this._toggleOverflowItems }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onRenderItem(item: IOverflowSetItemProps): JSX.Element {\r\n    return (\r\n      <CommandBarButton\r\n        { ...item }\r\n        styles={ { root: { padding: '10px' } } }\r\n        menuProps={ item.subMenuProps }\r\n      >{ item.name }\r\n      </CommandBarButton>\r\n    );\r\n  }\r\n\r\n  private _onRenderOverflowButton = (overflowItems: any[] | undefined): JSX.Element => {\r\n    return (\r\n      <CommandBarButton\r\n        menuIconProps={ { iconName: 'More' } }\r\n        menuProps={ { items: overflowItems! } }\r\n        keytipProps={ keytipMap.OverflowButton4 }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _toggleOverflowItems = (): void => {\r\n    this.setState((prevState: IKeytipsOverflowExampleState) => {\r\n      let items = prevState.items;\r\n      let overflowItems = prevState.overflowItems;\r\n      if (overflowItems.length) {\r\n        // Move all overflowItems to items\r\n        items = items.concat(overflowItems);\r\n        overflowItems = [];\r\n      } else {\r\n        // Move last two items to overflowItems\r\n        overflowItems = items.slice(-2);\r\n        items = items.slice(0, -2);\r\n      }\r\n      return { items, overflowItems };\r\n    });\r\n  }\r\n}"]}