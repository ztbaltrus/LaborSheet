{"version":3,"file":"Link.types.js","sourceRoot":"../src/","sources":["components/Link/Link.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { LinkBase } from './Link.base';\r\n\r\nimport {\r\n  IStyle,\r\n  ITheme\r\n} from '../../Styling';\r\nimport { IStyleFunction } from '../../Utilities';\r\nimport { IKeytipProps } from '../../Keytip';\r\n\r\nexport interface ILink {\r\n  /** Sets focus to the link. */\r\n  focus(): void;\r\n}\r\n\r\nexport interface ILinkProps extends React.AllHTMLAttributes<HTMLAnchorElement | HTMLButtonElement | HTMLElement | LinkBase> {\r\n  /**\r\n   * Optional callback to access the ILink interface. Use this instead of ref for accessing\r\n   * the public methods and properties of the component.\r\n   */\r\n  componentRef?: (component: ILink | null) => void;\r\n\r\n  /**\r\n   * Whether the link is disabled\r\n   */\r\n  disabled?: boolean;\r\n\r\n  /**\r\n   * Call to provide customized styling that will layer on top of the variant rules.\r\n   */\r\n  getStyles?: IStyleFunction<ILinkStyleProps, ILinkStyles>;\r\n\r\n  /**\r\n   * Theme (provided through customization.)\r\n   */\r\n  theme?: ITheme;\r\n\r\n  /**\r\n   * Optional keytip for this Link\r\n   */\r\n  keytipProps?: IKeytipProps;\r\n}\r\n\r\nexport interface ILinkStyleProps {\r\n  className?: string;\r\n  isButton?: boolean;\r\n  isDisabled?: boolean;\r\n  theme: ITheme;\r\n}\r\n\r\nexport interface ILinkStyles {\r\n  root: IStyle;\r\n}"]}