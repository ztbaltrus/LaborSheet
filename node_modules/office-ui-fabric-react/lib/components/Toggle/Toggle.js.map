{"version":3,"file":"Toggle.js","sourceRoot":"../src/","sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  getId,\r\n  inputProperties,\r\n  getNativeProps,\r\n  createRef\r\n} from '../../Utilities';\r\nimport {\r\n  IToggleProps,\r\n  IToggle\r\n} from './Toggle.types';\r\nimport { Label } from '../../Label';\r\nimport {\r\n  customizable\r\n} from '../../Utilities';\r\nimport { getClassNames } from './Toggle.classNames';\r\nimport { KeytipData } from '../../KeytipData';\r\n\r\nexport interface IToggleState {\r\n  isChecked: boolean;\r\n}\r\n\r\n@customizable('Toggle', ['theme'])\r\nexport class Toggle extends BaseComponent<IToggleProps, IToggleState> implements IToggle {\r\n\r\n  private _id: string;\r\n  private _toggleButton = createRef<HTMLButtonElement>();\r\n\r\n  constructor(props: IToggleProps) {\r\n    super(props);\r\n\r\n    this._warnMutuallyExclusive({\r\n      checked: 'defaultChecked'\r\n    });\r\n\r\n    this.state = {\r\n      isChecked: !!(props.checked || props.defaultChecked)\r\n    };\r\n    this._id = props.id || getId('Toggle');\r\n  }\r\n\r\n  /**\r\n   * Gets the current checked state of the toggle.\r\n   */\r\n  public get checked(): boolean {\r\n    return this.state.isChecked;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IToggleProps): void {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        isChecked: !!newProps.checked // convert null to false\r\n      });\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    // This control is using an input element for more universal accessibility support.\r\n    // Previously a button and the aria-pressed attribute were used. This technique works well with Narrator + Edge and NVDA + FireFox.\r\n    // However, JAWS and VoiceOver did not announce anything when the toggle was checked or unchecked.\r\n    // In the future when more screenreaders support aria-pressed it would be a good idea to change this control back to using it as it is\r\n    // more semantically correct.\r\n\r\n    const {\r\n      className,\r\n      theme,\r\n      styles: customStyles,\r\n      disabled,\r\n      label,\r\n      offAriaLabel,\r\n      offText,\r\n      onAriaLabel,\r\n      onText,\r\n      keytipProps\r\n    } = this.props;\r\n    const { isChecked } = this.state;\r\n    const stateText = isChecked ? onText : offText;\r\n    const ariaLabel = isChecked ? onAriaLabel : offAriaLabel;\r\n    const toggleNativeProps = getNativeProps(this.props, inputProperties, ['defaultChecked']);\r\n    const classNames = getClassNames(\r\n      theme!,\r\n      customStyles!,\r\n      className!,\r\n      disabled!,\r\n      isChecked\r\n    );\r\n\r\n    return (\r\n      <div className={ classNames.root }>\r\n\r\n        { label && (\r\n          <Label htmlFor={ this._id } className={ classNames.label }>{ label }</Label>\r\n        ) }\r\n\r\n        <div className={ classNames.container } >\r\n          <KeytipData\r\n            keytipProps={ keytipProps }\r\n            ariaDescribedBy={ (toggleNativeProps as any)['aria-describedby'] }\r\n            disabled={ disabled }\r\n          >\r\n            { (keytipAttributes: any): JSX.Element => (\r\n              <button\r\n                { ...toggleNativeProps }\r\n                { ...keytipAttributes }\r\n                className={ classNames.pill }\r\n                disabled={ disabled }\r\n                id={ this._id }\r\n                type='button'\r\n                ref={ this._toggleButton }\r\n                aria-disabled={ disabled }\r\n                aria-pressed={ isChecked }\r\n                aria-label={ ariaLabel ? ariaLabel : label }\r\n                data-is-focusable={ true }\r\n                onChange={ this._noop }\r\n                onClick={ this._onClick }\r\n              >\r\n                <div className={ classNames.thumb } />\r\n              </button>\r\n            ) }\r\n          </KeytipData>\r\n          { stateText && (\r\n            <Label htmlFor={ this._id } className={ classNames.text }>{ stateText }</Label>\r\n          ) }\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    if (this._toggleButton.current) {\r\n      this._toggleButton.current.focus();\r\n    }\r\n  }\r\n\r\n  private _onClick = (ev: React.MouseEvent<HTMLElement>) => {\r\n    const { disabled, checked, onChanged, onClick } = this.props;\r\n    const { isChecked } = this.state;\r\n\r\n    if (!disabled) {\r\n      // Only update the state if the user hasn't provided it.\r\n      if (checked === undefined) {\r\n        this.setState({\r\n          isChecked: !isChecked\r\n        });\r\n      }\r\n\r\n      if (onChanged) {\r\n        onChanged(!isChecked);\r\n      }\r\n\r\n      if (onClick) {\r\n        onClick(ev);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _noop(): void {\r\n    /* no-op */\r\n  }\r\n\r\n}\r\n"]}