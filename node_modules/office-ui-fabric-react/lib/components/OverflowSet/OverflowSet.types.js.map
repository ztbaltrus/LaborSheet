{"version":3,"file":"OverflowSet.types.js","sourceRoot":"../src/","sources":["components/OverflowSet/OverflowSet.types.ts"],"names":[],"mappings":"","sourcesContent":["import * as React from 'react';\r\nimport { OverflowSet } from './OverflowSet';\r\nimport { IRenderFunction } from '../../Utilities';\r\nimport { IFocusZoneProps } from '../../FocusZone';\r\nimport { IKeytipProps } from '../../Keytip';\r\n\r\nexport interface IOverflowSet {\r\n  /**\r\n   * Sets focus to the first tabbable item in the zone.\r\n   * @param {boolean} forceIntoFirstElement If true, focus will be forced into the first element, even if focus is already in the focus zone.\r\n   * @returns True if focus could be set to an active element, false if no operation was taken.\r\n   */\r\n  focus(forceIntoFirstElement?: boolean): boolean;\r\n\r\n  /**\r\n   * Sets focus to a specific child element within the zone. This can be used in conjunction with\r\n   * onBeforeFocus to created delayed focus scenarios (like animate the scroll position to the correct\r\n   * location and then focus.)\r\n   * @param {HTMLElement} childElement The child element within the zone to focus.\r\n   * @returns True if focus could be set to an active element, false if no operation was taken.\r\n   */\r\n  focusElement(childElement?: HTMLElement): boolean;\r\n}\r\n\r\nexport interface IOverflowSetProps extends React.Props<OverflowSet> {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: (ref?: IOverflowSet | null) => void;\r\n\r\n  /**\r\n   * Class name\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * An array of items to be rendered by your onRenderItem function in the primary content area\r\n  */\r\n  items?: IOverflowSetItemProps[];\r\n\r\n  /**\r\n   * Change item layout direction to vertical/stacked.\r\n   * @default false\r\n  */\r\n  vertical?: boolean;\r\n\r\n  /**\r\n   * An array of items to be passed to overflow contextual menu\r\n  */\r\n  overflowItems?: IOverflowSetItemProps[];\r\n\r\n  /**\r\n   * Method to call when trying to render an item.\r\n  */\r\n  onRenderItem: (item: IOverflowSetItemProps) => any;\r\n\r\n  /**\r\n   * Rendering method for overflow button and contextual menu. The argument to the function is\r\n   * the overflowItems passed in as props to this function.\r\n  */\r\n  onRenderOverflowButton: IRenderFunction<any[]>;\r\n\r\n  /**\r\n   * Custom properties for OverflowSet's FocusZone.\r\n   * If doNotContainWithinFocusZone is set to true focusZoneProps will be ignored.\r\n   * Use one or the other.\r\n   */\r\n  focusZoneProps?: IFocusZoneProps;\r\n\r\n  /**\r\n   * If true do not contain the OverflowSet inside of a FocusZone,\r\n   * otherwise the OverflowSet will contain a FocusZone.\r\n   * If this is set to true focusZoneProps will be ignored.\r\n   * Use one or the other.\r\n   */\r\n  doNotContainWithinFocusZone?: boolean;\r\n\r\n  /**\r\n   * The role for the OverflowSet.\r\n   * @default 'menubar'\r\n   */\r\n  role?: string;\r\n\r\n  /**\r\n   * Optional full keytip sequence for the overflow button, if it will have a keytip.\r\n   */\r\n  keytipSequences?: string[];\r\n\r\n  /**\r\n   * Function that will take in an IOverflowSetItemProps and return the subMenu for that item.\r\n   * If not provided, will use 'item.subMenuProps.items' by default.\r\n   * This is only used if your overflow set has keytips.\r\n   */\r\n  itemSubMenuProvider?: (item: IOverflowSetItemProps) => any[] | undefined;\r\n}\r\n\r\nexport interface IOverflowSetItemProps {\r\n  /**\r\n   * Unique id to identify the item.\r\n   */\r\n  key: string;\r\n\r\n  /**\r\n   * Optional keytip for the overflowSetItem.\r\n   */\r\n  keytipProps?: IKeytipProps;\r\n\r\n  /**\r\n   * Any additional properties to use when custom rendering menu items.\r\n   */\r\n  [propertyName: string]: any;\r\n}"]}