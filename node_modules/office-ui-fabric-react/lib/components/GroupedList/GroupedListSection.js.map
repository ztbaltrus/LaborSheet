{"version":3,"file":"GroupedListSection.js","sourceRoot":"../src/","sources":["components/GroupedList/GroupedListSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  IGroup,\r\n  IGroupDividerProps\r\n} from './GroupedList.types';\r\n\r\nimport {\r\n  IDragDropContext,\r\n  IDragDropEvents,\r\n  IDragDropHelper\r\n} from '../../utilities/dragdrop/index';\r\n\r\nimport {\r\n  BaseComponent,\r\n  IRenderFunction,\r\n  IDisposable,\r\n  createRef\r\n} from '../../Utilities';\r\n\r\nimport {\r\n  ISelection,\r\n  SelectionMode,\r\n  SELECTION_CHANGE\r\n} from '../../utilities/selection/index';\r\n\r\nimport { GroupHeader } from './GroupHeader';\r\nimport { GroupShowAll } from './GroupShowAll';\r\nimport { GroupFooter } from './GroupFooter';\r\n\r\nimport {\r\n  List\r\n} from '../../List';\r\nimport {\r\n  IDragDropOptions\r\n} from './../../utilities/dragdrop/interfaces';\r\nimport { assign, css } from '../../Utilities';\r\nimport { IViewport } from '../../utilities/decorators/withViewport';\r\nimport * as stylesImport from './GroupedList.scss';\r\nimport { IListProps } from '../List/index';\r\n\r\nconst styles: any = stylesImport;\r\n\r\nexport interface IGroupedListSectionProps extends React.Props<GroupedListSection> {\r\n  /**\r\n   * Gets the component ref.\r\n   */\r\n  componentRef?: () => void;\r\n\r\n  /** Map of callback functions related to drag and drop functionality. */\r\n  dragDropEvents?: IDragDropEvents;\r\n\r\n  /** helper to manage drag/drop across item rows and groups */\r\n  dragDropHelper?: IDragDropHelper;\r\n\r\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\r\n  eventsToRegister?: { eventName: string, callback: (context: IDragDropContext, event?: any) => void }[];\r\n\r\n  /** Information to pass in to the group footer. */\r\n  footerProps?: IGroupDividerProps;\r\n\r\n  /** Grouping item limit. */\r\n  getGroupItemLimit?: (group: IGroup) => number;\r\n\r\n  /** Optional grouping instructions. */\r\n  groupIndex?: number;\r\n\r\n  /** Optional group nesting level. */\r\n  groupNestingDepth?: number;\r\n\r\n  /** Optional grouping instructions. */\r\n  group?: IGroup;\r\n\r\n  /** Information to pass in to the group header. */\r\n  headerProps?: IGroupDividerProps;\r\n\r\n  /** List of items to render. */\r\n  items: any[];\r\n\r\n  /** Optional list props to pass to list renderer.  */\r\n  listProps?: any;\r\n\r\n  /** Rendering callback to render the group items. */\r\n  onRenderCell: (\r\n    nestingDepth?: number,\r\n    item?: any,\r\n    index?: number\r\n  ) => React.ReactNode;\r\n\r\n  /** Optional selection model to track selection state.  */\r\n  selection?: ISelection;\r\n\r\n  /** Controls how/if the details list manages selection. */\r\n  selectionMode?: SelectionMode;\r\n\r\n  /** Information to pass in to the group Show All footer. */\r\n  showAllProps?: IGroupDividerProps;\r\n\r\n  /** Optional Viewport, provided by the parent component. */\r\n  viewport?: IViewport;\r\n\r\n  /** Override for rendering the group header. */\r\n  onRenderGroupHeader?: IRenderFunction<IGroupDividerProps>;\r\n\r\n  /** Override for rendering the group Show All link. */\r\n  onRenderGroupShowAll?: IRenderFunction<IGroupDividerProps>;\r\n\r\n  /** Override for rendering the group footer. */\r\n  onRenderGroupFooter?: IRenderFunction<IGroupDividerProps>;\r\n\r\n  /**\r\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\r\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\r\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists.\r\n   * The default implementation will virtualize when this callback is not provided.\r\n   */\r\n  onShouldVirtualize?: (props: IListProps) => boolean;\r\n}\r\n\r\nexport interface IGroupedListSectionState {\r\n  isDropping?: boolean;\r\n  isSelected?: boolean;\r\n}\r\n\r\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\r\n\r\nexport class GroupedListSection extends BaseComponent<IGroupedListSectionProps, IGroupedListSectionState> {\r\n  private _root = createRef<HTMLDivElement>();\r\n  private _list = createRef<List>();\r\n\r\n  private _dragDropSubscription: IDisposable;\r\n\r\n  constructor(props: IGroupedListSectionProps) {\r\n    super(props);\r\n\r\n    const { selection, group } = props;\r\n\r\n    this.state = {\r\n      isDropping: false,\r\n      isSelected: (selection && group) ? selection.isRangeSelected(group.startIndex, group.count) : false\r\n    };\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    const { dragDropHelper, selection } = this.props;\r\n\r\n    if (dragDropHelper && this._root.current) {\r\n      this._dragDropSubscription = dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\r\n    }\r\n\r\n    if (selection) {\r\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    if (this._dragDropSubscription) {\r\n      this._dragDropSubscription.dispose();\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\r\n    if (this.props.group !== previousProps.group ||\r\n      this.props.groupIndex !== previousProps.groupIndex ||\r\n      this.props.dragDropHelper !== previousProps.dragDropHelper) {\r\n      if (this._dragDropSubscription) {\r\n        this._dragDropSubscription.dispose();\r\n        delete this._dragDropSubscription;\r\n      }\r\n\r\n      if (this.props.dragDropHelper && this._root.current) {\r\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(this._root.current, this._events, this._getGroupDragDropOptions());\r\n      }\r\n    }\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      getGroupItemLimit,\r\n      group,\r\n      groupIndex,\r\n      headerProps,\r\n      showAllProps,\r\n      footerProps,\r\n      viewport,\r\n      selectionMode,\r\n      onRenderGroupHeader = this._onRenderGroupHeader,\r\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\r\n      onRenderGroupFooter = this._onRenderGroupFooter,\r\n      onShouldVirtualize\r\n    } = this.props;\r\n    const { isSelected } = this.state;\r\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\r\n    const isShowAllVisible = group && !group.children && !group.isCollapsed && !group.isShowingAll &&\r\n      (group.count > renderCount || group.hasMoreData);\r\n    const hasNestedGroups = group && group.children && group.children.length > 0;\r\n\r\n    const dividerProps: IGroupDividerProps = {\r\n      group: group,\r\n      groupIndex: groupIndex,\r\n      groupLevel: group ? group.level : 0,\r\n      isSelected,\r\n      viewport: viewport,\r\n      selectionMode: selectionMode\r\n    };\r\n    const groupHeaderProps: IGroupDividerProps = assign({}, headerProps, dividerProps);\r\n    const groupShowAllProps: IGroupDividerProps = assign({}, showAllProps, dividerProps);\r\n    const groupFooterProps: IGroupDividerProps = assign({}, footerProps, dividerProps);\r\n\r\n    return (\r\n      <div\r\n        ref={ this._root }\r\n        className={ css('ms-GroupedList-group', styles.group, this._getDroppingClassName()) }\r\n        role='presentation'\r\n      >\r\n        { onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader) }\r\n        {\r\n          group && group.isCollapsed ?\r\n            null :\r\n            (\r\n              hasNestedGroups ?\r\n                (\r\n                  <List\r\n                    ref={ this._list }\r\n                    items={ group!.children }\r\n                    onRenderCell={ this._renderSubGroup }\r\n                    getItemCountForPage={ this._returnOne }\r\n                    onShouldVirtualize={ onShouldVirtualize }\r\n                  />\r\n                ) :\r\n                this._onRenderGroup(renderCount)\r\n            )\r\n        }\r\n        {\r\n          group && group.isCollapsed ?\r\n            null :\r\n            isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)\r\n        }\r\n        { onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public forceUpdate() {\r\n    super.forceUpdate();\r\n    this.forceListUpdate();\r\n  }\r\n\r\n  public forceListUpdate() {\r\n    const { group } = this.props;\r\n\r\n    if (this._list.current) {\r\n      this._list.current.forceUpdate();\r\n\r\n      if (group && group.children && group.children.length > 0) {\r\n        const subGroupCount = group.children.length;\r\n\r\n        for (let i = 0; i < subGroupCount; i++) {\r\n          const subGroup = this._list.current.refs['subGroup_' + String(i)] as GroupedListSection;\r\n\r\n          if (subGroup) {\r\n            subGroup.forceListUpdate();\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      const subGroup = this.refs['subGroup_' + String(0)] as GroupedListSection;\r\n\r\n      if (subGroup) {\r\n        subGroup.forceListUpdate();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _onRenderGroupHeader = (props: IGroupDividerProps): JSX.Element => {\r\n    return <GroupHeader { ...props } />;\r\n  }\r\n\r\n  private _onRenderGroupShowAll = (props: IGroupDividerProps): JSX.Element => {\r\n    return <GroupShowAll { ...props } />;\r\n  }\r\n\r\n  private _onRenderGroupFooter = (props: IGroupDividerProps): JSX.Element => {\r\n    return <GroupFooter { ...props } />;\r\n  }\r\n\r\n  private _onSelectionChange(): void {\r\n    const { group, selection } = this.props;\r\n    const isSelected = selection!.isRangeSelected(group!.startIndex, group!.count);\r\n\r\n    if (isSelected !== this.state.isSelected) {\r\n      this.setState({ isSelected });\r\n    }\r\n  }\r\n\r\n  private _onRenderGroupCell(onRenderCell: any, groupNestingDepth: number | undefined)\r\n    : (item: any, itemIndex: number | undefined) => React.ReactNode {\r\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\r\n      return onRenderCell(groupNestingDepth, item, itemIndex);\r\n    };\r\n  }\r\n\r\n  private _onRenderGroup(renderCount: number): JSX.Element {\r\n    const {\r\n      group,\r\n      items,\r\n      onRenderCell,\r\n      listProps,\r\n      groupNestingDepth,\r\n      onShouldVirtualize\r\n    } = this.props;\r\n    const count = group ? group.count : items.length;\r\n    const startIndex = group ? group.startIndex : 0;\r\n\r\n    return (\r\n      <List\r\n        items={ items }\r\n        onRenderCell={ this._onRenderGroupCell(onRenderCell, groupNestingDepth) }\r\n        ref={ this._list }\r\n        renderCount={ Math.min(count, renderCount) }\r\n        startIndex={ startIndex }\r\n        onShouldVirtualize={ onShouldVirtualize }\r\n        { ...listProps }\r\n      />\r\n    );\r\n  }\r\n\r\n  private _renderSubGroup = (subGroup: any, subGroupIndex: number): JSX.Element | null => {\r\n    const {\r\n      dragDropEvents,\r\n      dragDropHelper,\r\n      eventsToRegister,\r\n      getGroupItemLimit,\r\n      groupNestingDepth,\r\n      items,\r\n      headerProps,\r\n      showAllProps,\r\n      footerProps,\r\n      listProps,\r\n      onRenderCell,\r\n      selection,\r\n      selectionMode,\r\n      viewport,\r\n      onRenderGroupHeader,\r\n      onRenderGroupShowAll,\r\n      onRenderGroupFooter,\r\n      onShouldVirtualize\r\n    } = this.props;\r\n\r\n    return (!subGroup || subGroup.count > 0) ? (\r\n      <GroupedListSection\r\n        ref={ 'subGroup_' + subGroupIndex }\r\n        key={ this._getGroupKey(subGroup, subGroupIndex) }\r\n        dragDropEvents={ dragDropEvents }\r\n        dragDropHelper={ dragDropHelper }\r\n        eventsToRegister={ eventsToRegister }\r\n        footerProps={ footerProps }\r\n        getGroupItemLimit={ getGroupItemLimit }\r\n        group={ subGroup }\r\n        groupIndex={ subGroupIndex }\r\n        groupNestingDepth={ groupNestingDepth }\r\n        headerProps={ headerProps }\r\n        items={ items }\r\n        listProps={ listProps }\r\n        onRenderCell={ onRenderCell }\r\n        selection={ selection }\r\n        selectionMode={ selectionMode }\r\n        showAllProps={ showAllProps }\r\n        viewport={ viewport }\r\n        onRenderGroupHeader={ onRenderGroupHeader }\r\n        onRenderGroupShowAll={ onRenderGroupShowAll }\r\n        onRenderGroupFooter={ onRenderGroupFooter }\r\n        onShouldVirtualize={ onShouldVirtualize }\r\n      />\r\n    ) : null;\r\n  }\r\n\r\n  private _returnOne(): number {\r\n    return 1;\r\n  }\r\n\r\n  private _getGroupKey(group: any, index: number): string {\r\n    return 'group-' + ((group && group.key) ? group.key : String(group.level) + String(index));\r\n  }\r\n\r\n  /**\r\n   * collect all the data we need to enable drag/drop for a group\r\n   */\r\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\r\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\r\n    const options = {\r\n      eventMap: eventsToRegister,\r\n      selectionIndex: -1,\r\n      context: { data: group, index: groupIndex, isGroup: true },\r\n      canDrag: () => false, // cannot drag groups\r\n      canDrop: dragDropEvents!.canDrop,\r\n      updateDropState: this._updateDroppingState\r\n    };\r\n    return options as IDragDropOptions;\r\n  }\r\n\r\n  /**\r\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\r\n   *\r\n   * @private\r\n   * @param {boolean} newValue (new isDropping state value)\r\n   * @param {DragEvent} event (the event trigger dropping state change which can be dragenter, dragleave etc)\r\n   */\r\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\r\n    const { isDropping } = this.state;\r\n    const { dragDropEvents } = this.props;\r\n\r\n    if (!isDropping) {\r\n      if (dragDropEvents && dragDropEvents.onDragLeave) {\r\n        dragDropEvents.onDragLeave!(event, undefined);\r\n      }\r\n    } else {\r\n      if (dragDropEvents && dragDropEvents.onDragEnter) {\r\n        dragDropEvents.onDragEnter(event, undefined);\r\n      }\r\n    }\r\n\r\n    if (isDropping !== newIsDropping) {\r\n      this.setState({ isDropping: newIsDropping });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the correct css class to reflect the dropping state for a given group\r\n   *\r\n   * If the group is the current drop target, return the default dropping class name\r\n   * Otherwise, return '';\r\n   *\r\n   */\r\n  private _getDroppingClassName(): string {\r\n    let { isDropping } = this.state;\r\n    const { group } = this.props;\r\n\r\n    isDropping = !!(group && isDropping);\r\n\r\n    return css(\r\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\r\n      isDropping && styles.groupIsDropping\r\n    );\r\n  }\r\n}\r\n"]}