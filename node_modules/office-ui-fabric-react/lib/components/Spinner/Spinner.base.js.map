{"version":3,"file":"Spinner.base.js","sourceRoot":"../src/","sources":["components/Spinner/Spinner.base.tsx"],"names":[],"mappings":";;;AAAA,6BAA+B;AAC/B,iDAA8G;AAC9G,6CAOyB;AAEzB,IAAM,aAAa,GAAG,8BAAkB,EAAsC,CAAC;AAG/E;IAAiC,uCAAiC;IAAlE;;IAoDA,CAAC;IA7CQ,4BAAM,GAAb;QACQ,IAAA,eASQ,EARZ,cAAI,EACJ,cAAI,EACJ,wBAAS,EACT,sBAAQ,EACR,wBAAS,EACT,gBAAK,EACL,gBAAK,EACL,wBAAS,CACI;QACf,IAAM,aAAa,GAAG,SAAS,IAAI,KAAK,CAAC;QACzC,IAAM,WAAW,GAAG,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,yBAAa,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;QAExE,uIAAuI;QACvI,kIAAkI;QAClI,IAAI,SAAS,GAAG,IAAI,CAAC;QACrB,IAAI,SAAS,KAAK,SAAS,IAAI,IAAI,KAAK,SAAS,EAAE;YACjD,SAAS,GAAG,IAAI,KAAK,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,KAAK,CAAC,CAAC,CAAC,2BAAW,CAAC,MAAM,CAAC;SACjF;QAED,IAAM,UAAU,GAAG,aAAa,CAAC,SAAU,EAAE;YAC3C,KAAK,EAAE,KAAM;YACb,IAAI,EAAE,SAAS;YACf,SAAS,WAAA;SACV,CAAC,CAAC;QAEH,OAAO,CACL,gDAAU,WAAW,IAAG,SAAS,EAAG,UAAU,CAAC,IAAI;YACjD,6BAAK,SAAS,EAAG,UAAU,CAAC,MAAM,GAAK;YAErC,KAAK,IAAI,6BAAK,SAAS,EAAG,UAAU,CAAC,KAAK,IAAK,KAAK,CAAQ;YAG5D,aAAa;gBACb,6BAAK,IAAI,EAAC,QAAQ,eAAa,QAAQ;oBACrC,oBAAC,yBAAa;wBACZ,6BAAK,SAAS,EAAG,UAAU,CAAC,gBAAgB,IAAK,aAAa,CAAQ,CACxD,CACZ,CAEJ,CACP,CAAC;IACJ,CAAC;IAhDa,wBAAY,GAAkB;QAC1C,IAAI,EAAE,2BAAW,CAAC,MAAM;QACxB,QAAQ,EAAE,QAAQ;KACnB,CAAC;IALS,WAAW;QADvB,wBAAY,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC;OACtB,WAAW,CAoDvB;IAAD,kBAAC;CAAA,AApDD,CAAiC,yBAAa,GAoD7C;AApDY,kCAAW","sourcesContent":["import * as React from 'react';\r\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\r\nimport {\r\n  BaseComponent,\r\n  customizable,\r\n  classNamesFunction,\r\n  DelayedRender,\r\n  getNativeProps,\r\n  divProperties\r\n} from '../../Utilities';\r\n\r\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\r\n\r\n@customizable('Spinner', ['theme'])\r\nexport class SpinnerBase extends BaseComponent<ISpinnerProps, any> {\r\n\r\n  public static defaultProps: ISpinnerProps = {\r\n    size: SpinnerSize.medium,\r\n    ariaLive: 'polite'\r\n  };\r\n\r\n  public render() {\r\n    const {\r\n      type,\r\n      size,\r\n      ariaLabel,\r\n      ariaLive,\r\n      getStyles,\r\n      label,\r\n      theme,\r\n      className\r\n    } = this.props;\r\n    const statusMessage = ariaLabel || label;\r\n    const nativeProps = getNativeProps(this.props, divProperties, ['size']);\r\n\r\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the ISpinnerStyleProps,\r\n    // we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType finally goes away we should delete this.\r\n    let styleSize = size;\r\n    if (styleSize === undefined && type !== undefined) {\r\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\r\n    }\r\n\r\n    const classNames = getClassNames(getStyles!, {\r\n      theme: theme!,\r\n      size: styleSize,\r\n      className\r\n    });\r\n\r\n    return (\r\n      <div { ...nativeProps } className={ classNames.root }>\r\n        <div className={ classNames.circle } />\r\n        {\r\n          label && <div className={ classNames.label }>{ label }</div>\r\n        }\r\n        {\r\n          statusMessage &&\r\n          <div role='status' aria-live={ ariaLive }>\r\n            <DelayedRender>\r\n              <div className={ classNames.screenReaderText }>{ statusMessage }</div>\r\n            </DelayedRender>\r\n          </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n}"]}