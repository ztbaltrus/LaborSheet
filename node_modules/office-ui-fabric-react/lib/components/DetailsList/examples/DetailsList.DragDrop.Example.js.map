{"version":3,"file":"DetailsList.DragDrop.Example.js","sourceRoot":"../src/","sources":["components/DetailsList/examples/DetailsList.DragDrop.Example.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Link } from 'office-ui-fabric-react/lib/Link';\r\nimport { DetailsList, Selection } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { MarqueeSelection } from 'office-ui-fabric-react/lib/MarqueeSelection';\r\nimport { IColumn, buildColumns } from 'office-ui-fabric-react/lib/DetailsList';\r\nimport { IDragDropEvents, IDragDropContext } from 'office-ui-fabric-react/lib/utilities/dragdrop/interfaces';\r\nimport './DetailsList.DragDrop.Example.scss';\r\nimport { IColumnReorderOptions } from 'office-ui-fabric-react/lib/components/DetailsList';\r\nimport { createListItems } from '@uifabric/example-app-base';\r\nimport { TextField } from 'office-ui-fabric-react/lib/TextField';\r\nimport { Toggle } from 'office-ui-fabric-react/lib/Toggle';\r\n\r\nlet _draggedItem: any = null;\r\nlet _draggedIndex = -1;\r\nlet _items: any[];\r\nlet _columns: IColumn[];\r\nexport class DetailsListDragDropExample extends React.Component<\r\n  {},\r\n  {\r\n    items: {}[];\r\n    selectionDetails?: string;\r\n    columns: IColumn[];\r\n    isColumnReorderEnabled: boolean;\r\n    frozenColumnCountFromStart: string;\r\n    frozenColumnCountFromEnd: string;\r\n  }\r\n  > {\r\n  private _selection: Selection;\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this._onRenderItemColumn = this._onRenderItemColumn.bind(this);\r\n    this._handleColumnReorder = this._handleColumnReorder.bind(this);\r\n    this._getColumnReorderOptions = this._getColumnReorderOptions.bind(this);\r\n    this._onChangeColumnReorderEnabled = this._onChangeColumnReorderEnabled.bind(this);\r\n    this._onChangeStartCountText = this._onChangeStartCountText.bind(this);\r\n    this._onChangeEndCountText = this._onChangeEndCountText.bind(this);\r\n\r\n    this._selection = new Selection();\r\n\r\n    _items = _items || createListItems(10, 0);\r\n    _columns = buildColumns(_items, true);\r\n\r\n    this.state = {\r\n      items: createListItems(10),\r\n      columns: _columns,\r\n      isColumnReorderEnabled: false,\r\n      frozenColumnCountFromStart: '1',\r\n      frozenColumnCountFromEnd: '0'\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    const {\r\n      items,\r\n      selectionDetails,\r\n      columns,\r\n      isColumnReorderEnabled,\r\n      frozenColumnCountFromStart,\r\n      frozenColumnCountFromEnd\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className={ 'detailsListDragDropExample' }>\r\n        <Toggle\r\n          label={ 'Enable Column Reorder' }\r\n          checked={ isColumnReorderEnabled }\r\n          onChanged={ this._onChangeColumnReorderEnabled }\r\n          onText={ 'Enabled' }\r\n          offText={ 'Disabled' }\r\n        />\r\n        <TextField\r\n          label={ 'Number of Left frozen columns:' }\r\n          onGetErrorMessage={ this._validateNumber }\r\n          value={ frozenColumnCountFromStart }\r\n          onChanged={ this._onChangeStartCountText }\r\n        />\r\n        <TextField\r\n          label={ 'Number of Right frozen columns:' }\r\n          onGetErrorMessage={ this._validateNumber }\r\n          value={ frozenColumnCountFromEnd }\r\n          onChanged={ this._onChangeEndCountText }\r\n        />\r\n        <div>{ selectionDetails }</div>\r\n        <MarqueeSelection selection={ this._selection }>\r\n          <DetailsList\r\n            setKey={ 'items' }\r\n            items={ items }\r\n            columns={ columns }\r\n            selection={ this._selection }\r\n            selectionPreservedOnEmptyClick={ true }\r\n            onItemInvoked={ this._onItemInvoked }\r\n            onRenderItemColumn={ this._onRenderItemColumn }\r\n            dragDropEvents={ this._getDragDropEvents() }\r\n            columnReorderOptions={ this.state.isColumnReorderEnabled ? this._getColumnReorderOptions() : undefined }\r\n          />\r\n        </MarqueeSelection>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _handleColumnReorder(draggedIndex: number, targetIndex: number): void {\r\n    const draggedItems = this.state.columns[draggedIndex];\r\n    const newColumns: IColumn[] = [...this.state.columns];\r\n\r\n    // insert before the dropped item\r\n    newColumns.splice(draggedIndex, 1);\r\n    newColumns.splice(targetIndex, 0, draggedItems);\r\n    this.setState({ columns: newColumns });\r\n  }\r\n\r\n  private _getColumnReorderOptions(): IColumnReorderOptions {\r\n    return {\r\n      frozenColumnCountFromStart: !isNaN(Number(this.state.frozenColumnCountFromStart))\r\n        ? parseInt(this.state.frozenColumnCountFromStart, 10)\r\n        : undefined,\r\n      frozenColumnCountFromEnd: !isNaN(Number(this.state.frozenColumnCountFromEnd))\r\n        ? parseInt(this.state.frozenColumnCountFromEnd, 10)\r\n        : undefined,\r\n      handleColumnReorder: this._handleColumnReorder\r\n    };\r\n  }\r\n\r\n  private _validateNumber(value: string): string {\r\n    return isNaN(Number(value)) ? `The value should be a number, actual is ${value}.` : '';\r\n  }\r\n\r\n  private _onChangeStartCountText(text: any): void {\r\n    this.setState({ frozenColumnCountFromStart: text });\r\n  }\r\n\r\n  private _onChangeEndCountText(text: any): void {\r\n    this.setState({ frozenColumnCountFromEnd: text });\r\n  }\r\n\r\n  private _onChangeColumnReorderEnabled(checked: boolean): void {\r\n    this.setState({ isColumnReorderEnabled: checked });\r\n  }\r\n\r\n  private _getDragDropEvents(): IDragDropEvents {\r\n    return {\r\n      canDrop: (dropContext?: IDragDropContext, dragContext?: IDragDropContext) => { return true; },\r\n      canDrag: (item?: any) => { return true; },\r\n      onDragEnter: (item?: any, event?: DragEvent) => { return 'dragEnter'; }, // return string is the css classes that will be added to the entering element.\r\n      onDragLeave: (item?: any, event?: DragEvent) => { return; },\r\n      onDrop: (item?: any, event?: DragEvent) => {\r\n        if (_draggedItem) {\r\n          this._insertBeforeItem(item);\r\n        }\r\n      },\r\n      onDragStart: (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent) => {\r\n        _draggedItem = item;\r\n        _draggedIndex = itemIndex!;\r\n      },\r\n      onDragEnd: (item?: any, event?: DragEvent) => {\r\n        _draggedItem = null;\r\n        _draggedIndex = -1;\r\n      },\r\n    };\r\n  }\r\n\r\n  private _onItemInvoked(item: any): void {\r\n    alert(`Item invoked: ${item.name}`);\r\n  }\r\n\r\n  private _onRenderItemColumn(item: any, index: number, column: IColumn): JSX.Element {\r\n    if (column.key === 'name') {\r\n      return <Link data-selection-invoke={ true }>{ item[column.key] }</Link>;\r\n    }\r\n\r\n    return item[column.key];\r\n  }\r\n\r\n  private _insertBeforeItem(item: any): void {\r\n    const draggedItems = this._selection.isIndexSelected(_draggedIndex) ? this._selection.getSelection() : [_draggedItem];\r\n\r\n    const items: any[] = this.state.items.filter((i: number) => draggedItems.indexOf(i) === -1);\r\n    let insertIndex = items.indexOf(item);\r\n\r\n    // if dragging/dropping on itself, index will be 0.\r\n    if (insertIndex === -1) {\r\n      insertIndex = 0;\r\n    }\r\n\r\n    items.splice(insertIndex, 0, ...draggedItems);\r\n\r\n    this.setState({ items: items });\r\n  }\r\n}\r\n"]}