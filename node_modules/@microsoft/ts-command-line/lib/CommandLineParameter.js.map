{"version":3,"sources":["CommandLineParameter.ts"],"names":[],"mappings":"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","file":"CommandLineParameter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  IBaseCommandLineDefinition,\r\n  ICommandLineFlagDefinition,\r\n  ICommandLineStringDefinition,\r\n  ICommandLineStringListDefinition,\r\n  ICommandLineIntegerDefinition,\r\n  ICommandLineChoiceDefinition,\r\n  IBaseCommandLineDefinitionWithArgument\r\n} from './CommandLineDefinition';\r\n\r\n/**\r\n * Identifies the kind of a CommandLineParameter.\r\n * @public\r\n */\r\nexport enum CommandLineParameterKind {\r\n  /** Indicates a CommandLineChoiceParameter */\r\n  Choice,\r\n  /** Indicates a CommandLineFlagParameter */\r\n  Flag,\r\n  /** Indicates a CommandLineIntegerParameter */\r\n  Integer,\r\n  /** Indicates a CommandLineStringParameter */\r\n  String,\r\n  /** Indicates a CommandLineStringListParameter */\r\n  StringList\r\n}\r\n\r\n/**\r\n * The base class for the various command-line parameter types.\r\n * @public\r\n */\r\nexport abstract class CommandLineParameter {\r\n  // Example: \"--do-something\"\r\n  private static _longNameRegExp: RegExp = /^-(-[a-z0-9]+)+$/;\r\n\r\n  // Example: \"-d\"\r\n  private static _shortNameRegExp: RegExp = /^-[a-zA-Z]$/;\r\n\r\n  // \"Environment variable names used by the utilities in the Shell and Utilities volume of\r\n  // IEEE Std 1003.1-2001 consist solely of uppercase letters, digits, and the '_' (underscore)\r\n  // from the characters defined in Portable Character Set and do not begin with a digit.\"\r\n  // Example: \"THE_SETTING\"\r\n  private static _environmentVariableRegExp: RegExp = /^[A-Z_][A-Z0-9_]*$/;\r\n\r\n  /**\r\n   * A unique internal key used to retrieve the value from the parser's dictionary.\r\n   * @internal\r\n   */\r\n  public _parserKey: string;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.parameterLongName} */\r\n  public readonly longName: string;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.parameterShortName} */\r\n  public readonly shortName: string | undefined;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.description} */\r\n  public readonly description: string;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.required} */\r\n  public readonly required: boolean;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinition.environmentVariable} */\r\n  public readonly environmentVariable: string | undefined;\r\n\r\n  /** @internal */\r\n  constructor(definition: IBaseCommandLineDefinition) {\r\n    this.longName = definition.parameterLongName;\r\n    this.shortName = definition.parameterShortName;\r\n    this.description = definition.description;\r\n    this.required = !!definition.required;\r\n    this.environmentVariable = definition.environmentVariable;\r\n\r\n    if (!CommandLineParameter._longNameRegExp.test(this.longName)) {\r\n      throw new Error(`Invalid name: \"${this.longName}\". The parameter long name must be`\r\n        + ` lower-case and use dash delimiters (e.g. \"--do-a-thing\")`);\r\n    }\r\n\r\n    if (this.shortName) {\r\n      if (!CommandLineParameter._shortNameRegExp.test(this.shortName)) {\r\n        throw new Error(`Invalid name: \"${this.shortName}\". The parameter short name must be`\r\n          + ` a dash followed by a single upper-case or lower-case letter (e.g. \"-a\")`);\r\n      }\r\n    }\r\n\r\n    if (this.environmentVariable) {\r\n      if (this.required) {\r\n        throw new Error(`An \"environmentVariable\" cannot be specified for \"${this.longName}\"`\r\n          + ` because it is a required parameter`);\r\n      }\r\n\r\n      if (!CommandLineParameter._environmentVariableRegExp.test(this.environmentVariable)) {\r\n        throw new Error(`Invalid environment variable name: \"${this.environmentVariable}\". The name must`\r\n          + ` consist only of upper-case letters, numbers, and underscores. It may not start with a number.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called internally by CommandLineParameterProvider._processParsedData()\r\n   * @internal\r\n   */\r\n  public abstract _setValue(data: any): void; // tslint:disable-line:no-any\r\n\r\n  /**\r\n   * Returns additional text used by the help formatter.\r\n   * @internal\r\n   */\r\n  public _getSupplementaryNotes(supplementaryNotes: string[]): void { // virtual\r\n    if (this.environmentVariable !== undefined) {\r\n      supplementaryNotes.push('This parameter may alternatively specified via the ' + this.environmentVariable\r\n      + ' environment variable.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Indicates the type of parameter.\r\n   */\r\n  public abstract get kind(): CommandLineParameterKind;\r\n\r\n  /**\r\n   * Append the parsed values to the provided string array.\r\n   * @remarks\r\n   * Sometimes a command line parameter is not used directly, but instead gets passed through to another\r\n   * tool that will use it.  For example if our parameter comes in as \"--max-count 3\", then we might want to\r\n   * call `child_process.spawn()` and append [\"--max-count\", \"3\"] to the args array for that tool.\r\n   * appendToArgList() appends zero or more strings to the provided array, based on the input command-line\r\n   * that we parsed.\r\n   *\r\n   * If the parameter was omitted from our command-line and has no default value, then\r\n   * nothing will be appended.  If the short name was used, the long name will be appended instead.\r\n   * @param argList - the parsed strings will be appended to this string array\r\n   */\r\n  public abstract appendToArgList(argList: string[]): void;\r\n\r\n  /**\r\n   * Internal usage only.  Used to report unexpected output from the argparse library.\r\n   */\r\n  protected reportInvalidData(data: any): never { // tslint:disable-line:no-any\r\n    throw new Error(`Unexpected data object for parameter \"${this.longName}\": `\r\n      + JSON.stringify(data));\r\n  }\r\n\r\n  protected validateDefaultValue(hasDefaultValue: boolean): void {\r\n    if (this.required && hasDefaultValue) {\r\n      // If a parameter is \"required\", then the user understands that they always need to\r\n      // specify a value for this parameter (either via the command line or via an environment variable).\r\n      // It would be confusing to allow a default value that sometimes allows the \"required\" parameter\r\n      // to be omitted.  If you sometimes don't have a suitable default value, then the better approach\r\n      // is to throw a custom error explaining why the parameter is required in that case.\r\n      throw new Error(`A default value cannot be specified for \"${this.longName}\"`\r\n        + ` because it is a \"required\" parameter`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The common base class for parameters types that receive an argument.\r\n *\r\n * @remarks\r\n * An argument is an accompanying command-line token, such as \"123\" in the\r\n * example \"--max-count 123\".\r\n * @public\r\n */\r\nexport abstract class CommandLineParameterWithArgument extends CommandLineParameter {\r\n  // Matches the first character that *isn't* part of a valid upper-case argument name such as \"URL_2\"\r\n  private static _invalidArgumentNameRegExp: RegExp = /[^A-Z_0-9]/;\r\n\r\n  /** {@inheritdoc IBaseCommandLineDefinitionWithArgument.argumentName} */\r\n  public readonly argumentName: string;\r\n\r\n  /** @internal */\r\n  constructor(definition: IBaseCommandLineDefinitionWithArgument) {\r\n    super(definition);\r\n\r\n    if (definition.argumentName === '') {\r\n      throw new Error('The argument name cannot be an empty string. (For the default name, specify undefined.)');\r\n    }\r\n    if (definition.argumentName.toUpperCase() !== definition.argumentName) {\r\n      throw new Error(`Invalid name: \"${definition.argumentName}\". The argument name must be all upper case.`);\r\n    }\r\n    const match: RegExpMatchArray | null = definition.argumentName.match(\r\n      CommandLineParameterWithArgument._invalidArgumentNameRegExp);\r\n    if (match) {\r\n      throw new Error(`The argument name \"${definition.argumentName}\" contains an invalid character \"${match[0]}\".`\r\n        + ` Only upper-case letters, numbers, and underscores are allowed.`);\r\n    }\r\n    this.argumentName = definition.argumentName;\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineChoiceParameter}.\r\n * @public\r\n */\r\nexport class CommandLineChoiceParameter extends CommandLineParameter {\r\n  /** {@inheritdoc ICommandLineChoiceDefinition.alternatives} */\r\n  public readonly alternatives: ReadonlyArray<string>;\r\n\r\n  /** {@inheritdoc ICommandLineStringDefinition.defaultValue} */\r\n  public readonly defaultValue: string | undefined;\r\n\r\n  private _value: string | undefined = undefined;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineChoiceDefinition) {\r\n    super(definition);\r\n\r\n    if (definition.alternatives.length <= 1) {\r\n      throw new Error(`When defining a choice parameter, the alternatives list must contain at least one value.`);\r\n    }\r\n    if (definition.defaultValue && definition.alternatives.indexOf(definition.defaultValue) === -1) {\r\n      throw new Error(`The specified default value \"${definition.defaultValue}\"`\r\n        + ` is not one of the available options: ${definition.alternatives.toString()}`);\r\n    }\r\n\r\n    this.alternatives = definition.alternatives;\r\n    this.defaultValue = definition.defaultValue;\r\n    this.validateDefaultValue(!!this.defaultValue);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Choice;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (typeof data !== 'string') {\r\n        this.reportInvalidData(data);\r\n      }\r\n      this._value = data;\r\n      return;\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined && environmentValue !== '') {\r\n        if (this.alternatives.indexOf(environmentValue) < 0) {\r\n          const choices: string = '\"' + this.alternatives.join('\", \"') + '\"';\r\n          throw new Error(`Invalid value \"${environmentValue}\" for the environment variable`\r\n            + ` ${this.environmentVariable}.  Valid choices are: ${choices}`);\r\n        }\r\n        this._value = environmentValue;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.defaultValue !== undefined) {\r\n      this._value = this.defaultValue;\r\n      return;\r\n    }\r\n\r\n    this._value = undefined;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._getSupplementaryNotes}\r\n   * @internal\r\n   */\r\n  public _getSupplementaryNotes(supplementaryNotes: string[]): void { // virtual\r\n    super._getSupplementaryNotes(supplementaryNotes);\r\n    if (this.defaultValue !== undefined) {\r\n      supplementaryNotes.push(`The default value is \"${this.defaultValue}\".`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the argument value for a choice parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be `undefined` if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this._value;\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.value !== undefined) {\r\n      argList.push(this.longName);\r\n      argList.push(this.value);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineFlagParameter}.\r\n * @public\r\n */\r\nexport class CommandLineFlagParameter extends CommandLineParameter {\r\n  private _value: boolean = false;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineFlagDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Flag;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (typeof data !== 'boolean') {\r\n        this.reportInvalidData(data);\r\n      }\r\n      this._value = data;\r\n      return;\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined && environmentValue !== '') {\r\n        if (environmentValue !== '0' && environmentValue !== '1') {\r\n          throw new Error(`Invalid value \"${environmentValue}\" for the environment variable`\r\n            + ` ${this.environmentVariable}.  Valid choices are 0 or 1.`);\r\n        }\r\n        this._value = environmentValue === '1';\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._value = false;\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean indicating whether the parameter was included in the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be false if the command-line has not been parsed yet,\r\n   * or if the flag was not used.\r\n   */\r\n  public get value(): boolean {\r\n    return this._value;\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.value) {\r\n      argList.push(this.longName);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineIntegerParameter}.\r\n * @public\r\n */\r\nexport class CommandLineIntegerParameter extends CommandLineParameterWithArgument {\r\n  /** {@inheritdoc ICommandLineStringDefinition.defaultValue} */\r\n  public readonly defaultValue: number | undefined;\r\n\r\n  private _value: number | undefined = undefined;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineIntegerDefinition) {\r\n    super(definition);\r\n    this.defaultValue = definition.defaultValue;\r\n    this.validateDefaultValue(!!this.defaultValue);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.Integer;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (typeof data !== 'number') {\r\n        this.reportInvalidData(data);\r\n      }\r\n      this._value = data;\r\n      return;\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined && environmentValue !== '') {\r\n        const parsed: number = parseInt(environmentValue, 10);\r\n        if (isNaN(parsed) || environmentValue.indexOf('.') >= 0) {\r\n          throw new Error(`Invalid value \"${environmentValue}\" for the environment variable`\r\n            + ` ${this.environmentVariable}.  It must be an integer value.`);\r\n        }\r\n        this._value = parsed;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.defaultValue !== undefined) {\r\n      this._value = this.defaultValue;\r\n      return;\r\n    }\r\n\r\n    this._value = undefined;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._getSupplementaryNotes}\r\n   * @internal\r\n   */\r\n  public _getSupplementaryNotes(supplementaryNotes: string[]): void { // virtual\r\n    super._getSupplementaryNotes(supplementaryNotes);\r\n    if (this.defaultValue !== undefined) {\r\n      supplementaryNotes.push(`The default value is ${this.defaultValue}.`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the argument value for an integer parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be undefined if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get value(): number | undefined {\r\n    return this._value;\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.value !== undefined) {\r\n      argList.push(this.longName);\r\n      argList.push(this.value.toString());\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineStringParameter}.\r\n * @public\r\n */\r\nexport class CommandLineStringParameter extends CommandLineParameterWithArgument {\r\n  /** {@inheritdoc ICommandLineStringDefinition.defaultValue} */\r\n  public readonly defaultValue: string | undefined;\r\n\r\n  private _value: string | undefined = undefined;\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineStringDefinition) {\r\n    super(definition);\r\n\r\n    this.defaultValue = definition.defaultValue;\r\n    this.validateDefaultValue(!!this.defaultValue);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.String;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (typeof data !== 'string') {\r\n        this.reportInvalidData(data);\r\n      }\r\n      this._value = data;\r\n      return;\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined) {\r\n        // NOTE: If the environment variable is defined as an empty string,\r\n        // here we will accept the empty string as our value.  (For number/flag we don't do that.)\r\n        this._value = environmentValue;\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (this.defaultValue !== undefined) {\r\n      this._value = this.defaultValue;\r\n      return;\r\n    }\r\n\r\n    this._value = undefined;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._getSupplementaryNotes}\r\n   * @internal\r\n   */\r\n  public _getSupplementaryNotes(supplementaryNotes: string[]): void { // virtual\r\n    super._getSupplementaryNotes(supplementaryNotes);\r\n    if (this.defaultValue !== undefined) {\r\n      if (this.defaultValue.length < 160) {\r\n        supplementaryNotes.push(`The default value is ${JSON.stringify(this.defaultValue)}.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the argument value for a string parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The return value will be undefined if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get value(): string | undefined {\r\n    return this._value;\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.value !== undefined) {\r\n      argList.push(this.longName);\r\n      argList.push(this.value);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * The data type returned by {@link CommandLineParameterProvider.defineStringListParameter}.\r\n * @public\r\n */\r\nexport class CommandLineStringListParameter extends CommandLineParameterWithArgument {\r\n  private _values: string[] = [];\r\n\r\n  /** @internal */\r\n  constructor(definition: ICommandLineStringListDefinition) {\r\n    super(definition);\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.kind} */\r\n  public get kind(): CommandLineParameterKind {\r\n    return CommandLineParameterKind.StringList;\r\n  }\r\n\r\n  /**\r\n   * {@inheritdoc CommandLineParameter._setValue}\r\n   * @internal\r\n   */\r\n  // tslint:disable-next-line:no-any\r\n  public _setValue(data: any): void { // abstract\r\n    if (data !== null && data !== undefined) {\r\n      if (!Array.isArray(data)) {\r\n        this.reportInvalidData(data);\r\n      }\r\n      for (const arrayItem of data) {\r\n        if (typeof(arrayItem) !== 'string') {\r\n          this.reportInvalidData(data);\r\n        }\r\n      }\r\n      this._values = data;\r\n      return;\r\n    }\r\n\r\n    if (this.environmentVariable !== undefined) {\r\n      // Try reading the environment variable\r\n      const environmentValue: string | undefined = process.env[this.environmentVariable];\r\n      if (environmentValue !== undefined) {\r\n        // NOTE: If the environment variable is defined as an empty string,\r\n        // here we will accept the empty string as our value.  (For number/flag we don't do that.)\r\n\r\n        // In the current implementation, the environment variable for a \"string list\" can only\r\n        // store a single item.  If we wanted to allow multiple items (and still have a conventional-seeming\r\n        // environment), we would ask the caller to provide an appropriate delimiter.  Getting involved\r\n        // with escaping here seems unwise, since there are so many shell escaping mechanisms that could\r\n        // potentially confuse the experience.\r\n        this._values = [ environmentValue ];\r\n        return;\r\n      }\r\n    }\r\n\r\n    // (No default value for string lists)\r\n\r\n    this._values = [];\r\n  }\r\n\r\n  /**\r\n   * Returns the string arguments for a string list parameter that was parsed from the command line.\r\n   *\r\n   * @remarks\r\n   * The array will be empty if the command-line has not been parsed yet,\r\n   * or if the parameter was omitted and has no default value.\r\n   */\r\n  public get values(): ReadonlyArray<string> {\r\n    return this._values;\r\n  }\r\n\r\n  /** {@inheritdoc CommandLineParameter.appendToArgList} @override */\r\n  public appendToArgList(argList: string[]): void {\r\n    if (this.values.length > 0) {\r\n      for (const value of this.values) {\r\n        argList.push(this.longName);\r\n        argList.push(value);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}