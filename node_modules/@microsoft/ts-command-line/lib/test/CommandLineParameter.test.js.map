{"version":3,"sources":["test/CommandLineParameter.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AAIjC,0EAAuE;AACvE,0EAAuE;AAEvE;IACE,MAAM,iBAAiB,GAA6B,IAAI,mDAAwB,CAC9E;QACE,YAAY,EAAE,SAAS;QACvB,eAAe,EAAE,oBAAoB;KACtC,CACF,CAAC;IACF,iBAAiB,CAAC,mBAAmB,CAAC;QACpC,iBAAiB,EAAE,eAAe;QAClC,kBAAkB,EAAE,IAAI;QACxB,WAAW,EAAE,iCAAiC;KAC/C,CAAC,CAAC;IAEH,MAAM,MAAM,GAA6B,IAAI,mDAAwB,CAAC;QACpE,UAAU,EAAE,QAAQ;QACpB,OAAO,EAAE,cAAc;QACvB,aAAa,EAAE,sBAAsB;KACtC,CAAC,CAAC;IACH,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAEpC,SAAS;IACT,MAAM,CAAC,qBAAqB,CAAC;QAC3B,iBAAiB,EAAE,UAAU;QAC7B,kBAAkB,EAAE,IAAI;QACxB,WAAW,EAAE,UAAU;QACvB,YAAY,EAAE,CAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAE;QAClD,mBAAmB,EAAE,YAAY;KAClC,CAAC,CAAC;IACH,MAAM,CAAC,qBAAqB,CAAC;QAC3B,iBAAiB,EAAE,uBAAuB;QAC1C,WAAW,EAAE,yBAAyB;QACtC,YAAY,EAAE,CAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,CAAE;QAClD,mBAAmB,EAAE,YAAY;QACjC,YAAY,EAAE,SAAS;KACxB,CAAC,CAAC;IAEH,OAAO;IACP,MAAM,CAAC,mBAAmB,CAAC;QACzB,iBAAiB,EAAE,QAAQ;QAC3B,kBAAkB,EAAE,IAAI;QACxB,WAAW,EAAE,QAAQ;QACrB,mBAAmB,EAAE,UAAU;KAChC,CAAC,CAAC;IAEH,UAAU;IACV,MAAM,CAAC,sBAAsB,CAAC;QAC5B,iBAAiB,EAAE,WAAW;QAC9B,kBAAkB,EAAE,IAAI;QACxB,WAAW,EAAE,YAAY;QACzB,YAAY,EAAE,QAAQ;QACtB,mBAAmB,EAAE,aAAa;KACnC,CAAC,CAAC;IACH,MAAM,CAAC,sBAAsB,CAAC;QAC5B,iBAAiB,EAAE,wBAAwB;QAC3C,WAAW,EAAE,2BAA2B;QACxC,YAAY,EAAE,QAAQ;QACtB,mBAAmB,EAAE,aAAa;QAClC,YAAY,EAAE,GAAG;KAClB,CAAC,CAAC;IACH,MAAM,CAAC,sBAAsB,CAAC;QAC5B,iBAAiB,EAAE,oBAAoB;QACvC,WAAW,EAAE,YAAY;QACzB,YAAY,EAAE,QAAQ;QACtB,QAAQ,EAAE,IAAI;KACf,CAAC,CAAC;IAEH,SAAS;IACT,MAAM,CAAC,qBAAqB,CAAC;QAC3B,iBAAiB,EAAE,UAAU;QAC7B,kBAAkB,EAAE,IAAI;QACxB,WAAW,EAAE,UAAU;QACvB,YAAY,EAAE,MAAM;QACpB,mBAAmB,EAAE,aAAa;KACnC,CAAC,CAAC;IACH,MAAM,CAAC,qBAAqB,CAAC;QAC3B,iBAAiB,EAAE,uBAAuB;QAC1C,WAAW,EAAE,yBAAyB;QACtC,YAAY,EAAE,MAAM;QACpB,mBAAmB,EAAE,aAAa;QAClC,YAAY,EAAE,KAAK;KACpB,CAAC,CAAC;IAEH,cAAc;IACd,MAAM,CAAC,yBAAyB,CAAC;QAC/B,iBAAiB,EAAE,eAAe;QAClC,kBAAkB,EAAE,IAAI;QACxB,WAAW,EAAE,eAAe;QAC5B,YAAY,EAAE,MAAM;QACpB,mBAAmB,EAAE,aAAa;KACnC,CAAC,CAAC;IACH,MAAM,CAAC,iBAAiB,CAAC;AAC3B,CAAC;AAED,yCAAyC,MAAU,EAAE,aAAuB;IAC1E,MAAM,cAAc,GAAO,EAAE,CAAC;IAE9B,GAAG,CAAC,CAAC,MAAM,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC;QACzC,cAAc,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;IACtD,CAAC;IACD,MAAM,CAAC,cAAc,CAAC,CAAC,eAAe,EAAE,CAAC;AAC3C,CAAC;AAED,MAAM,qBAAqB,GAAa;IACtC,aAAa;IACb,MAAM;IACN,UAAU;IACV,WAAW;IACX,OAAO;IACP,MAAM;IACN,cAAc;IACd,qBAAqB;IACrB,UAAU;IACV,cAAc;IACd,QAAQ;CACT,CAAC;AAEF,QAAQ,CAAC,sBAAsB,EAAE;IAC/B,EAAE,CAAC,wBAAwB,EAAE;QAC3B,MAAM,iBAAiB,GAAsB,YAAY,EAAE,CAAC;QAC5D,MAAM,QAAQ,GAAW,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC,CAAC;QAChF,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wBAAwB,EAAE;QAC3B,MAAM,iBAAiB,GAAsB,YAAY,EAAE,CAAC;QAC5D,MAAM,QAAQ,GAAW,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC;QACpG,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qCAAqC,EAAE;QACxC,MAAM,iBAAiB,GAAsB,YAAY,EAAE,CAAC;QAC5D,MAAM,MAAM,GAAsB,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QAExE,MAAM,IAAI,GAAa;YACrB,eAAe;YACf,QAAQ;YACR,UAAU,EAAE,KAAK;YACjB,QAAQ;YACR,WAAW,EAAE,KAAK;YAClB,oBAAoB,EAAE,KAAK;YAC3B,UAAU,EAAE,OAAO;YACnB,eAAe,EAAE,OAAO;YACxB,eAAe,EAAE,QAAQ;SAC1B,CAAC;QAEF,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;YAC1C,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEtD,+BAA+B,CAC7B,iBAAiB,CAAC,gBAAgB,CAAC,eAAe,CAAC,EACnD,qBAAqB,CACtB,CAAC;YAEF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,EACrC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,EAClD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EACjC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,EACvC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,EACpD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,EAChD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,EACrC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,EAClD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,sBAAsB,CAAC,eAAe,CAAC,EAC9C,qBAAqB,CACtB,CAAC;YAEF,MAAM,UAAU,GAAa,EAAE,CAAC;YAChC,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC1C,UAAU,CAAC,IAAI,CAAC,OAAO,SAAS,CAAC,QAAQ,cAAc,CAAC,CAAC;gBACzD,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YACxC,CAAC;YACD,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oCAAoC,EAAE;QACvC,MAAM,iBAAiB,GAAsB,YAAY,EAAE,CAAC;QAC5D,MAAM,MAAM,GAAsB,iBAAiB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxE,MAAM,IAAI,GAAa,CAAE,QAAQ,EAAE,oBAAoB,EAAE,KAAK,CAAC,CAAC;QAEhE,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;YAC1C,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAEtD,+BAA+B,CAC7B,iBAAiB,CAAC,gBAAgB,CAAC,eAAe,CAAC,EACnD,qBAAqB,CACtB,CAAC;YAEF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,EACrC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,EAClD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EACjC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,EACvC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,EACpD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,EAChD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,UAAU,CAAC,EACrC,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,EAClD,qBAAqB,CACtB,CAAC;YACF,+BAA+B,CAC7B,MAAM,CAAC,sBAAsB,CAAC,eAAe,CAAC,EAC9C,qBAAqB,CACtB,CAAC;YAEF,MAAM,UAAU,GAAa,EAAE,CAAC;YAChC,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC1C,UAAU,CAAC,IAAI,CAAC,OAAO,SAAS,CAAC,QAAQ,cAAc,CAAC,CAAC;gBACzD,SAAS,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YACxC,CAAC;YACD,MAAM,CAAC,UAAU,CAAC,CAAC,eAAe,EAAE,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"CommandLineParameter.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\n\r\nimport { CommandLineAction } from '../CommandLineAction';\r\nimport { CommandLineParser } from '../CommandLineParser';\r\nimport { DynamicCommandLineParser } from '../DynamicCommandLineParser';\r\nimport { DynamicCommandLineAction } from '../DynamicCommandLineAction';\r\n\r\nfunction createParser(): DynamicCommandLineParser {\r\n  const commandLineParser: DynamicCommandLineParser = new DynamicCommandLineParser(\r\n    {\r\n      toolFilename: 'example',\r\n      toolDescription: 'An example project'\r\n    }\r\n  );\r\n  commandLineParser.defineFlagParameter({\r\n    parameterLongName: '--global-flag',\r\n    parameterShortName: '-g',\r\n    description: 'A flag that affects all actions'\r\n  });\r\n\r\n  const action: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n    actionName: 'do-job',\r\n    summary: 'does the job',\r\n    documentation: 'a longer description'\r\n  });\r\n  commandLineParser.addAction(action);\r\n\r\n  // Choice\r\n  action.defineChoiceParameter({\r\n    parameterLongName: '--choice',\r\n    parameterShortName: '-c',\r\n    description: 'A choice',\r\n    alternatives: [ 'one', 'two', 'three', 'default' ],\r\n    environmentVariable: 'ENV_CHOICE'\r\n  });\r\n  action.defineChoiceParameter({\r\n    parameterLongName: '--choice-with-default',\r\n    description: 'A choice with a default',\r\n    alternatives: [ 'one', 'two', 'three', 'default' ],\r\n    environmentVariable: 'ENV_CHOICE',\r\n    defaultValue: 'default'\r\n  });\r\n\r\n  // Flag\r\n  action.defineFlagParameter({\r\n    parameterLongName: '--flag',\r\n    parameterShortName: '-f',\r\n    description: 'A flag',\r\n    environmentVariable: 'ENV_FLAG'\r\n  });\r\n\r\n  // Integer\r\n  action.defineIntegerParameter({\r\n    parameterLongName: '--integer',\r\n    parameterShortName: '-i',\r\n    description: 'An integer',\r\n    argumentName: 'NUMBER',\r\n    environmentVariable: 'ENV_INTEGER'\r\n  });\r\n  action.defineIntegerParameter({\r\n    parameterLongName: '--integer-with-default',\r\n    description: 'An integer with a default',\r\n    argumentName: 'NUMBER',\r\n    environmentVariable: 'ENV_INTEGER',\r\n    defaultValue: 123\r\n  });\r\n  action.defineIntegerParameter({\r\n    parameterLongName: '--integer-required',\r\n    description: 'An integer',\r\n    argumentName: 'NUMBER',\r\n    required: true\r\n  });\r\n\r\n  // String\r\n  action.defineStringParameter({\r\n    parameterLongName: '--string',\r\n    parameterShortName: '-s',\r\n    description: 'A string',\r\n    argumentName: 'TEXT',\r\n    environmentVariable: 'ENV_INTEGER'\r\n  });\r\n  action.defineStringParameter({\r\n    parameterLongName: '--string-with-default',\r\n    description: 'A string with a default',\r\n    argumentName: 'TEXT',\r\n    environmentVariable: 'ENV_INTEGER',\r\n    defaultValue: '123'\r\n  });\r\n\r\n  // String List\r\n  action.defineStringListParameter({\r\n    parameterLongName: '--string-list',\r\n    parameterShortName: '-l',\r\n    description: 'A string list',\r\n    argumentName: 'LIST',\r\n    environmentVariable: 'ENV_INTEGER'\r\n  });\r\n  return commandLineParser;\r\n}\r\n\r\nfunction expectPropertiesToMatchSnapshot(object: {}, propertyNames: string[]): void {\r\n  const snapshotObject: {} = {};\r\n\r\n  for (const propertyName of propertyNames) {\r\n    snapshotObject[propertyName] = object[propertyName];\r\n  }\r\n  expect(snapshotObject).toMatchSnapshot();\r\n}\r\n\r\nconst snapshotPropertyNames: string[] = [\r\n  'description',\r\n  'kind',\r\n  'longName',\r\n  'shortName',\r\n  'value',\r\n  'kind',\r\n  'argumentName',\r\n  'environmentVariable',\r\n  'required',\r\n  'defaultValue',\r\n  'values'\r\n];\r\n\r\ndescribe('CommandLineParameter', () => {\r\n  it('prints the global help', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const helpText: string = colors.stripColors(commandLineParser.renderHelpText());\r\n    expect(helpText).toMatchSnapshot();\r\n  });\r\n\r\n  it('prints the action help', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const helpText: string = colors.stripColors(commandLineParser.getAction('do-job').renderHelpText());\r\n    expect(helpText).toMatchSnapshot();\r\n  });\r\n\r\n  it('parses an input with ALL parameters', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const action: CommandLineAction = commandLineParser.getAction('do-job');\r\n\r\n    const args: string[] = [\r\n      '--global-flag',\r\n      'do-job',\r\n      '--choice', 'two',\r\n      '--flag',\r\n      '--integer', '123',\r\n      '--integer-required', '321',\r\n      '--string', 'hello',\r\n      '--string-list', 'first',\r\n      '--string-list', 'second'\r\n    ];\r\n\r\n    return commandLineParser.execute(args).then(() => {\r\n      expect(commandLineParser.selectedAction).toBe(action);\r\n\r\n      expectPropertiesToMatchSnapshot(\r\n        commandLineParser.getFlagParameter('--global-flag'),\r\n        snapshotPropertyNames\r\n      );\r\n\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getChoiceParameter('--choice'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getChoiceParameter('--choice-with-default'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getFlagParameter('--flag'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getIntegerParameter('--integer'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getIntegerParameter('--integer-with-default'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getIntegerParameter('--integer-required'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getStringParameter('--string'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getStringParameter('--string-with-default'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getStringListParameter('--string-list'),\r\n        snapshotPropertyNames\r\n      );\r\n\r\n      const copiedArgs: string[] = [];\r\n      for (const parameter of action.parameters) {\r\n        copiedArgs.push(`### ${parameter.longName} output: ###`);\r\n        parameter.appendToArgList(copiedArgs);\r\n      }\r\n      expect(copiedArgs).toMatchSnapshot();\r\n    });\r\n  });\r\n\r\n  it('parses an input with NO parameters', () => {\r\n    const commandLineParser: CommandLineParser = createParser();\r\n    const action: CommandLineAction = commandLineParser.getAction('do-job');\r\n    const args: string[] = [ 'do-job', '--integer-required', '123'];\r\n\r\n    return commandLineParser.execute(args).then(() => {\r\n      expect(commandLineParser.selectedAction).toBe(action);\r\n\r\n      expectPropertiesToMatchSnapshot(\r\n        commandLineParser.getFlagParameter('--global-flag'),\r\n        snapshotPropertyNames\r\n      );\r\n\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getChoiceParameter('--choice'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getChoiceParameter('--choice-with-default'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getFlagParameter('--flag'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getIntegerParameter('--integer'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getIntegerParameter('--integer-with-default'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getIntegerParameter('--integer-required'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getStringParameter('--string'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getStringParameter('--string-with-default'),\r\n        snapshotPropertyNames\r\n      );\r\n      expectPropertiesToMatchSnapshot(\r\n        action.getStringListParameter('--string-list'),\r\n        snapshotPropertyNames\r\n      );\r\n\r\n      const copiedArgs: string[] = [];\r\n      for (const parameter of action.parameters) {\r\n        copiedArgs.push(`### ${parameter.longName} output: ###`);\r\n        parameter.appendToArgList(copiedArgs);\r\n      }\r\n      expect(copiedArgs).toMatchSnapshot();\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"../../../src"}