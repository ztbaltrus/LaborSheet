{"version":3,"sources":["test/DynamicCommandLineParser.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,0EAAuE;AACvE,0EAAuE;AAGvE,QAAQ,CAAC,0BAA0B,EAAE;IAEnC,EAAE,CAAC,kBAAkB,EAAE;QACrB,MAAM,iBAAiB,GAA6B,IAAI,mDAAwB,CAC9E;YACE,YAAY,EAAE,SAAS;YACvB,eAAe,EAAE,oBAAoB;SACtC,CACF,CAAC;QAEF,MAAM,MAAM,GAA6B,IAAI,mDAAwB,CAAC;YACpE,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,cAAc;YACvB,aAAa,EAAE,sBAAsB;SACtC,CAAC,CAAC;QACH,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACpC,MAAM,CAAC,mBAAmB,CAAC;YACzB,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,UAAU;SACxB,CAAC,CAAC;QAEH,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;YAC1D,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAEzD,MAAM,kBAAkB,GAA6B,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACvF,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"DynamicCommandLineParser.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { DynamicCommandLineParser } from '../DynamicCommandLineParser';\r\nimport { DynamicCommandLineAction } from '../DynamicCommandLineAction';\r\nimport { CommandLineFlagParameter } from '../CommandLineParameter';\r\n\r\ndescribe('DynamicCommandLineParser', () => {\r\n\r\n  it('parses an action', () => {\r\n    const commandLineParser: DynamicCommandLineParser = new DynamicCommandLineParser(\r\n      {\r\n        toolFilename: 'example',\r\n        toolDescription: 'An example project'\r\n      }\r\n    );\r\n\r\n    const action: DynamicCommandLineAction = new DynamicCommandLineAction({\r\n      actionName: 'do-job',\r\n      summary: 'does the job',\r\n      documentation: 'a longer description'\r\n    });\r\n    commandLineParser.addAction(action);\r\n    action.defineFlagParameter({\r\n      parameterLongName: '--flag',\r\n      description: 'The flag'\r\n    });\r\n\r\n    return commandLineParser.execute(['do-job', '--flag']).then(() => {\r\n      expect(commandLineParser.selectedAction).toEqual(action);\r\n\r\n      const retrievedParameter: CommandLineFlagParameter = action.getFlagParameter('--flag');\r\n      expect(retrievedParameter.value).toBe(true);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"../../../src"}