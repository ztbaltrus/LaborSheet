{"version":3,"sources":["test/CommandLineParser.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,4DAAyD;AACzD,4DAAyD;AAGzD,gBAAiB,SAAQ,qCAAiB;IAIxC;QACE,KAAK,CAAC;YACJ,UAAU,EAAE,QAAQ;YACpB,OAAO,EAAE,cAAc;YACvB,aAAa,EAAE,sBAAsB;SACtC,CAAC,CAAC;QARE,SAAI,GAAY,KAAK,CAAC;IAS7B,CAAC;IAES,SAAS;QACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACvC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC;YACpC,iBAAiB,EAAE,QAAQ;YAC3B,WAAW,EAAE,UAAU;SACxB,CAAC,CAAC;IACL,CAAC;CACF;AAED,qBAAsB,SAAQ,qCAAiB;IAC7C;QACE,KAAK,CAAC;YACJ,YAAY,EAAE,SAAS;YACvB,eAAe,EAAE,oBAAoB;SACtC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC;IACnC,CAAC;IAES,kBAAkB;QAC1B,gBAAgB;IAClB,CAAC;CACF;AAED,QAAQ,CAAC,mBAAmB,EAAE;IAE5B,EAAE,CAAC,oBAAoB,EAAE;QACvB,MAAM,iBAAiB,GAAoB,IAAI,eAAe,EAAE,CAAC;QAEjE,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;YAC1D,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;YACvD,MAAM,CAAC,iBAAiB,CAAC,cAAe,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAEvE,MAAM,MAAM,GAAe,iBAAiB,CAAC,cAA4B,CAAC;YAC1E,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"CommandLineParser.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { CommandLineAction } from '../CommandLineAction';\r\nimport { CommandLineParser } from '../CommandLineParser';\r\nimport { CommandLineFlagParameter } from '../CommandLineParameter';\r\n\r\nclass TestAction extends CommandLineAction {\r\n  public done: boolean = false;\r\n  private _flag: CommandLineFlagParameter;\r\n\r\n  public constructor() {\r\n    super({\r\n      actionName: 'do-job',\r\n      summary: 'does the job',\r\n      documentation: 'a longer description'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    expect(this._flag.value).toEqual(true);\r\n    this.done = true;\r\n    return Promise.resolve();\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._flag = this.defineFlagParameter({\r\n      parameterLongName: '--flag',\r\n      description: 'The flag'\r\n    });\r\n  }\r\n}\r\n\r\nclass TestCommandLine extends CommandLineParser {\r\n  public constructor() {\r\n    super({\r\n      toolFilename: 'example',\r\n      toolDescription: 'An example project'\r\n    });\r\n\r\n    this.addAction(new TestAction());\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    // no parameters\r\n  }\r\n}\r\n\r\ndescribe('CommandLineParser', () => {\r\n\r\n  it('executes an action', () => {\r\n    const commandLineParser: TestCommandLine = new TestCommandLine();\r\n\r\n    return commandLineParser.execute(['do-job', '--flag']).then(() => {\r\n      expect(commandLineParser.selectedAction).toBeDefined();\r\n      expect(commandLineParser.selectedAction!.actionName).toEqual('do-job');\r\n\r\n      const action: TestAction = commandLineParser.selectedAction as TestAction;\r\n      expect(action.done).toBe(true);\r\n    });\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"../../../src"}