{"version":3,"sources":["FileSystem.ts"],"names":[],"mappings":"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","file":"FileSystem.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as pathUtilities from 'path';\r\nimport * as fs from 'fs';\r\nimport * as fsx from 'fs-extra';\r\n\r\nimport { Text } from './Text';\r\n\r\n// The PosixModeBits are intended to be used with bitwise operations.\r\n// tslint:disable:no-bitwise\r\n\r\n/**\r\n * The allowed types of encodings, as supported by Node.js\r\n * @public\r\n */\r\nexport const enum Encoding {\r\n  Utf8 = 'utf8'\r\n}\r\n\r\n/**\r\n * Enumeration controlling conversion of newline characters.\r\n * @public\r\n */\r\nexport const enum NewlineKind {\r\n  /**\r\n   * Windows-style newlines\r\n   */\r\n  CrLf = '\\r\\n',\r\n\r\n  /**\r\n   * POSIX-style newlines\r\n   *\r\n   * @remarks\r\n   * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\r\n   */\r\n  Lf = '\\n'\r\n}\r\n\r\n/**\r\n * An integer value used to specify file permissions for POSIX-like operating systems.\r\n *\r\n * @remarks\r\n *\r\n * This bitfield corresponds to the \"mode_t\" structure described in this document:\r\n * http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html\r\n *\r\n * It is used with NodeJS APIs such as fs.Stat.mode and fs.chmodSync().  These values\r\n * represent a set of permissions and can be combined using bitwise arithmetic.\r\n *\r\n * POSIX is a registered trademark of the Institute of Electrical and Electronic Engineers, Inc.\r\n *\r\n * @public\r\n */\r\nexport const enum PosixModeBits {\r\n  // The bits\r\n\r\n  /**\r\n   * Indicates that the item's owner can read the item.\r\n   */\r\n  UserRead = 1 << 8,\r\n\r\n  /**\r\n   * Indicates that the item's owner can modify the item.\r\n   */\r\n  UserWrite = 1 << 7,\r\n\r\n  /**\r\n   * Indicates that the item's owner can execute the item (if it is a file)\r\n   * or search the item (if it is a directory).\r\n   */\r\n  UserExecute = 1 << 6,\r\n\r\n  /**\r\n   * Indicates that users belonging to the item's group can read the item.\r\n   */\r\n  GroupRead = 1 << 5,\r\n\r\n  /**\r\n   * Indicates that users belonging to the item's group can modify the item.\r\n   */\r\n  GroupWrite = 1 << 4,\r\n\r\n  /**\r\n   * Indicates that users belonging to the item's group can execute the item (if it is a file)\r\n   * or search the item (if it is a directory).\r\n   */\r\n  GroupExecute = 1 << 3,\r\n\r\n  /**\r\n   * Indicates that other users (besides the item's owner user or group) can read the item.\r\n   */\r\n  OthersRead = 1 << 2,\r\n\r\n  /**\r\n   * Indicates that other users (besides the item's owner user or group) can modify the item.\r\n   */\r\n  OthersWrite = 1 << 1,\r\n\r\n  /**\r\n   * Indicates that other users (besides the item's owner user or group) can execute the item (if it is a file)\r\n   * or search the item (if it is a directory).\r\n   */\r\n  OthersExecute = 1 << 0,\r\n\r\n  // Helpful aliases\r\n\r\n  /**\r\n   * A zero value where no permissions bits are set.\r\n   */\r\n  None = 0,\r\n\r\n  /**\r\n   * An alias combining OthersRead, GroupRead, and UserRead permission bits.\r\n   */\r\n  AllRead = OthersRead | GroupRead | UserRead,\r\n\r\n  /**\r\n   * An alias combining OthersWrite, GroupWrite, and UserWrite permission bits.\r\n   */\r\n  AllWrite = OthersWrite | GroupWrite | UserWrite,\r\n\r\n  /**\r\n   * An alias combining OthersExecute, GroupExecute, and UserExecute permission bits.\r\n   */\r\n  AllExecute = OthersExecute | GroupExecute | UserExecute\r\n}\r\n\r\n/**\r\n * The options for FileSystem.readFolder()\r\n * @public\r\n */\r\nexport interface IReadFolderOptions {\r\n  /**\r\n   * If true, returns the absolute paths of the files in the folder.\r\n   * Defaults to `false`.\r\n   */\r\n  absolutePaths?: boolean;\r\n}\r\n\r\n/**\r\n * The options for FileSystem.writeFile()\r\n * @public\r\n */\r\nexport interface IWriteFileOptions {\r\n  /**\r\n   * If true, will ensure the folder is created before writing the file.\r\n   * Defaults to `false`.\r\n   */\r\n  ensureFolderExists?: boolean;\r\n\r\n  /**\r\n   * If specified, will normalize line endings to the specified style of newline.\r\n   * Defaults to `NewlineKind.None`.\r\n   */\r\n  convertLineEndings?: NewlineKind;\r\n\r\n  /**\r\n   * If specified, will change the encoding of the file that will be written.\r\n   * Defaults to `\"utf8\"`.\r\n   */\r\n  encoding?: Encoding;\r\n}\r\n\r\n/**\r\n * The options for FileSystem.readFile()\r\n * @public\r\n */\r\nexport interface IReadFileOptions {\r\n  /**\r\n   * If specified, will change the encoding of the file that will be written.\r\n   * Defaults to `\"utf8\"`.\r\n   */\r\n  encoding?: Encoding;\r\n\r\n  /**\r\n   * If specified, will normalize line endings to the specified style of newline.\r\n   * Defaults to `NewlineKind.None`.\r\n   */\r\n  convertLineEndings?: NewlineKind;\r\n}\r\n\r\n/**\r\n * The options for FileSystem.move()\r\n * @public\r\n */\r\nexport interface IFileSystemMoveOptions {\r\n  /**\r\n   * If true, will overwrite the file if it already exists. Defaults to true.\r\n   */\r\n  overwrite?: boolean;\r\n\r\n  /**\r\n   * If true, will ensure the folder is created before writing the file.\r\n   * Defaults to `false`.\r\n   */\r\n  ensureFolderExists?: boolean;\r\n}\r\n\r\n/**\r\n * The options for FileSystem.deleteFile()\r\n * @public\r\n*/\r\nexport interface IDeleteFileOptions {\r\n  /**\r\n   * If true, will throw an exception if the file did not exist before `deleteFile()` was called.\r\n   * Defaults to `false`.\r\n   */\r\n  throwIfNotExists?: boolean;\r\n}\r\n\r\n/**\r\n * The parameters for `updateTimes()`.\r\n * Both times must be specified.\r\n * @public\r\n */\r\nexport interface IUpdateTimeParameters {\r\n  /**\r\n   * The POSIX epoch time or Date when this was last accessed.\r\n   */\r\n  accessedTime: number | Date;\r\n\r\n  /**\r\n   * The POSIX epoch time or Date when this was last modified\r\n   */\r\n  modifiedTime: number | Date;\r\n}\r\n\r\n/**\r\n * The FileSystem API provides a complete set of recommended operations for interacting with the file system.\r\n *\r\n * @remarks\r\n * We recommend to use this instead of the native `fs` API, because `fs` is a minimal set of low-level\r\n * primitives that must be mapped for each supported operating system. The FileSystem API takes a\r\n * philosophical approach of providing \"one obvious way\" to do each operation. We also prefer synchronous\r\n * operations except in cases where there would be a clear performance benefit for using async, since synchronous\r\n * code is much easier to read and debug. Also, indiscriminate parallelism has been seen to actually worsen\r\n * performance, versus improving it.\r\n *\r\n * Note that in the documentation, we refer to \"filesystem objects\", this can be a\r\n * file, folder, synbolic link, hard link, directory junction, etc.\r\n *\r\n * @public\r\n */\r\nexport class FileSystem {\r\n\r\n  // ===============\r\n  // COMMON OPERATIONS\r\n  // ===============\r\n\r\n  /**\r\n   * Returns true if the path exists on disk.\r\n   * Behind the scenes it uses `fs.existsSync()`.\r\n   * @remarks\r\n   * There is a debate about the fact that after `fs.existsSync()` returns true,\r\n   * the file might be deleted before fs.readSync() is called, which would imply that everybody\r\n   * should catch a `readSync()` exception, and nobody should ever use `fs.existsSync()`.\r\n   * We find this to be unpersuasive, since \"unexceptional exceptions\" really hinder the\r\n   * break-on-exception debugging experience. Also, throwing/catching is generally slow.\r\n   * @param path - The absolute or relative path to the filesystem object.\r\n   */\r\n  public static exists(path: string): boolean {\r\n    return fsx.existsSync(path);\r\n  }\r\n\r\n  /**\r\n   * Gets the statistics for a particular filesystem object.\r\n   * If the path is a link, this function follows the link and returns statistics about the link target.\r\n   * Behind the scenes it uses `fs.statSync()`.\r\n   * @param path - The absolute or relative path to the filesystem object.\r\n   */\r\n  public static getStatistics(path: string): fs.Stats {\r\n    return fsx.statSync(path);\r\n  }\r\n\r\n  /**\r\n   * Updates the accessed and modified timestamps of the filesystem object referenced by path.\r\n   * Behind the scenes it uses `fs.utimesSync()`.\r\n   * The caller should specify both times in the `times` parameter.\r\n   * @param path - The path of the file that should be modified.\r\n   * @param times - The times that the object should be updated to reflect.\r\n   */\r\n  public static updateTimes(path: string, times: IUpdateTimeParameters): void {\r\n    // tslint:disable-next-line:no-any\r\n    fsx.utimes(path, times.accessedTime as any, times.modifiedTime as any);\r\n  }\r\n\r\n  /**\r\n   * Changes the permissions (i.e. file mode bits) for a filesystem object.\r\n   * Behind the scenes it uses `fs.chmodSync()`.\r\n   * @param path - The absolute or relative path to the object that should be updated.\r\n   * @param modeBits - POSIX-style file mode bits specified using the {@link PosixModeBits} enum\r\n   */\r\n  public static changePosixModeBits(path: string, mode: PosixModeBits): void {\r\n    fs.chmodSync(path, mode);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the permissions (i.e. file mode bits) for a filesystem object.\r\n   * Behind the scenes it uses `fs.chmodSync()`.\r\n   * @param path - The absolute or relative path to the object that should be updated.\r\n   */\r\n  public static getPosixModeBits(path: string): PosixModeBits {\r\n    return FileSystem.getStatistics(path).mode;\r\n  }\r\n\r\n  /**\r\n   * Returns a 10-character string representation of a PosixModeBits value similar to what\r\n   * would be displayed by a command such as \"ls -l\" on a POSIX-like operating system.\r\n   * @remarks\r\n   * For example, `PosixModeBits.AllRead | PosixModeBits.AllWrite` would be formatted as \"-rw-rw-rw-\".\r\n   * @param modeBits - POSIX-style file mode bits specified using the {@link PosixModeBits} enum\r\n   */\r\n  public static formatPosixModeBits(modeBits: PosixModeBits): string {\r\n    let result: string = '-';  // (later we may add support for additional states such as S_IFDIR or S_ISUID)\r\n\r\n    result += (modeBits & PosixModeBits.UserRead) ? 'r' : '-';\r\n    result += (modeBits & PosixModeBits.UserWrite) ? 'w' : '-';\r\n    result += (modeBits & PosixModeBits.UserExecute) ? 'x' : '-';\r\n\r\n    result += (modeBits & PosixModeBits.GroupRead) ? 'r' : '-';\r\n    result += (modeBits & PosixModeBits.GroupWrite) ? 'w' : '-';\r\n    result += (modeBits & PosixModeBits.GroupExecute) ? 'x' : '-';\r\n\r\n    result += (modeBits & PosixModeBits.OthersRead) ? 'r' : '-';\r\n    result += (modeBits & PosixModeBits.OthersWrite) ? 'w' : '-';\r\n    result += (modeBits & PosixModeBits.OthersExecute) ? 'x' : '-';\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Moves a file. The folder must exist, unless the `ensureFolderExists` option is provided.\r\n   * Behind the scenes it uses `fs-extra.moveSync()`\r\n   * @param sourcePath - The absolute or relative path to the source file.\r\n   * @param targetPath - The absolute or relative path where the file should be moved to.\r\n   * @param options - Optional settings that can change the behavior. Type: `IFileSystemMoveOptions`\r\n   */\r\n  public static move(sourcePath: string, targetPath: string, options?: IFileSystemMoveOptions): void {\r\n    options = {\r\n      overwrite: true,\r\n      ensureFolderExists: false,\r\n      ...options\r\n    };\r\n\r\n    if (options.ensureFolderExists) {\r\n      FileSystem.ensureFolder(pathUtilities.basename(sourcePath));\r\n    }\r\n\r\n    fsx.moveSync(sourcePath, targetPath, { overwrite: options.overwrite });\r\n  }\r\n\r\n  // ===============\r\n  // FOLDER OPERATIONS\r\n  // ===============\r\n\r\n  /**\r\n   * Recursively creates a folder at a given path.\r\n   * Behind the scenes is uses `fs-extra.ensureDirSync()`.\r\n   * @remarks\r\n   * Throws an exception if anything in the folderPath is not a folder.\r\n   * @param folderPath - The absolute or relative path of the folder which should be created.\r\n   */\r\n  public static ensureFolder(folderPath: string): void {\r\n    fsx.ensureDirSync(folderPath);\r\n  }\r\n\r\n  /**\r\n   * Reads the contents of the folder, not including \".\" or \"..\".\r\n   * Behind the scenes it uses `fs.readdirSync()`.\r\n   * @param folderPath - The absolute or relative path to the folder which should be read.\r\n   * @param options - Optional settings that can change the behavior. Type: `IReadFolderOptions`\r\n   */\r\n  public static readFolder(folderPath: string, options?: IReadFolderOptions): Array<string> {\r\n    options = {\r\n      absolutePaths: false,\r\n      ...options\r\n    };\r\n\r\n    if (!FileSystem.exists(folderPath)) {\r\n      throw new Error(`Folder does not exist: \"${folderPath}\"`);\r\n    }\r\n\r\n    const fileNames: Array<string> = fsx.readdirSync(folderPath);\r\n\r\n    if (options.absolutePaths) {\r\n      return fileNames.map(fileName => pathUtilities.resolve(folderPath, fileName));\r\n    }\r\n\r\n    return fileNames;\r\n  }\r\n\r\n  /**\r\n   * Deletes a folder, including all of its contents.\r\n   * Behind the scenes is uses `fs-extra.removeSync()`.\r\n   * @remarks\r\n   * Does not throw if the folderPath does not exist.\r\n   * @param folderPath - The absolute or relative path to the folder which should be deleted.\r\n   */\r\n  public static deleteFolder(folderPath: string): void {\r\n    fsx.removeSync(folderPath);\r\n  }\r\n\r\n  /**\r\n   * Deletes the content of a folder, but not the folder itself. Also ensures the folder exists.\r\n   * Behind the scenes it uses `fs-extra.emptyDirSync()`.\r\n   * @remarks\r\n   * This is a workaround for a common race condition, where the virus scanner holds a lock on the folder\r\n   * for a brief period after it was deleted, causing EBUSY errors for any code that tries to recreate the folder.\r\n   * @param folderPath - The absolute or relative path to the folder which should have its contents deleted.\r\n   */\r\n  public static ensureEmptyFolder(folderPath: string): void {\r\n    fsx.emptyDirSync(folderPath);\r\n  }\r\n\r\n  // ===============\r\n  // FILE OPERATIONS\r\n  // ===============\r\n\r\n  /**\r\n   * Writes a text string to a file on disk, overwriting the file if it already exists.\r\n   * Behind the scenes it uses `fs.writeFileSync()`.\r\n   * @remarks\r\n   * Throws an error if the folder doesn't exist, unless ensureFolder=true.\r\n   * @param filePath - The absolute or relative path of the file.\r\n   * @param contents - The text that should be written to the file.\r\n   * @param options - Optional settings that can change the behavior. Type: `IWriteFileOptions`\r\n   */\r\n  public static writeFile(filePath: string, contents: string | Buffer, options?: IWriteFileOptions): void {\r\n    options = {\r\n      ensureFolderExists: false,\r\n      convertLineEndings: undefined,\r\n      encoding: Encoding.Utf8,\r\n      ...options\r\n    };\r\n\r\n    if (options.ensureFolderExists) {\r\n      const folderPath: string = pathUtilities.dirname(filePath);\r\n      FileSystem.ensureFolder(folderPath);\r\n    }\r\n\r\n    contents = FileSystem._convertLineEndings(contents.toString(), options.convertLineEndings);\r\n\r\n    fsx.writeFileSync(filePath, contents, { encoding: options.encoding });\r\n  }\r\n\r\n  /**\r\n   * Reads the contents of a file into a string.\r\n   * Behind the scenes it uses `fs.readFileSync()`.\r\n   * @param filePath - The relative or absolute path to the file whose contents should be read.\r\n   * @param options - Optional settings that can change the behavior. Type: `IReadFileOptions`\r\n   */\r\n  public static readFile(filePath: string, options?: IReadFileOptions): string {\r\n    options = {\r\n      encoding: Encoding.Utf8,\r\n      convertLineEndings: undefined,\r\n      ...options\r\n    };\r\n\r\n    const contents: string = FileSystem.readFileToBuffer(filePath).toString(options.encoding);\r\n    return FileSystem._convertLineEndings(contents, options.convertLineEndings);\r\n  }\r\n\r\n  /**\r\n   * Reads the contents of a file into a buffer.\r\n   * Behind the scenes is uses `fs.readFileSync()`.\r\n   * @param filePath - The relative or absolute path to the file whose contents should be read.\r\n   */\r\n  public static readFileToBuffer(filePath: string): Buffer {\r\n    return fsx.readFileSync(filePath);\r\n  }\r\n\r\n  /**\r\n   * Copies a file from one location to another.\r\n   * By default, destinationPath is overwritten if it already exists.\r\n   * Behind the scenes it uses `fs.copyFileSync()`.\r\n   * @param sourcePath - The absolute or relative path to the source file to be copied.\r\n   * @param destinationPath - The absolute or relative path to the new copy that will be created.\r\n   */\r\n  public static copyFile(sourcePath: string, destinationPath: string): void {\r\n    fsx.copySync(sourcePath, destinationPath);\r\n  }\r\n\r\n  /**\r\n   * Deletes a file. Can optionally throw if the file doesn't exist.\r\n   * Behind the scenes it uses `fs.unlinkSync()`.\r\n   * @param filePath - The absolute or relative path to the file that should be deleted.\r\n   * @param options - Optional settings that can change the behavior. Type: `IDeleteFileOptions`\r\n   */\r\n  public static deleteFile(filePath: string, options?: IDeleteFileOptions): void {\r\n    options = {\r\n      throwIfNotExists: false,\r\n      ...options\r\n    };\r\n\r\n    if (options.throwIfNotExists) {\r\n      fsx.unlinkSync(filePath);\r\n    } else {\r\n      try {\r\n        fsx.unlinkSync(filePath);\r\n      } catch (error) {\r\n        /* no-op */\r\n      }\r\n    }\r\n  }\r\n\r\n  // ===============\r\n  // LINK OPERATIONS\r\n  // ===============\r\n\r\n  /**\r\n   * Gets the statistics of a filesystem object. Does NOT follow the link to its target.\r\n   * Behind the scenes it uses `fs.lstatSync()`.\r\n   * @param path - The absolute or relative path to the filesystem object.\r\n   */\r\n  public static getLinkStatistics(path: string): fs.Stats {\r\n    return fsx.lstatSync(path);\r\n  }\r\n\r\n  /**\r\n   * Creates a Windows \"directory junction\". Behaves like `createSymbolicLinkToFile()` on other platforms.\r\n   * Behind the scenes it uses `fs.symlinkSync()`.\r\n   * @param linkSource - The absolute or relative path to the destination where the link should be created.\r\n   * @param linkTarget - The absolute or relative path to the target of the link.\r\n   */\r\n  public static createSymbolicLinkJunction(linkTarget: string, linkSource: string): void {\r\n    // For directories, we use a Windows \"junction\".  On POSIX operating systems, this produces a regular symlink.\r\n    fsx.symlinkSync(linkTarget, linkSource, 'junction');\r\n  }\r\n\r\n  /**\r\n   * Creates a symbolic link to a file (on Windows this requires elevated permissionsBits).\r\n   * Behind the scenes it uses `fs.symlinkSync()`.\r\n   * @param linkSource - The absolute or relative path to the destination where the link should be created.\r\n   * @param linkTarget - The absolute or relative path to the target of the link.\r\n   */\r\n  public static createSymbolicLinkFile(linkTarget: string, linkSource: string): void {\r\n    fsx.symlinkSync(linkSource, linkTarget, 'file');\r\n  }\r\n\r\n  /**\r\n   * Creates a symbolic link to a folder (on Windows this requires elevated permissionsBits).\r\n   * Behind the scenes it uses `fs.symlinkSync()`.\r\n   * @param linkSource - The absolute or relative path to the destination where the link should be created.\r\n   * @param linkTarget - The absolute or relative path to the target of the link.\r\n   */\r\n  public static createSymbolicLinkFolder(linkTarget: string, linkSource: string): void {\r\n    fsx.symlinkSync(linkSource, linkTarget, 'dir');\r\n  }\r\n\r\n  /**\r\n   * Creates a hard link.\r\n   * Behind the scenes it uses `fs.linkSync()`.\r\n   * @param linkSource - The absolute or relative path to the destination where the link should be created.\r\n   * @param linkTarget - The absolute or relative path to the target of the link.\r\n   */\r\n  public static createHardLink(linkTarget: string, linkSource: string): void {\r\n    fsx.linkSync(linkSource, linkTarget);\r\n  }\r\n\r\n  /**\r\n   * Follows a link to its destination and returns the absolute path to the final target of the link.\r\n   * Behind the scenes it uses `fs.realpathSync()`.\r\n   * @param linkPath - The path to the link.\r\n   */\r\n  public static getRealPath(linkPath: string): string {\r\n    return fsx.realpathSync(linkPath);\r\n  }\r\n\r\n  /**\r\n   * A helper function that converts line endings on a string.\r\n   * @param text - The text to be normalized.\r\n   * @param lineEndings - The style of line endings to use.\r\n   */\r\n  private static _convertLineEndings(text: string, lineEndings: NewlineKind | undefined): string {\r\n    switch (lineEndings) {\r\n      case NewlineKind.CrLf:\r\n        return Text.convertToCrLf(text);\r\n      case NewlineKind.Lf:\r\n        return Text.convertToLf(text);\r\n      default:\r\n        return text;\r\n    }\r\n  }\r\n}"],"sourceRoot":"../src"}