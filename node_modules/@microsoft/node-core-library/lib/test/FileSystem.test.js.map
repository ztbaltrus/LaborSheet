{"version":3,"sources":["test/FileSystem.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,8CAA0D;AAE1D,qEAAqE;AACrE,4BAA4B;AAE5B,IAAI,CAAC,qBAAqB,EAAE;IAC1B,IAAI,QAAQ,GAAW,sCAA8C,CAAC;IAEtE,MAAM,CAAC,uBAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAEvE,QAAQ,wBAA8B,CAAC;IACvC,MAAM,CAAC,uBAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAEvE,4BAA4B;IAC5B,QAAQ,yBAA+B,CAAC;IACxC,MAAM,CAAC,uBAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAEvE,4BAA4B;IAC5B,QAAQ,IAAI,mBAAuB,CAAC;IACpC,MAAM,CAAC,uBAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC","file":"FileSystem.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { FileSystem, PosixModeBits } from '../FileSystem';\r\n\r\n// The PosixModeBits are intended to be used with bitwise operations.\r\n// tslint:disable:no-bitwise\r\n\r\ntest('PosixModeBits tests', () => {\r\n  let modeBits: number = PosixModeBits.AllRead | PosixModeBits.AllWrite;\r\n\r\n  expect(FileSystem.formatPosixModeBits(modeBits)).toEqual('-rw-rw-rw-');\r\n\r\n  modeBits |= PosixModeBits.GroupExecute;\r\n  expect(FileSystem.formatPosixModeBits(modeBits)).toEqual('-rw-rwxrw-');\r\n\r\n  // Add the group execute bit\r\n  modeBits |= PosixModeBits.OthersExecute;\r\n  expect(FileSystem.formatPosixModeBits(modeBits)).toEqual('-rw-rwxrwx');\r\n\r\n  // Add the group execute bit\r\n  modeBits &= ~PosixModeBits.AllWrite;\r\n  expect(FileSystem.formatPosixModeBits(modeBits)).toEqual('-r--r-xr-x');\r\n});\r\n"],"sourceRoot":"../../../src"}