{"version":3,"sources":["test/LockFile.test.ts"],"names":[],"mappings":"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","file":"LockFile.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { LockFile, getProcessStartTime, getProcessStartTimeFromProcStat } from '../LockFile';\r\nimport { FileSystem } from '../FileSystem';\r\nimport { FileWriter } from '../FileWriter';\r\n\r\nfunction setLockFileGetProcessStartTime(fn: (process: number) => string | undefined): void {\r\n  // tslint:disable-next-line:no-any\r\n  (LockFile as any)._getStartTime = fn;\r\n}\r\n\r\ndescribe('LockFile', () => {\r\n  afterEach(() => {\r\n    setLockFileGetProcessStartTime(getProcessStartTime);\r\n  });\r\n\r\n  describe('getLockFilePath', () => {\r\n    it('only acceps alphabetical characters for resource name', () => {\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo123');\r\n      }).not.toThrow();\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'bar.123');\r\n      }).not.toThrow();\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo.bar');\r\n      }).not.toThrow();\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'lock-file.123');\r\n      }).not.toThrow();\r\n\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), '.foo123');\r\n      }).toThrow();\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo123.');\r\n      }).toThrow();\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), '-foo123');\r\n      }).toThrow();\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo123-');\r\n      }).toThrow();\r\n      expect(() => {\r\n        LockFile.getLockFilePath(process.cwd(), '');\r\n      }).toThrow();\r\n    });\r\n  });\r\n\r\n  describe('getProcessStartTimeFromProcStat', () => {\r\n    function createStatOutput (value2: string, n: number): string {\r\n      let statOutput: string = `0 ${value2} S`;\r\n      for (let i: number = 0; i < n; i++) {\r\n        statOutput += ' 0';\r\n      }\r\n      return statOutput;\r\n    }\r\n\r\n    it('returns undefined if too few values are contained in /proc/[pid]/stat (1)', () => {\r\n      const stat: string = createStatOutput('(bash)', 1);\r\n      const ret: string|undefined = getProcessStartTimeFromProcStat(stat);\r\n      expect(ret).toBeUndefined();\r\n    });\r\n    it('returns undefined if too few values are contained in /proc/[pid]/stat (2)', () => {\r\n      const stat: string = createStatOutput('(bash)', 0);\r\n      const ret: string|undefined = getProcessStartTimeFromProcStat(stat);\r\n      expect(ret).toBeUndefined();\r\n    });\r\n    it('returns the correct start time if the second value in /proc/[pid]/stat contains spaces', () => {\r\n      let stat: string = createStatOutput('(bash 2)', 18);\r\n      const value22: string = '12345';\r\n      stat += ` ${value22}`;\r\n      const ret: string|undefined = getProcessStartTimeFromProcStat(stat);\r\n      expect(ret).toEqual(value22);\r\n    });\r\n    it('returns the correct start time if there are 22 values in /proc/[pid]/stat, including a trailing line '\r\n      + 'terminator', () => {\r\n      let stat: string = createStatOutput('(bash)', 18);\r\n      const value22: string = '12345';\r\n      stat += ` ${value22}\\n`;\r\n      const ret: string|undefined = getProcessStartTimeFromProcStat(stat);\r\n      expect(ret).toEqual(value22);\r\n    });\r\n    it('returns the correct start time if the second value in /proc/[pid]/stat does not contain spaces', () => {\r\n      let stat: string = createStatOutput('(bash)', 18);\r\n      const value22: string = '12345';\r\n      stat += ` ${value22}`;\r\n      const ret: string|undefined = getProcessStartTimeFromProcStat(stat);\r\n      expect(ret).toEqual(value22);\r\n    });\r\n  });\r\n\r\n  if (process.platform === 'darwin' || process.platform === 'linux') {\r\n    describe('Linux and Mac', () => {\r\n      describe('getLockFilePath()', () => {\r\n        it('returns a resolved path containing the pid', () => {\r\n          expect(\r\n            path.join(process.cwd(), `test#${process.pid}.lock`)\r\n          ).toEqual(\r\n            LockFile.getLockFilePath('./', 'test')\r\n          );\r\n        });\r\n\r\n        it('allows for overridden pid', () => {\r\n          expect(\r\n            path.join(process.cwd(), `test#99.lock`)\r\n          ).toEqual(\r\n            LockFile.getLockFilePath('./', 'test', 99)\r\n          );\r\n        });\r\n      });\r\n\r\n      it('can acquire and close a clean lockfile', () => {\r\n        // ensure test folder is clean\r\n        const testFolder: string = path.join(__dirname, '1');\r\n        FileSystem.ensureEmptyFolder(testFolder);\r\n\r\n        const resourceName: string = 'test';\r\n        const pidLockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n        const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n        // The lockfile should exist and be in a clean state\r\n        expect(lock).toBeDefined();\r\n        expect(lock!.dirtyWhenAcquired).toEqual(false);\r\n        expect(lock!.isReleased).toEqual(false);\r\n        expect(FileSystem.exists(pidLockFileName)).toEqual(true);\r\n\r\n        // Ensure that we can release the \"clean\" lockfile\r\n        lock!.release();\r\n        expect(FileSystem.exists(pidLockFileName)).toEqual(false);\r\n        expect(lock!.isReleased).toEqual(true);\r\n\r\n        // Ensure we cannot release the lockfile twice\r\n        expect(() => {\r\n          lock!.release();\r\n        }).toThrow();\r\n      });\r\n\r\n      it('cannot acquire a lock if another valid lock exists', () => {\r\n        // ensure test folder is clean\r\n        const testFolder: string = path.join(__dirname, '2');\r\n        FileSystem.ensureEmptyFolder(testFolder);\r\n\r\n        const otherPid: number = 999999999;\r\n        const otherPidStartTime: string = '2012-01-02 12:53:12';\r\n\r\n        const resourceName: string = 'test';\r\n\r\n        const otherPidLockFileName: string = LockFile.getLockFilePath(testFolder, resourceName, otherPid);\r\n\r\n        setLockFileGetProcessStartTime((pid: number) => {\r\n          return pid === process.pid ? getProcessStartTime(process.pid) : otherPidStartTime;\r\n        });\r\n\r\n        // create an open lockfile\r\n        const lockFileHandle: FileWriter = FileWriter.open(otherPidLockFileName);\r\n        lockFileHandle.write(otherPidStartTime);\r\n        lockFileHandle.close();\r\n        FileSystem.updateTimes(otherPidLockFileName, {\r\n          accessedTime: 10000,\r\n          modifiedTime: 10000\r\n        });\r\n\r\n        const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n        // this lock should be undefined since there is an existing lock\r\n        expect(lock).toBeUndefined();\r\n      });\r\n    });\r\n  }\r\n\r\n  if (process.platform === 'win32') {\r\n    describe('getLockFilePath()', () => {\r\n      it('returns a resolved path that doesn\\'t contain', () => {\r\n        expect(\r\n          path.join(process.cwd(), `test.lock`)\r\n        ).toEqual(\r\n          LockFile.getLockFilePath('./', 'test')\r\n        );\r\n      });\r\n\r\n      it('ignores pid that is passed in', () => {\r\n        expect(\r\n          path.join(process.cwd(), `test.lock`)\r\n        ).toEqual(\r\n          LockFile.getLockFilePath('./', 'test', 99)\r\n        );\r\n      });\r\n    });\r\n\r\n    it('will not acquire if existing lock is there', () => {\r\n      // ensure test folder is clean\r\n      const testFolder: string = path.join(__dirname, '1');\r\n      FileSystem.deleteFolder(testFolder);\r\n      FileSystem.ensureFolder(testFolder);\r\n\r\n      // create an open lockfile\r\n      const resourceName: string = 'test';\r\n      const lockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n      const lockFileHandle: FileWriter = FileWriter.open(lockFileName, { exclusive: true });\r\n\r\n      const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n      // this lock should be undefined since there is an existing lock\r\n      expect(lock).toBeUndefined();\r\n      lockFileHandle.close();\r\n    });\r\n\r\n    it('can acquire and close a dirty lockfile', () => {\r\n      // ensure test folder is clean\r\n      const testFolder: string = path.join(__dirname, '1');\r\n      FileSystem.deleteFolder(testFolder);\r\n      FileSystem.ensureFolder(testFolder);\r\n\r\n      // Create a lockfile that is still hanging around on disk,\r\n      const resourceName: string = 'test';\r\n      const lockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n      FileWriter.open(lockFileName, { exclusive: true }).close();\r\n\r\n      const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n      expect(lock).toBeDefined();\r\n      expect(lock!.dirtyWhenAcquired).toEqual(true);\r\n      expect(lock!.isReleased).toEqual(false);\r\n      expect(FileSystem.exists(lockFileName)).toEqual(true);\r\n\r\n      // Ensure that we can release the \"dirty\" lockfile\r\n      lock!.release();\r\n      expect(FileSystem.exists(lockFileName)).toEqual(false);\r\n      expect(lock!.isReleased).toEqual(true);\r\n    });\r\n\r\n    it('can acquire and close a clean lockfile', () => {\r\n      // ensure test folder is clean\r\n      const testFolder: string = path.join(__dirname, '1');\r\n      FileSystem.deleteFolder(testFolder);\r\n      FileSystem.ensureFolder(testFolder);\r\n\r\n      const resourceName: string = 'test';\r\n      const lockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n      const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n      // The lockfile should exist and be in a clean state\r\n      expect(lock).toBeDefined();\r\n      expect(lock!.dirtyWhenAcquired).toEqual(false);\r\n      expect(lock!.isReleased).toEqual(false);\r\n      expect(FileSystem.exists(lockFileName)).toEqual(true);\r\n\r\n      // Ensure that we can release the \"clean\" lockfile\r\n      lock!.release();\r\n      expect(FileSystem.exists(lockFileName)).toEqual(false);\r\n      expect(lock!.isReleased).toEqual(true);\r\n\r\n      // Ensure we cannot release the lockfile twice\r\n      expect(() => {\r\n        lock!.release();\r\n      }).toThrow();\r\n    });\r\n  }\r\n});"],"sourceRoot":"../../../src"}