"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const Path_1 = require("../Path");
describe('Path', () => {
    describe('Test', () => {
        if (os.platform() === 'win32') {
            it('Windows paths', () => {
                expect(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\a')).toEqual(true);
                expect(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\a\\')).toEqual(true);
                expect(Path_1.Path.isUnder('C:\\a\\b\\c.txt', 'C:\\a')).toEqual(true);
                expect(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\b')).toEqual(false);
                expect(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\b\\')).toEqual(false);
                expect(Path_1.Path.isUnder('C:\\a\\b\\c.txt', 'C:\\b')).toEqual(false);
                expect(Path_1.Path.isUnder('C:\\a\\b.txt', 'D:\\a')).toEqual(false);
            });
        }
        it('POSIX-style paths', () => {
            expect(Path_1.Path.isUnder('/a/b.txt', '/a')).toEqual(true);
            expect(Path_1.Path.isUnder('/a/b.txt', '/a/')).toEqual(true);
            expect(Path_1.Path.isUnder('/a/b/c.txt', '/a')).toEqual(true);
            expect(Path_1.Path.isUnder('/a/b.txt', '/b')).toEqual(false);
            expect(Path_1.Path.isUnder('/a/b.txt', '/b/')).toEqual(false);
            expect(Path_1.Path.isUnder('/a/b/c.txt', '/b')).toEqual(false);
        });
        it('Edge cases', () => {
            expect(Path_1.Path.isUnder('/a', '/a')).toEqual(false);
            expect(Path_1.Path.isUnder('.', '.')).toEqual(false);
            expect(Path_1.Path.isUnder('', '')).toEqual(false);
        });
        it('Relative paths', () => {
            expect(Path_1.Path.isUnder('a/b/c', 'a/b')).toEqual(true);
            expect(Path_1.Path.isUnder('./a/b/c', './a/b')).toEqual(true);
            expect(Path_1.Path.isUnder('../a/b/c', '../a/b')).toEqual(true);
            expect(Path_1.Path.isUnder('a/b', 'a/b/c')).toEqual(false);
            expect(Path_1.Path.isUnder('./a/b', './a/b/c')).toEqual(false);
            expect(Path_1.Path.isUnder('../a/b', '../a/b/c')).toEqual(false);
        });
    });
});

//# sourceMappingURL=Path.test.js.map
