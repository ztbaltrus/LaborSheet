{"version":3,"sources":["test/Path.test.ts"],"names":[],"mappings":"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","file":"Path.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport { Path } from '../Path';\r\n\r\ndescribe('Path', () => {\r\n  describe('Test', () => {\r\n\r\n    if (os.platform() === 'win32') {\r\n      it('Windows paths', () => {\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\a')).toEqual(true);\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\a\\\\')).toEqual(true);\r\n        expect(Path.isUnder('C:\\\\a\\\\b\\\\c.txt', 'C:\\\\a')).toEqual(true);\r\n\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\b')).toEqual(false);\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\b\\\\')).toEqual(false);\r\n        expect(Path.isUnder('C:\\\\a\\\\b\\\\c.txt', 'C:\\\\b')).toEqual(false);\r\n\r\n        expect(Path.isUnder('C:\\\\a\\\\b.txt', 'D:\\\\a')).toEqual(false);\r\n      });\r\n    }\r\n\r\n    it('POSIX-style paths', () => {\r\n      expect(Path.isUnder('/a/b.txt', '/a')).toEqual(true);\r\n      expect(Path.isUnder('/a/b.txt', '/a/')).toEqual(true);\r\n      expect(Path.isUnder('/a/b/c.txt', '/a')).toEqual(true);\r\n\r\n      expect(Path.isUnder('/a/b.txt', '/b')).toEqual(false);\r\n      expect(Path.isUnder('/a/b.txt', '/b/')).toEqual(false);\r\n      expect(Path.isUnder('/a/b/c.txt', '/b')).toEqual(false);\r\n    });\r\n    it('Edge cases', () => {\r\n      expect(Path.isUnder('/a', '/a')).toEqual(false);\r\n      expect(Path.isUnder('.', '.')).toEqual(false);\r\n      expect(Path.isUnder('', '')).toEqual(false);\r\n    });\r\n    it('Relative paths', () => {\r\n      expect(Path.isUnder('a/b/c', 'a/b')).toEqual(true);\r\n      expect(Path.isUnder('./a/b/c', './a/b')).toEqual(true);\r\n      expect(Path.isUnder('../a/b/c', '../a/b')).toEqual(true);\r\n\r\n      expect(Path.isUnder('a/b', 'a/b/c')).toEqual(false);\r\n      expect(Path.isUnder('./a/b', './a/b/c')).toEqual(false);\r\n      expect(Path.isUnder('../a/b', '../a/b/c')).toEqual(false);\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"../../../src"}