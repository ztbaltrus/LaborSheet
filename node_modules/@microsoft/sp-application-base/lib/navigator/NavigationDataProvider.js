import { Validate } from '@microsoft/sp-core-library';
import { SPHttpClient } from '@microsoft/sp-http';
import { _SPLoaderFlights } from '@microsoft/sp-loader';
var NavigationDataProvider = (function () {
    function NavigationDataProvider(serviceScope, validator) {
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        Validate.isNotNullOrUndefined(validator, 'validator');
        this._spHttpClient = serviceScope.consume(SPHttpClient.serviceKey);
        this._dataValidator = validator;
    }
    NavigationDataProvider.prototype.getData = function (url, props) {
        Validate.isNonemptyString(url, 'url');
        return _SPLoaderFlights._useNewBootSequence() ?
            this._store.then(function (store) { return store.getData(url, props); }) :
            this._fetchData(url);
    };
    Object.defineProperty(NavigationDataProvider.prototype, "_store", {
        get: function () {
            var _this = this;
            if (this._navigationStore) {
                return Promise.resolve(this._navigationStore);
            }
            return import('./NavigationDataStore' )
                .then(function (dataStore) {
                _this._navigationStore = new dataStore.default(NavigationDataProvider.storeKey, _this._fetchData.bind(_this), _this._dataValidator);
                return _this._navigationStore;
            });
        },
        enumerable: true,
        configurable: true
    });
    NavigationDataProvider.prototype._fetchData = function (url) {
        return this._spHttpClient.get(url + (url.indexOf('?') === -1 ? '?' : '&') + 'as=json', SPHttpClient.configurations.v1).then(function (response) {
            if (!response.ok) {
                throw new Error(response.statusMessage);
            }
            else {
                return response.json();
            }
        });
    };
    NavigationDataProvider.storeKey = 'sp-application-base:NavigationDataStore';
    return NavigationDataProvider;
}());
export default NavigationDataProvider;
