import { Guid, Validate, _SPKillSwitch } from '@microsoft/sp-core-library';
import { _SPLoaderFlights } from '@microsoft/sp-loader';
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import NavigationDataProvider from './NavigationDataProvider';
import NavigationOrchestrator from './NavigationOrchestrator';
var navigateQosScenarioName = 'Navigator.navigate';
var navigateToPreloadedDataQosScenarioName = 'Navigator.navigateToPreloadedData';
var prefetchNavigationDataQosScenarioName = 'Navigator.prefetch';
var NAVIGATE_TO_URL_ON_ERROR = Guid.parse('8d50eb28-44cd-4c82-86b7-f8d8a2c91206');
var Navigator = (function () {
    function Navigator(serviceScope, applicationManager) {
        var _this = this;
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._navigationDataProvider = new NavigationDataProvider(serviceScope, function (data) {
            _this._validatePreloadedData(data);
        });
        this._navigationOrchestrator = new NavigationOrchestrator(serviceScope, applicationManager, this);
    }
    Object.defineProperty(Navigator.prototype, "preloadedData", {
        get: function () {
            Validate.isNotNullOrUndefined(this._preloadedData, 'preloadedData');
            return this._preloadedData;
        },
        enumerable: true,
        configurable: true
    });
    Navigator.prototype.navigate = function (url, props) {
        var _this = this;
        Validate.isNonemptyString(url, 'url');
        var qosMonitor = new _QosMonitor(navigateQosScenarioName);
        return this._navigationDataProvider.getData(url, props).then(function (preloadedData) {
            return _this.navigateToPreloadedData(preloadedData);
        }).then(function (navigationResult) {
            qosMonitor.writeSuccess();
            return navigationResult;
        }).catch(function (error) {
            qosMonitor.writeUnexpectedFailure(undefined, error);
            if (_SPKillSwitch.isActivated(NAVIGATE_TO_URL_ON_ERROR, '04/16/2018', 'Navigate to url on error')) {
                location.href = url;
            }
            throw error;
        });
    };
    Navigator.prototype.prefetch = function (url, props) {
        if (!_SPLoaderFlights._useNewBootSequence) {
            return Promise.resolve({});
        }
        Validate.isNonemptyString(url, 'url');
        var qosMonitor = new _QosMonitor(prefetchNavigationDataQosScenarioName);
        return this._navigationDataProvider.getData(url, props).then(function (data) {
            qosMonitor.writeSuccess();
            return data;
        }).catch(function (error) {
            qosMonitor.writeUnexpectedFailure(undefined, error);
            throw error;
        });
    };
    Navigator.prototype.navigateToPreloadedData = function (preloadedData) {
        var _this = this;
        var qosMonitor = new _QosMonitor(navigateToPreloadedDataQosScenarioName);
        try {
            this._validatePreloadedData(preloadedData);
            this._preloadedData = preloadedData;
            return this._navigationOrchestrator.navigate(preloadedData).then(function (navigationResult) {
                _this._preloadedData = navigationResult.preloadedData;
                qosMonitor.writeSuccess();
                return navigationResult;
            }).catch(function (error) {
                qosMonitor.writeUnexpectedFailure('AsyncError', error);
                throw error;
            });
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure('SyncError', error);
            return Promise.reject(error);
        }
    };
    Navigator.prototype.navigateToApplication = function (preloadedData) {
        var _this = this;
        var qosMonitor = new _QosMonitor(navigateToPreloadedDataQosScenarioName);
        try {
            this._validatePreloadedData(preloadedData);
            this._preloadedData = preloadedData;
            return this._navigationOrchestrator.navigate(preloadedData).then(function (navigationResult) {
                _this._preloadedData = navigationResult.preloadedData;
                qosMonitor.writeSuccess();
                return Promise.resolve(navigationResult.application);
            });
        }
        catch (error) {
            qosMonitor.writeUnexpectedFailure(error);
            throw error;
        }
    };
    Navigator.prototype._validatePreloadedData = function (preloadedData) {
        Validate.isNotNullOrUndefined(preloadedData, 'preloadedData');
        Validate.isNotNullOrUndefined(preloadedData.spPageContextInfo, 'preloadedData.spPageContextInfo');
        Validate.isNonemptyString(preloadedData.clientSideApplicationId, 'preloadedData.clientSideApplicationId');
    };
    return Navigator;
}());
export default Navigator;
