import { ServiceScope } from '@microsoft/sp-core-library';
import { _IPreloadedData } from '@microsoft/sp-loader';
import ApplicationManager from '../ApplicationManager';
import BaseApplication from '../BaseApplication';
import { IExtendedNavigationResult } from './INavigationResult';
import Navigator from './Navigator';
/**
 * It orchestrates all different steps to navigate to an SPFx application.
 *
 * This includes updating the Page Context, loading the application customizers, initializing the application, etc.
 */
export default class NavigationOrchestrator {
    private static classicPagesComponentId;
    private static workbenchComponentId;
    private static _logSource;
    private _serviceScope;
    private _applicationManager;
    private _applicationCustomizerLoader;
    private _pageContext;
    /**
     * Raises an event for a page navigation.
     */
    static raiseNavigatedEvent(): void;
    /**
     * Creates a NavigationOrchestrator.
     *
     * @param serviceScope - Root service scope
     * @param applicationManager - Depending on the bootstrapping sequence, application manager is
     *                             injected or created inside.
     */
    constructor(serviceScope: ServiceScope, applicationManager?: ApplicationManager, navigator?: Navigator);
    /**
     * Does all the operation to navigate to a new preloaded data.
     *
     * @remarks
     * It assumes the preloaded data has already been validated. Not null, with a spPageContextInfo and an application id.
     */
    navigate<TApplication extends BaseApplication>(preloadedData: _IPreloadedData): Promise<IExtendedNavigationResult<TApplication>>;
    /**
     * Returns true if a navigator from the page context to the new preloaded data is a cross-site navigation.
     * This operation needs to happen before updating the page context with the new preloaded data.
     */
    private _isCrossSite(preloadedData, pageContext);
    private _fixPreloadedDataItem(preloadedData);
    /**
     * Loads the application customizers for the current page.
     * @param preloadedData - Preloaded data for the current page.
     */
    private _loadApplicationCustomizers(preloadedData);
}
