import { Validate } from '@microsoft/sp-core-library';
import { cloneDeep } from '@microsoft/sp-lodash-subset';
var NavigationDataStore = (function () {
    function NavigationDataStore(id, executor, validator, refreshThresholdMs, maxStoreSize) {
        Validate.isNonemptyString(id, 'id');
        Validate.isNotNullOrUndefined(executor, 'executor');
        Validate.isNotNullOrUndefined(validator, 'validator');
        this._id = id;
        this._executor = executor;
        this._dataValidator = validator;
        this._refreshThreshold = refreshThresholdMs || NavigationDataStore.refreshThresholdMs;
        this._maxStoreSize = maxStoreSize || NavigationDataStore.maxStoreSize;
        var storeItems = NavigationDataStore._initStore(id, this._maxStoreSize);
        this._buildMinHeap(storeItems);
    }
    NavigationDataStore._leftChild = function (index) {
        return 2 * index + 1;
    };
    NavigationDataStore._rightChild = function (index) {
        return 2 * index + 2;
    };
    NavigationDataStore._parent = function (index) {
        return Math.floor((index - 1) / 2);
    };
    NavigationDataStore._swap = function (items, leftIdx, rightIdx) {
        var temp = items[rightIdx];
        items[rightIdx] = items[leftIdx];
        items[leftIdx] = temp;
    };
    NavigationDataStore._initStore = function (id, maxSize) {
        var items = [];
        try {
            var serializedEntry = sessionStorage.getItem(id);
            if (serializedEntry && serializedEntry.length > 0) {
                var entries = JSON.parse(serializedEntry);
                if (Array.isArray(entries) && entries.length > 0) {
                    items = entries;
                    if (items.length > maxSize) {
                        items.splice(maxSize);
                    }
                }
            }
        }
        catch (e) {
        }
        return items;
    };
    NavigationDataStore._updateStore = function (id, items) {
        try {
            sessionStorage.setItem(id, JSON.stringify(items));
        }
        catch (e) {
        }
    };
    Object.defineProperty(NavigationDataStore.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavigationDataStore.prototype, "items", {
        get: function () {
            return this._store.items;
        },
        enumerable: true,
        configurable: true
    });
    NavigationDataStore.prototype.getData = function (url, props) {
        Validate.isNonemptyString(url, 'key');
        if (props && props.enableCaching) {
            var cachedItem = undefined;
            var cachedItemIdx = 0;
            for (; cachedItemIdx < this._store.size; cachedItemIdx++) {
                var item = this._store.items[cachedItemIdx];
                if (item && item.url === url) {
                    cachedItem = item;
                    break;
                }
            }
            if (cachedItem && cachedItem.fetchedTimeStamp) {
                var threshold = Date.now() - this._refreshThreshold;
                var hasExpired = cachedItem.fetchedTimeStamp <= threshold;
                if (hasExpired) {
                    return this._fetchDataAndUpdateStore(url, true, cachedItem, cachedItemIdx);
                }
                else {
                    return Promise.resolve(cloneDeep(cachedItem.data));
                }
            }
            else {
                return this._fetchDataAndUpdateStore(url, false);
            }
        }
        else {
            return this._executor(url);
        }
    };
    NavigationDataStore.prototype._fetchDataAndUpdateStore = function (url, isUpdate, cachedItem, cachedItemIdx) {
        var _this = this;
        return this._executor(url).then(function (data) {
            try {
                _this._dataValidator(data);
            }
            catch (e) {
                return data;
            }
            if (isUpdate) {
                Validate.isNotNullOrUndefined(cachedItem, 'cachedItem');
                Validate.isNotNullOrUndefined(cachedItemIdx, 'cachedItemIdx');
                cachedItem.fetchedTimeStamp = Date.now();
                cachedItem.data = data;
                _this._heapify(cachedItemIdx);
            }
            else {
                _this._insert({
                    data: data,
                    fetchedTimeStamp: Date.now(),
                    url: url
                });
            }
            NavigationDataStore._updateStore(_this._id, _this._store.items);
            return cloneDeep(data);
        });
    };
    NavigationDataStore.prototype._heapify = function (index) {
        var leftIdx = NavigationDataStore._leftChild(index);
        var rightIdx = NavigationDataStore._rightChild(index);
        var smallestIdx = undefined;
        if (leftIdx < this._store.size &&
            this._store.items[leftIdx].fetchedTimeStamp < this._store.items[index].fetchedTimeStamp) {
            smallestIdx = leftIdx;
        }
        else {
            smallestIdx = index;
        }
        if (rightIdx < this._store.size &&
            this._store.items[rightIdx].fetchedTimeStamp < this._store.items[smallestIdx].fetchedTimeStamp) {
            smallestIdx = rightIdx;
        }
        if (smallestIdx !== index) {
            NavigationDataStore._swap(this._store.items, index, smallestIdx);
            this._heapify(smallestIdx);
        }
    };
    NavigationDataStore.prototype._extractMin = function () {
        if (this._store.size < 1) {
            return undefined;
        }
        var minItem = this._store.items[0];
        this._store.items[0] = this._store.items[this._store.size - 1];
        this._store.size -= 1;
        this._heapify(0);
        this._store.items.splice(this._store.size);
        return minItem;
    };
    NavigationDataStore.prototype._reduceKey = function (index, item) {
        this._store.items[index] = item;
        while (index >= 0 && this._store.items[NavigationDataStore._parent(index)] < this._store.items[index]) {
            NavigationDataStore._swap(this._store.items, index, NavigationDataStore._parent(index));
            index = NavigationDataStore._parent(index);
        }
    };
    NavigationDataStore.prototype._insert = function (item) {
        if (this._store.size === this._maxStoreSize) {
            this._extractMin();
        }
        this._store.size += 1;
        this._reduceKey(this._store.size - 1, item);
    };
    NavigationDataStore.prototype._buildMinHeap = function (items) {
        this._store = {
            items: items,
            size: items.length
        };
        for (var idx = Math.floor(this._store.size / 2); idx >= 0; idx--) {
            this._heapify(idx);
        }
    };
    NavigationDataStore.refreshThresholdMs = 30 * 60 * 1000; 
    NavigationDataStore.maxStoreSize = 7;
    return NavigationDataStore;
}());
export default NavigationDataStore;
