import { Promise as ODSPPromise } from '@ms/odsp-utilities-bundle';
import { ThemeProvider } from '@ms/odsp-utilities-bundle';
import { IThemeData } from '@ms/odsp-utilities-bundle';
import { ServiceScope } from '@microsoft/sp-core-library';
import { IColorPalette } from '@ms/sp-suite-nav';
/**
 * The class controls applying a theme to the current Page.
 * The theme is a web level setting, if a theme is applied this class with call loadtheme
 * which will update the styles that are registered with load-themed-styles.
 *
 * The loadData method is called by the ThemeProvider class when it needs to get the IThemeData.
 * Once it has theme data it will cache it in local storage using the themedCssFolderUrl as the cache key.
 *
 * @internal
 */
export default class SPThemeProvider {
    private static _currentPalette;
    private _pageContext;
    private _httpClient;
    private _themeOverride;
    private _themeProvider;
    private _loadThemedStylesPromiseMap;
    private static _deleteNullThemeColor(palette);
    private static _createDefaultTheme();
    constructor(serviceScope: ServiceScope);
    loadThemedStyles(): ODSPPromise<IColorPalette>;
    loadData(): ODSPPromise<IThemeData>;
    /**
     * Gets the Theme provider.
     *
     * @remarks
     * Derived classes can extend this method to provide a customized theme provider
     */
    protected _getThemeProvider(): ThemeProvider;
    private _getCacheToken();
    private _dontOptimizeLoadTheme();
}
