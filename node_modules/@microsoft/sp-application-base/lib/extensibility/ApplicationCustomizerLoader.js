import { Guid, Validate, _SPFlight } from '@microsoft/sp-core-library';
import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import { _ExtensionManager } from '@microsoft/sp-extension-base';
import { SPComponentLoader, _ManifestStore } from '@microsoft/sp-loader';
import { isEqual } from '@microsoft/sp-lodash-subset';
import ApplicationCustomizerContext from './ApplicationCustomizerContext';
import BaseApplicationCustomizer from './BaseApplicationCustomizer';
import ClientSideCustomAction from './customAction/ClientSideCustomAction';
import CustomActionLocations from './customAction/CustomActionLocations';
import PlaceholderManager from './placeholder/PlaceholderManager';
export var LOAD_EXTENSIONS_IN_PLACE_NAV = Guid.parse('cb299263-5dfc-4b81-8094-a0b3abda90bc');
var ApplicationCustomizerLoader = (function () {
    function ApplicationCustomizerLoader(serviceScope) {
        var _this = this;
        this._customActionFromPreloadedData = [];
        this._debugCustomActions = [];
        this._debugCustomizerLoaded = false;
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._extensionManager = new _ExtensionManager(serviceScope, BaseApplicationCustomizer);
        serviceScope.whenFinished(function () {
            _this._placeholderManager = serviceScope.consume(PlaceholderManager.serviceKey);
            _this._placeholderManager._enable();
        });
        this._currentCustomActions = new Set();
    }
    ApplicationCustomizerLoader.prototype.loadExtensions = function (preloadedCustomActions) {
        var _this = this;
        var futureCustomActions = new Set(preloadedCustomActions);
        var hadCustomActions = this._currentCustomActions.size > 0;
        var hasDebugCustomActions = this._hasDebugCustomActions();
        var willHaveCustomActions = futureCustomActions.size > 0 || hasDebugCustomActions;
        var areCustomActionsEqual = (!hadCustomActions && !willHaveCustomActions) ||
            (hadCustomActions && willHaveCustomActions && isEqual(this._currentCustomActions, futureCustomActions));
        var extensionsDisposed = false;
        this._currentCustomActions = futureCustomActions;
        if (hadCustomActions && !areCustomActionsEqual) {
            _TraceLogger.logVerbose(ApplicationCustomizerLoader._logSource, 'Disposing existing extensions');
            this._disposeExtensions();
            extensionsDisposed = true;
        }
        if ((willHaveCustomActions && !areCustomActionsEqual) ||
            (hasDebugCustomActions && extensionsDisposed) 
        ) {
            _TraceLogger.logVerbose(ApplicationCustomizerLoader._logSource, 'Loading new extensions');
            return this._loadExtensions(preloadedCustomActions).then(function () { return _this._loadDebugCustomizerIfEnabled(); });
        }
        return this._loadDebugCustomizerIfEnabled();
    };
    Object.defineProperty(ApplicationCustomizerLoader.prototype, "_customActions", {
        get: function () {
            return this._debugCustomActions.concat(this._customActionFromPreloadedData);
        },
        enumerable: true,
        configurable: true
    });
    ApplicationCustomizerLoader.prototype._loadDebugCustomizerIfEnabled = function () {
        var _this = this;
        var debugApplicationCustomizerId = 'd29758ba-0fc0-4eac-bcfd-7fe5a7d0bc32';
        if (_SPFlight.isDebugFlightEnabled && _SPFlight.isEnabled(1178 ) &&
            !this._debugCustomizerLoaded) {
            var customAction_1 = ClientSideCustomAction._tryCreateFromDebugData('ClientSideExtension.ApplicationCustomizer', Guid.parse(debugApplicationCustomizerId), 
            undefined, 
            0);
            if (customAction_1) {
                return _ManifestStore.instance.requestManifest(debugApplicationCustomizerId).then(function () {
                    _this._createApplicationCustomizer(customAction_1);
                    _this._debugCustomizerLoaded = true;
                }).catch(function (error) {
                    _TraceLogger.logError(ApplicationCustomizerLoader._logSource, error);
                });
            }
        }
        return Promise.resolve();
    };
    ApplicationCustomizerLoader.prototype._disposeExtensions = function () {
        this._extensionManager.disposeExtensions();
        if (this._placeholderManager.placeholders) {
            this._placeholderManager.placeholders.forEach(function (placeholder) { return placeholder.disposeEntries(); });
        }
        this._debugCustomizerLoaded = false;
    };
    ApplicationCustomizerLoader.prototype._loadExtensions = function (preloadedCustomActions) {
        this._loadCustomActions(preloadedCustomActions);
        var extensionPromises = [];
        var customActions = this._customActions;
        for (var _i = 0, customActions_1 = customActions; _i < customActions_1.length; _i++) {
            var customAction = customActions_1[_i];
            if (customAction.location === CustomActionLocations.APPLICATION_CUSTOMIZER) {
                extensionPromises.push(this._createApplicationCustomizer(customAction));
            }
        }
        return Promise.all(extensionPromises).then(function (extensions) { return; });
    };
    ApplicationCustomizerLoader.prototype._createApplicationCustomizer = function (customAction) {
        var _this = this;
        var qosMonitor = new _QosMonitor('ApplicationCustomizer.Create');
        return this._extensionManager.createExtension(customAction.clientSideComponentId.toString(), customAction.clientSideComponentProperties, function (extensionContextParameters) {
            return new ApplicationCustomizerContext(extensionContextParameters, {
                sequence: customAction.sequence !== undefined ? customAction.sequence : 65535 
            });
        }).then(function (extension) {
            qosMonitor.writeSuccess(_this._createQosExtraData(customAction));
            return extension;
        }).catch(function (error) {
            var err = new Error("Failed to create application customizer '" + customAction.tag + "'. Error information is '" + error.message + "'."); 
            qosMonitor.writeExpectedFailure('FailedCreateExtension', error, _this._createQosExtraData(customAction));
            _TraceLogger.logError(ApplicationCustomizerLoader._logSource, err);
            throw err;
        });
    };
    ApplicationCustomizerLoader.prototype._createQosExtraData = function (customAction) {
        return {
            customAction: customAction.tag
        };
    };
    ApplicationCustomizerLoader.prototype._loadCustomActions = function (customActions) {
        this._customActionFromPreloadedData = this._loadCustomActionsFromPreloadedData(customActions);
        this._debugCustomActions = this._loadCustomActionsFromQueryParameter();
    };
    ApplicationCustomizerLoader.prototype._loadCustomActionsFromPreloadedData = function (customActions) {
        var clientSideCustomActions = [];
        if (!!customActions) {
            for (var _i = 0, customActions_2 = customActions; _i < customActions_2.length; _i++) {
                var customAction = customActions_2[_i];
                if (customAction.location === CustomActionLocations.APPLICATION_CUSTOMIZER) {
                    var clientSideCustomAction = ClientSideCustomAction._tryCreateFromPreloadedCustomAction(customAction);
                    if (clientSideCustomAction) {
                        clientSideCustomActions.push(clientSideCustomAction);
                    }
                }
            }
        }
        return clientSideCustomActions;
    };
    ApplicationCustomizerLoader.prototype._hasDebugCustomActions = function () {
        var queryParameters = new URL(window.location.href).searchParams;
        return !!queryParameters.get('customActions') ||
            (_SPFlight.isDebugFlightEnabled && _SPFlight.isEnabled(1178 )); 
    };
    ApplicationCustomizerLoader.prototype._loadCustomActionsFromQueryParameter = function () {
        var parameters = new URL(window.location.href).searchParams;
        var parameterValue = parameters.get('customActions');
        var clientSideCustomActions = [];
        if (parameterValue) {
            var qosMonitor = new _QosMonitor('ApplicationCustomizerLoader.parseQueryParam');
            try {
                var decodedParameterValue = decodeURIComponent(parameterValue);
                var queryValue = JSON.parse(decodedParameterValue);
                var missingManifestIds = [];
                if (queryValue) {
                    for (var _i = 0, _a = Object.keys(queryValue); _i < _a.length; _i++) {
                        var key = _a[_i];
                        var clientSideComponentId = Guid.tryParse(key);
                        var location_1 = queryValue[key].location;
                        var properties = queryValue[key].properties;
                        var sequence = queryValue[key].sequence;
                        Validate.isNotNullOrUndefined(clientSideComponentId, 'clientSideComponentId');
                        Validate.isNotNullOrUndefined(location_1, 'location');
                        if (!SPComponentLoader.tryGetManifestById(clientSideComponentId.toString())) {
                            missingManifestIds.push(clientSideComponentId);
                            continue; 
                        }
                        if (clientSideComponentId && location_1) {
                            var customActions = ClientSideCustomAction._tryCreateFromDebugData(location_1, clientSideComponentId, properties ? JSON.stringify(properties) : '', sequence);
                            if (customActions) {
                                clientSideCustomActions.push(customActions);
                            }
                        }
                    }
                }
                if (missingManifestIds.length > 0) {
                    this._processMissingManifestsErrors(missingManifestIds, qosMonitor);
                }
                else {
                    qosMonitor.writeSuccess();
                }
            }
            catch (e) {
                this._processQueryParamParseErrors(e, parameterValue, qosMonitor);
            }
        }
        return clientSideCustomActions;
    };
    ApplicationCustomizerLoader.prototype._processMissingManifestsErrors = function (missingManifestIds, qosMonitor) {
        var errorMessage = 'Custom action component ids are specified by query parameters but ' +
            'matching manifests cannot be found.';
        var error = new Error(errorMessage + ' Ids: ' + missingManifestIds.join(', '));
        _TraceLogger.logError(ApplicationCustomizerLoader._logSource, error, 'parseCustomActionsQueryParameter');
        console.error(error.message);
        qosMonitor.writeExpectedFailure('ManifestNotFound', error);
    };
    ApplicationCustomizerLoader.prototype._processQueryParamParseErrors = function (error, parameterValue, qosMonitor) {
        _TraceLogger.logError(ApplicationCustomizerLoader._logSource, new Error('Failed to parse the "customActions" URL query parameter:' + error.message));
        console.error('The "customActions" URL query parameter is improperly formatted: '
            + decodeURIComponent(parameterValue));
        qosMonitor.writeExpectedFailure('ParseFailure', error);
    };
    ApplicationCustomizerLoader._logSource = _LogSource.create('ApplicationCustomizerLoader');
    return ApplicationCustomizerLoader;
}());
export default ApplicationCustomizerLoader;
