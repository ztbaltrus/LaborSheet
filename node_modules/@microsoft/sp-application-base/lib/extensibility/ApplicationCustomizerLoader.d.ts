import { Guid, ServiceScope } from '@microsoft/sp-core-library';
import { _IPreloadedCustomAction } from '@microsoft/sp-loader';
/**
 * This is just an empty interface to represent the type of the extension properties
 */
export interface IGenericExtensionProperties {
}
export declare const LOAD_EXTENSIONS_IN_PLACE_NAV: Guid;
/**
 * A helper class for loading ApplicationCustomizer extensions.
 */
export default class ApplicationCustomizerLoader {
    private static _logSource;
    private _extensionManager;
    private _placeholderManager;
    private _customActionFromPreloadedData;
    private _debugCustomActions;
    private _currentCustomActions;
    private _debugCustomizerLoaded;
    constructor(serviceScope: ServiceScope);
    /**
     * This method is called when the client-side application is initializing and before it has
     * rendered. It loads the associated client-side extensions. It may perform asynchronous
     * operations.
     */
    loadExtensions(preloadedCustomActions?: _IPreloadedCustomAction[]): Promise<void>;
    private readonly _customActions;
    /**
     * If the debugging flight is enabled, automatically add the debug application customizer.
     */
    private _loadDebugCustomizerIfEnabled();
    /**
     * Disposes all existing application customizers.
     * It also removes all placeholder contents, as only application customizers can use them.
     */
    private _disposeExtensions();
    private _loadExtensions(preloadedCustomActions?);
    private _createApplicationCustomizer(customAction);
    private _createQosExtraData(customAction);
    /**
     * Loads custom actions from both the preloaded data and the query parameter.
     */
    private _loadCustomActions(customActions?);
    /**
     * Reads the custom actions from the preloaded data and creates ClientSideCustomAction objects for them.
     * @param customActions - Custom actions from the preloaded data.
     * @returns Array with the processed custom actions.
     */
    private _loadCustomActionsFromPreloadedData(customActions?);
    private _hasDebugCustomActions();
    private _loadCustomActionsFromQueryParameter();
    private _processMissingManifestsErrors(missingManifestIds, qosMonitor);
    private _processQueryParamParseErrors(error, parameterValue, qosMonitor);
}
