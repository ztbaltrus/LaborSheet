import { Validate } from '@microsoft/sp-core-library';
import PlaceholderContent from './PlaceholderContent';
import PlaceholderName from './PlaceholderName';
var Placeholder = (function () {
    function Placeholder(definition, manager) {
        this._entries = [];
        Validate.isNotNullOrUndefined(definition, 'definition');
        Validate.isNotNullOrUndefined(definition.domElement, 'definition.domElement');
        Validate.isNotNullOrUndefined(manager, 'manager');
        this._name = definition.name;
        this._domElement = definition.domElement;
        this._manager = manager;
    }
    Object.defineProperty(Placeholder.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Placeholder.prototype.createPlaceholderContent = function (sequence, options) {
        var newDiv = document.createElement('div');
        var position = this._addContentDiv(newDiv, sequence);
        var placeholderContent = new PlaceholderContent({
            placeholder: this,
            sequence: sequence,
            domElement: newDiv,
            options: options
        });
        this._entries.splice(position, 0, { placeholderContent: placeholderContent, sequence: sequence });
        return placeholderContent;
    };
    Placeholder.prototype.importEntries = function (sourcePlaceholder) {
        var _this = this;
        sourcePlaceholder._entries.forEach(function (entry) {
            _this._addContentDiv(entry.placeholderContent.domElement, entry.sequence);
            _this._entries.push(entry);
            entry.placeholderContent._setPlaceholder(_this);
        });
        sourcePlaceholder._entries = [];
    };
    Placeholder.prototype.removePlaceholderContent = function (placeholderContent) {
        for (var i = 0; i < this._entries.length; i++) {
            if (this._entries[i].placeholderContent === placeholderContent) {
                this._domElement.removeChild(this._entries[i].placeholderContent.domElement);
                this._entries.splice(i, 1);
            }
        }
    };
    Placeholder.prototype.disposeEntries = function () {
        var _this = this;
        var currentContents = this._entries.map(function (e) { return e.placeholderContent; });
        currentContents.forEach(function (content) {
            _this.removePlaceholderContent(content);
            content.dispose();
        });
    };
    Placeholder.prototype._addContentDiv = function (domElement, sequence) {
        var i;
        if (this.name === PlaceholderName.Bottom) {
            i = this._entries.length;
            while (i > 0 && sequence > this._entries[i - 1].sequence) {
                i--;
            }
        }
        else {
            i = 0;
            while (i < this._entries.length && sequence >= this._entries[i].sequence) {
                i++;
            }
        }
        if (i < this._entries.length) {
            var nextDiv = this._entries[i].placeholderContent.domElement;
            this._domElement.insertBefore(domElement, nextDiv);
        }
        else {
            this._domElement.appendChild(domElement);
        }
        return i;
    };
    return Placeholder;
}());
export default Placeholder;
