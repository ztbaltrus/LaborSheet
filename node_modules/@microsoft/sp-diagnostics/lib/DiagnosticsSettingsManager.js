import { Guid, _SPKillSwitch } from '@microsoft/sp-core-library';
import { cloneDeep, merge } from '@microsoft/sp-lodash-subset';
var DiagnosticsSettingsManager = (function () {
    function DiagnosticsSettingsManager() {
    }
    DiagnosticsSettingsManager.initialize = function (settings) {
        this.settings = cloneDeep(settings);
        this._initialized = true;
        this._normalizeSiteIdWebId();
    };
    DiagnosticsSettingsManager.updateSettings = function (settings) {
        this.settings = merge(this.settings, settings);
        this._normalizeSiteIdWebId();
    };
    Object.defineProperty(DiagnosticsSettingsManager, "isInitialized", {
        get: function () {
            return this._initialized;
        },
        enumerable: true,
        configurable: true
    });
    DiagnosticsSettingsManager.shouldUseBuffer = function () {
        var shouldUse = !_SPKillSwitch.isActivated(DiagnosticsSettingsManager.enableCircularBufferLogging, '11/27/2017', 'enableCircularBufferLogging');
        return shouldUse;
    };
    DiagnosticsSettingsManager._normalizeId = function (id) {
        var guid = Guid.tryParse(id);
        return guid ? guid.toString() : id;
    };
    DiagnosticsSettingsManager._normalizeSiteIdWebId = function () {
        this.settings.siteId = this._normalizeId(this.settings.siteId);
        this.settings.webId = this._normalizeId(this.settings.webId);
    };
    DiagnosticsSettingsManager.enableCircularBufferLogging = Guid.parse('4b6e1a58-3e0c-43e2-b9cb-1a470f6fe402');
    DiagnosticsSettingsManager._initialized = false;
    return DiagnosticsSettingsManager;
}());
export default DiagnosticsSettingsManager;
