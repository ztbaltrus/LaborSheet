import LogManager from '../LogManager/LogManager';
import DefaultEngagementHandler from './DefaultEngagementHandler';
import DiagnosticsSettingsManager from '../../DiagnosticsSettingsManager';
var EngagementLogger = (function () {
    function EngagementLogger() {
    }
    EngagementLogger._addHandler = function (logger) {
        if (DiagnosticsSettingsManager.shouldUseBuffer()) {
            EngagementLogger._handler = function (e) { logger.logData(e); };
            EngagementLogger._logManager.addHandler(EngagementLogger._handler);
        }
        else {
            EngagementLogger._logger = logger;
        }
    };
    EngagementLogger.startRealTimeProcessing = function () {
        if (!this._shouldProcessInRealTime) {
            EngagementLogger._logManager.processAll(EngagementLogger._handler);
            this._shouldProcessInRealTime = true;
        }
    };
    EngagementLogger.log = function (engagementData) {
        EngagementLogger._logEngagementData(engagementData);
    };
    EngagementLogger.logEvent = function (tagName, actionName) {
        var logData = { name: tagName };
        if (actionName && actionName.length !== 0) {
            logData.extraData = { action: actionName };
        }
        EngagementLogger._logEngagementData(logData);
    };
    EngagementLogger.logEventWithLogEntry = function (logEntry) {
        var logData = {
            name: logEntry.moduleName + '.' + logEntry.logFeature,
            extraData: logEntry.logProperties
        };
        EngagementLogger._logEngagementData(logData, true);
    };
    EngagementLogger._logEngagementData = function (engagementData, isLogEntry) {
        if (isLogEntry === void 0) { isLogEntry = false; }
        if (!engagementData.name || engagementData.name.length === 0) {
            throw new Error('LogEntry is invalid');
        }
        EngagementLogger._checkValidTagName(engagementData, isLogEntry);
        EngagementLogger._addContextData(engagementData);
        if (DiagnosticsSettingsManager.shouldUseBuffer()) {
            EngagementLogger._logManager.log(engagementData);
        }
        else {
            EngagementLogger._logger.logData(engagementData);
        }
    };
    EngagementLogger._checkValidTagName = function (engagementData, isLogEntry) {
        if (isLogEntry === void 0) { isLogEntry = false; }
        if (!isLogEntry) {
            var tagNameRegex = /(\w+)\.(\w+).(\w+)/ig;
            if (tagNameRegex.test(engagementData.name) === false) {
                throw new Error(engagementData.name + " tagName does not follow AppName.ControlName.ActionName pattern");
            }
        }
    };
    EngagementLogger._addContextData = function (data) {
        if (DiagnosticsSettingsManager.isInitialized) {
            data.siteId = DiagnosticsSettingsManager.settings.siteId;
            data.webId = DiagnosticsSettingsManager.settings.webId;
        }
    };
    EngagementLogger._logManager = new LogManager();
    EngagementLogger._logger = new DefaultEngagementHandler();
    return EngagementLogger;
}());
export default EngagementLogger;
