import { Validate } from '@microsoft/sp-core-library';
import LogEvent from './LogEvent';
import { LogLevel } from '../LogLevel';
import DefaultTraceHandler from './DefaultTraceHandler';
import LogManager from './../LogManager/LogManager';
var TraceLogger = (function () {
    function TraceLogger() {
    }
    TraceLogger._addHandler = function (logger) {
        TraceLogger._logManager.addHandler(logger.log);
        TraceLogger._logManager.processAll(logger.log);
        TraceLogger._verboseLogManager.addHandler(logger.verbose);
        TraceLogger._verboseLogManager.processAll(logger.verbose);
    };
    TraceLogger.logError = function (source, error, eventName, resultCode) {
        Validate.isNotNullOrUndefined(error, 'error');
        this._log(source, error, eventName, true, resultCode);
    };
    TraceLogger.logErrorData = function (data) {
        Validate.isNotNullOrUndefined(data.error, 'error');
        var errorInfo = data.logEntry ? data.logEntry.toString() : data.error;
        this._log(data.source, errorInfo, data.eventName, true, data.resultCode, data.serviceScope);
    };
    TraceLogger.logVerbose = function (source, message, eventName) {
        Validate.isNonemptyString(message, 'message');
        this._log(source, message, eventName, false, undefined);
    };
    TraceLogger.logVerboseData = function (data) {
        var message = data.logEntry ? data.logEntry.toString() : data.message;
        this._log(data.source, message, data.eventName, false, undefined, data.serviceScope);
    };
    TraceLogger.logErrorWithLogEntry = function (source, logEntry, eventName, resultCode) {
        Validate.isNotNullOrUndefined(logEntry, 'LogEntry');
        this._log(source, logEntry.toString(), eventName, true, resultCode);
    };
    Object.defineProperty(TraceLogger, "shouldWriteToConsole", {
        get: function () { return TraceLogger._shouldWriteToConsole; },
        set: function (shouldWrite) {
            if (TraceLogger._shouldWriteToConsole && !shouldWrite) {
                TraceLogger._logManager.removeHandler(TraceLogger._defaultLogger.log);
                TraceLogger._verboseLogManager.removeHandler(TraceLogger._defaultLogger.verbose);
            }
            else if (!TraceLogger._shouldWriteToConsole && shouldWrite) {
                TraceLogger._logManager.addHandler(TraceLogger._defaultLogger.log);
                TraceLogger._verboseLogManager.addHandler(TraceLogger._defaultLogger.verbose);
            }
            TraceLogger._shouldWriteToConsole = shouldWrite;
        },
        enumerable: true,
        configurable: true
    });
    TraceLogger.logVerboseWithLogEntry = function (source, logEntry, eventName) {
        Validate.isNotNullOrUndefined(logEntry, 'LogEntry');
        this._log(source, logEntry.toString(), eventName, false, undefined);
    };
    TraceLogger._log = function (source, data, eventName, isError, resultCode, serviceScope) {
        var enhancedEventName = this._addEventPrefix(source, eventName);
        var logEvent;
        if (isError) {
            logEvent = LogEvent.log(enhancedEventName, data, LogLevel.Error, serviceScope);
            TraceLogger._logManager.log({ data: data, eventName: logEvent.prefix, resultCode: resultCode });
        }
        else {
            logEvent = LogEvent.log(enhancedEventName, data.toString(), LogLevel.Verbose, serviceScope);
            TraceLogger._verboseLogManager.log({ data: data, eventName: logEvent.prefix });
        }
        if (TraceLogger.shouldWriteToConsole || (DEBUG && !DEPRECATED_UNIT_TEST)) {
            this._writeToConsole(logEvent, isError, resultCode);
        }
    };
    TraceLogger._addEventPrefix = function (source, eventName) {
        if (!eventName) {
            return source.id;
        }
        else {
            return source.id + "." + eventName;
        }
    };
    TraceLogger._writeToConsole = function (logEvent, isError, resultCode) {
        var errorString = logEvent.toString();
        if (resultCode) {
            errorString += ". resultCode: " + resultCode;
        }
        if (isError) {
            console.error(errorString);
        }
        else {
            console.log(errorString);
        }
    };
    TraceLogger._logManager = new LogManager();
    TraceLogger._verboseLogManager = new LogManager();
    TraceLogger._defaultLogger = new DefaultTraceHandler();
    TraceLogger._shouldWriteToConsole = false;
    return TraceLogger;
}());
export default TraceLogger;
