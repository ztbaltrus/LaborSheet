import { Text, Guid, Validate } from '@microsoft/sp-core-library';
import DiagnosticsSettingsManager from '../../DiagnosticsSettingsManager';
import TraceLogger from '../Trace/TraceLogger';
import QosLogger from './QosLogger';
import EngagementLogger from '../Engagement/EngagementLogger';
var QosMonitor = (function () {
    function QosMonitor(scenarioName, copyToEngagement) {
        if (copyToEngagement === void 0) { copyToEngagement = false; }
        this._qosResultTypeValue = (_a = {},
            _a[0 ] = 'Success',
            _a[1 ] = 'Failure',
            _a[2 ] = 'ExpectedFailure',
            _a);
        Validate.isNonemptyString(scenarioName, 'scenarioName');
        this._id = Guid.newGuid().toString();
        QosLogger.instance.startQosMonitor(this._id, { name: scenarioName });
        this._scenarioName = scenarioName;
        this._hasEnded = false;
        this._copyToEngagement = copyToEngagement;
        var _a;
    }
    QosMonitor.startRealTimeProcessing = function () {
        if (!QosLogger.instance.shouldProcessInRealTime) {
            this._shouldProcessInRealTime(true);
        }
    };
    QosMonitor._shouldProcessInRealTime = function (processInRealTime) {
        QosLogger.instance.shouldProcessInRealTime = processInRealTime;
    };
    Object.defineProperty(QosMonitor.prototype, "name", {
        get: function () {
            return DiagnosticsSettingsManager.shouldUseBuffer() ? this._scenarioName : QosLogger.instance.getQosEvent(this._id).data.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "shortEventName", {
        get: function () {
            return DiagnosticsSettingsManager.shouldUseBuffer() ? 'Qos' : QosLogger.instance.getQosEvent(this._id).shortEventName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "resultCode", {
        get: function () {
            return DiagnosticsSettingsManager.shouldUseBuffer() ? this._endResultCode : QosLogger.instance.getQosEvent(this._id).data.resultCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "resultType", {
        get: function () {
            return DiagnosticsSettingsManager.shouldUseBuffer() ? this._endResult : QosLogger.instance.getQosEvent(this._id).data.resultType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "extraData", {
        get: function () {
            return DiagnosticsSettingsManager.shouldUseBuffer() ? this._endExtraData : QosLogger.instance.getQosEvent(this._id).data.extraData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosMonitor.prototype, "hasEnded", {
        get: function () {
            return this._hasEnded;
        },
        enumerable: true,
        configurable: true
    });
    QosMonitor.prototype.writeSuccess = function (extraData) {
        this._writeQosEnd(0 , undefined, undefined, extraData);
    };
    QosMonitor.prototype.writeUnexpectedFailure = function (tagNameSuffix, ex, extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultUnexpected'; }
        this._writeQosEnd(1 , tagNameSuffix, ex, extraData);
    };
    QosMonitor.prototype.writeExpectedFailure = function (tagNameSuffix, ex, extraData) {
        if (tagNameSuffix === void 0) { tagNameSuffix = 'DefaultExpected'; }
        this._writeQosEnd(2 , tagNameSuffix, ex, extraData);
    };
    QosMonitor.prototype._writeQosEnd = function (resultType, tagNameSuffix, ex, extraData) {
        if (!QosLogger.instance.getQosEvent(this._id) && !DiagnosticsSettingsManager.shouldUseBuffer()) {
            throw new Error('monitor instance is null or undefined');
        }
        if (!this._shouldSkip(resultType)) {
            this._endResultCode = tagNameSuffix;
            this._endExtraData = extraData;
            this._endResult = resultType;
            var endData = {
                resultCode: this._endResultCode,
                resultType: this._endResult,
                error: ex ? ex.message : undefined,
                extraData: this._endExtraData
            };
            QosLogger.instance.writeQosEndResult(this._id, endData);
            this._writeToEngagement();
        }
    };
    QosMonitor.prototype._shouldSkip = function (result) {
        if (this._hasEnded && (this._endResult !== undefined)) {
            var message = Text.format(QosMonitor.qosMonitorHasEndedErrorString, this.name, this._qosResultTypeValue[this._endResult], this._qosResultTypeValue[result]);
            if (this._endResult !== result) {
                TraceLogger.logError(QosMonitor.logSource, new Error(message));
            }
            if (DEBUG) {
                TraceLogger.logVerbose(QosMonitor.logSource, message, 'skipEnd');
            }
            return true;
        }
        else {
            this._hasEnded = true;
            return false;
        }
    };
    QosMonitor.prototype._writeToEngagement = function () {
        if (this._shouldWriteToEngagement()) {
            var engagementData = {
                name: 'Spfx.Qos.ToEngagement',
                extraData: this.extraData || {}
            };
            engagementData.extraData['qosName'] = this.name;
            if (this.resultType) {
                engagementData.extraData['qosResultType'] = this._qosResultTypeValue[this.resultType];
            }
            if (this.resultCode) {
                engagementData.extraData['qosResultCode'] = this.resultCode;
            }
            EngagementLogger.log(engagementData);
        }
    };
    QosMonitor.prototype._shouldWriteToEngagement = function () {
        var shouldWriteEngagement = this._copyToEngagement &&
            (DiagnosticsSettingsManager.shouldUseBuffer() || !!QosLogger.instance.getQosEvent(this._id).data);
        return shouldWriteEngagement;
    };
    QosMonitor.logSource = {
        id: 'QosMonitor'
    };
    QosMonitor.qosMonitorHasEndedErrorString = 'QoS monitor \'{0}\' has ended with \'{1}\' already. Ignoring \'{2}\' tag.';
    return QosMonitor;
}());
export default QosMonitor;
