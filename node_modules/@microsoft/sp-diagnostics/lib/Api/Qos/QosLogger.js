import ExecutionQueue from '../ExecutionQueue';
import DiagnosticsSettingsManager from '../../DiagnosticsSettingsManager';
var QosLogger = (function () {
    function QosLogger() {
        this._qosEvents = new Map();
        this._deferExecutor = new ExecutionQueue();
        this._shouldProcessInRealTime = false;
        this.initializeLogger();
    }
    Object.defineProperty(QosLogger, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new QosLogger();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(QosLogger.prototype, "shouldProcessInRealTime", {
        get: function () {
            return this._shouldProcessInRealTime;
        },
        set: function (processInRealTime) {
            this._shouldProcessInRealTime = processInRealTime;
            this._deferExecutor.shouldExecuteInRealTime = processInRealTime;
        },
        enumerable: true,
        configurable: true
    });
    QosLogger.prototype.setLogger = function (qosLogger) {
        this._qosLogger = qosLogger;
    };
    QosLogger.prototype.getQosEvent = function (key) {
        return this._qosEvents.get(key);
    };
    QosLogger.prototype.startQosMonitor = function (key, startData) {
        if (!this._qosEvents.has(key)) {
            if (DiagnosticsSettingsManager.shouldUseBuffer()) {
                this._deferExecutor.addExecutionEntry('start', key, startData);
            }
            else {
                this._startMonitor(key, startData);
            }
        }
    };
    QosLogger.prototype.writeQosEndResult = function (key, endData) {
        if (DiagnosticsSettingsManager.shouldUseBuffer()) {
            this._deferExecutor.addExecutionEntry('end', key, endData);
        }
        else {
            this._endMonitor(key, endData);
        }
    };
    QosLogger.prototype._startMonitor = function (key, event) {
        if (this._qosLogger) {
            this._qosEvents.set(key, new this._qosLogger(event)); 
        }
    };
    QosLogger.prototype._endMonitor = function (key, event) {
        if (this._qosEvents.has(key)) {
            this._qosEvents.get(key).end(event); 
            this._qosEvents.delete(key);
        }
    };
    QosLogger.prototype.initializeLogger = function () {
        var _this = this;
        var startHandler = function (key, e) { _this._startMonitor(key, e); }; 
        var endHandler = function (key, e) { _this._endMonitor(key, e); }; 
        this._deferExecutor.addHandler('start', startHandler);
        this._deferExecutor.addHandler('end', endHandler);
    };
    return QosLogger;
}());
export default QosLogger;
