import { _SPEventManager } from '@microsoft/sp-core-library';
import AadTokenProvider, { TokenAcquisitionEventArgs } from './AadTokenProvider';
import { _QosMonitor } from '@microsoft/sp-diagnostics';
import strings from '../SPHttpStrings.resx';
var AdalAuthContext = (function () {
    function AdalAuthContext(authContext, aadUserId) {
        this.servicePrincipalId = authContext.config.clientId;
        this._aadUserId = aadUserId || '';
        this._patchAdalAuthContext(authContext);
        this._authContext = authContext;
    }
    AdalAuthContext.prototype.getToken = function (resourceEndpoint) {
        var _this = this;
        return this._getIdToken().then(function () { return _this._getAccessToken(resourceEndpoint); });
    };
    AdalAuthContext.prototype._patchAdalAuthContext = function (authContext) {
        var _this = this;
        Object.getPrototypeOf(authContext)._singletonInstance = undefined;
        authContext._addAdalFrame = function (iframeId) {
            return _this._addAdalFrame(authContext, iframeId);
        };
    };
    AdalAuthContext.prototype._getIdToken = function () {
        var _this = this;
        var cachedToken = this._authContext.getCachedToken(this.servicePrincipalId);
        if (cachedToken && this._aadUserId) {
            var user = this._authContext.getCachedUser();
            if (user &&
                user.profile &&
                user.profile.oid === this._aadUserId &&
                user.profile.aud === this._authContext.config.clientId) {
                this._authContext._user = user;
                return Promise.resolve(cachedToken); 
            }
        }
        return this._fetchIdTokenSilent(this.servicePrincipalId, this._authContext.config.redirectUri)
            .then(function (token) {
            _this._authContext._user = _this._authContext._createUser(token);
            return Promise.resolve(token);
        });
    };
    AdalAuthContext.prototype._getAccessToken = function (resourceEndpoint) {
        var cachedToken = this._authContext.getCachedToken(resourceEndpoint);
        if (cachedToken) {
            return Promise.resolve(cachedToken); 
        }
        return this._fetchAccessTokenSilent(resourceEndpoint);
    };
    AdalAuthContext.prototype._fetchIdTokenSilent = function (servicePrincipalId, redirectUri) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var acquireIdTokenMonitor = new _QosMonitor('AadTokenProvider.AcquireIdTokenSilent');
            var acquireIdTokenTagNameSuffix = 'AcquireIdTokenSilent';
            _this._authContext._renewToken(servicePrincipalId, function (message, token) {
                if (!token) {
                    var err = new Error(message);
                    acquireIdTokenMonitor.writeUnexpectedFailure(acquireIdTokenTagNameSuffix, err);
                    reject(err);
                }
                else {
                    acquireIdTokenMonitor.writeSuccess();
                    resolve(token);
                }
            }, _this._authContext.RESPONSE_TYPE.ID_TOKEN_TOKEN);
        });
    };
    AdalAuthContext.prototype._fetchAccessTokenSilent = function (resourceEndpoint) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var acquireAccessTokenQosMonitor = new _QosMonitor('AadTokenProvider.AcquireAccessToken');
            _this._authContext.acquireToken(resourceEndpoint, function (message, token) {
                if (!token) {
                    if (_this._authContext._getItem(_this._authContext.CONSTANTS.STORAGE.ERROR) === 'interaction_required') {
                        var urlNavigate = _this._authContext._getNavigateUrl(_this._authContext.RESPONSE_TYPE.TOKEN, resourceEndpoint) +
                            '&prompt=select_account';
                        _SPEventManager.instance.raiseEvent(AadTokenProvider._tokenAcquisitionEventId, new TokenAcquisitionEventArgs(strings.additionalCredentialsWarning, urlNavigate));
                    }
                    reject(new Error(message));
                }
                else {
                    acquireAccessTokenQosMonitor.writeSuccess();
                    resolve(token);
                }
            });
        });
    };
    AdalAuthContext.prototype._addAdalFrame = function (authContext, iframeId) {
        if (typeof iframeId === 'undefined') {
            return;
        }
        authContext.info('Add adal frame to document:' + iframeId);
        var adalFrame = document.getElementById(iframeId);
        var sandboxAttributes = 'allow-same-origin allow-scripts allow-forms allow-pointer-lock';
        if (!adalFrame) {
            if (document.createElement && document.documentElement &&
                (window.opera || window.navigator.userAgent.indexOf('MSIE 5.0') === -1)) {
                var ifr = document.createElement('iframe');
                ifr.setAttribute('id', iframeId);
                ifr.setAttribute('aria-hidden', 'true');
                ifr.setAttribute('sandbox', sandboxAttributes);
                ifr.style.visibility = 'hidden';
                ifr.style.position = 'absolute';
                ifr.style.width = ifr.style.height = ifr.borderWidth = '0px';
                adalFrame = document.getElementsByTagName('body')[0].appendChild(ifr);
            }
            else if (document.body && document.body.insertAdjacentHTML) {
                document.body.insertAdjacentHTML('beforeEnd', '<iframe sandbox="' + sandboxAttributes + '" name="' +
                    iframeId + '" id="' + iframeId + '" style="display:none"></iframe>');
            }
            if (window.frames && window.frames[iframeId]) {
                adalFrame = window.frames[iframeId];
            }
        }
        return adalFrame;
    };
    return AdalAuthContext;
}());
export default AdalAuthContext;
