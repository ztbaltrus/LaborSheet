import * as tslib_1 from "tslib";
import { SPEvent, SPEventArgs, Validate } from '@microsoft/sp-core-library';
import AdalAuthContextManager from './AdalAuthContextManager';
var TokenAcquisitionEventArgs = (function (_super) {
    tslib_1.__extends(TokenAcquisitionEventArgs, _super);
    function TokenAcquisitionEventArgs(message, redirectUrl) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.redirectUrl = redirectUrl;
        return _this;
    }
    return TokenAcquisitionEventArgs;
}(SPEventArgs));
export { TokenAcquisitionEventArgs };
var AadTokenProvider = (function () {
    function AadTokenProvider(configuration) {
        Validate.isNonemptyString(configuration.aadInstanceUrl, 'aadInstanceUrl');
        Validate.isNonemptyString(configuration.aadTenantId, 'aadTenantId');
        Validate.isNonemptyString(configuration.redirectUri, 'redirectUri');
        Validate.isNonemptyString(configuration.servicePrincipalId, 'servicePrincipalId');
        this._defaultConfiguration = configuration;
        this._fetchQueue = Promise.resolve();
        this._tokenAcquisitionEvent = new SPEvent(AadTokenProvider._tokenAcquisitionEventId);
    }
    AadTokenProvider.prototype.getToken = function (resourceEndpoint) {
        return this._getTokenInternal(resourceEndpoint, this._defaultConfiguration);
    };
    AadTokenProvider.prototype._getTokenInternal = function (resourceEndpoint, configuration) {
        var _this = this;
        var tokenProviderConfig = configuration || this._defaultConfiguration;
        if (!this._authContextManager) {
            this._authContextManager = new AdalAuthContextManager();
        }
        var getAuthContextPromise = function () { return _this._authContextManager.getAuthContext(tokenProviderConfig); };
        this._fetchQueue =
            this._fetchQueue
                .then(getAuthContextPromise, getAuthContextPromise)
                .then(function (authContext) { return authContext.getToken(resourceEndpoint); });
        return this._fetchQueue;
    };
    Object.defineProperty(AadTokenProvider.prototype, "tokenAcquisitionEvent", {
        get: function () {
            return this._tokenAcquisitionEvent;
        },
        enumerable: true,
        configurable: true
    });
    AadTokenProvider._tokenAcquisitionEventId = 'tokenAcquisitionFailure';
    return AadTokenProvider;
}());
export default AadTokenProvider;
