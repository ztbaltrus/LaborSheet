/// <reference types="adal" />
/**
 * Class that wraps the ADAL's authentication class
 * @internal
 */
export default class AdalAuthContext {
    readonly servicePrincipalId: string;
    private readonly _aadUserId;
    private _authContext;
    constructor(authContext: IAuthenticationContextInternal, aadUserId?: string);
    getToken(resourceEndpoint: string): Promise<string>;
    private _patchAdalAuthContext(authContext);
    private _getIdToken();
    private _getAccessToken(resourceEndpoint);
    private _fetchIdTokenSilent(servicePrincipalId, redirectUri);
    private _fetchAccessTokenSilent(resourceEndpoint);
    /**
   * Adds the hidden iframe for silent token renewal. This code is a security fix to ADAL.js's iframe
   * rendering code. IE11 doesn't support dynamically setting attributes on an iFrame element, so
   * we must patch the original implementation. Original code is in ADAL.js addAdalFrame.
   * https://github.com/AzureAD/azure-activedirectory-library-for-js/ for source code
   */
    private _addAdalFrame(authContext, iframeId);
}
/**
 * Represents the exported module from the adal-angular npm package.
 * @internal
 */
export interface IAdalJsModule {
    inject: (configuration: adal.Config) => adal.AuthenticationContext;
}
/**
 * Interface for interacting with internals of ADAL.js
 * @internal
 */
export interface IAuthenticationContextInternal extends adal.AuthenticationContext {
    _loginInProgress: boolean;
    CONSTANTS: {
        ID_TOKEN: string;
        STORAGE: {
            ERROR: string;
            LOGIN_REQUEST: string;
            LOGIN_ERROR: string;
            NONCE_IDTOKEN: string;
            STATE_LOGIN: string;
        };
    };
    RESPONSE_TYPE: {
        TOKEN: string;
        ID_TOKEN_TOKEN: string;
    };
    _singletonInstance: adal.AuthenticationContext | undefined;
    _user: adal.User;
    _addAdalFrame(iframeId: string): HTMLIFrameElement | undefined;
    _createUser(hash: string): adal.User;
    handleWindowCallback(hash?: string): void;
    _getItem(storageConstant: string): string;
    _getNavigateUrl(responseType: string, resourceEndpoint: string | undefined): string;
    _saveItem(storageConstant: string, object: string, preserve?: boolean): boolean;
    _renewToken(resource: string, callback: (message: string, token: string) => void, responseType: string): void;
}
