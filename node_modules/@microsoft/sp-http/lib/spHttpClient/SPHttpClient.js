import { _LogSource, _logSourceServiceKey, _QosMonitor } from '@microsoft/sp-diagnostics';
import { ServiceKey } from '@microsoft/sp-core-library';
import DigestCache from './DigestCache';
import { fetchProviderServiceKey } from '../httpClient/FetchProvider';
import { predefinedConfigurations } from './SPHttpClientConfiguration';
import SPHttpClientResponse from './SPHttpClientResponse';
import SPHttpClientBatch from './SPHttpClientBatch';
import SPHttpClientHelper from './SPHttpClientHelper';
import ODataVersion from './ODataVersion';
var SPHttpClient = (function () {
    function SPHttpClient(serviceScope) {
        var _this = this;
        this._serviceScope = serviceScope;
        this._serviceScope.whenFinished(function () {
            _this._digestCache = serviceScope.consume(DigestCache.serviceKey);
            _this._parentSource = serviceScope.consume(_logSourceServiceKey);
            _this._fetchProvider = serviceScope.consume(fetchProviderServiceKey);
        });
    }
    SPHttpClient.getWebUrlFromRequestUrl = function (requestUrl) {
        var segmentIndex = -1;
        var upperCaseUrl = requestUrl.toUpperCase();
        for (var _i = 0, _a = SPHttpClient._reservedUrlSegments; _i < _a.length; _i++) {
            var reservedUrlSegment = _a[_i];
            segmentIndex = upperCaseUrl.indexOf(reservedUrlSegment);
            if (segmentIndex >= 0) {
                return requestUrl.substr(0, segmentIndex);
            }
        }
        throw new Error('Unable to determine web URL');
    };
    SPHttpClient.prototype.fetch = function (url, configuration, options) {
        var _this = this;
        if (!options) {
            options = {};
        }
        var modifiedOptions = Object.assign({}, options);
        if (configuration.defaultSameOriginCredentials) {
            if (!options.credentials) {
                modifiedOptions.credentials = 'same-origin';
            }
        }
        var headers = SPHttpClientHelper.cloneHeaders(options);
        modifiedOptions.headers = headers;
        if (configuration.defaultODataVersion) {
            if (!headers.has('OData-Version')) {
                headers.append('OData-Version', configuration.defaultODataVersion.toString());
            }
        }
        var oDataVersion = ODataVersion.tryParseFromHeaders(headers);
        SPHttpClientHelper.applyDefaultHeaders(headers, configuration, options, oDataVersion);
        if (configuration.requestDigest) {
            if (options.method) {
                var method = options.method.toUpperCase();
                if (method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS') {
                    if (!headers.has('X-RequestDigest')) {
                        var webUrl = options.webUrl || SPHttpClient.getWebUrlFromRequestUrl(url);
                        var promise = this._digestCache.fetchDigest(webUrl)
                            .then(function (digest) {
                            headers.append('X-RequestDigest', digest);
                            return _this._fetchWithInstrumentation(configuration, new Request(url, modifiedOptions));
                        });
                        return SPHttpClientHelper.handleAuthenticationErrors(promise, webUrl, this._digestCache)
                            .then(function (response) {
                            return new SPHttpClientResponse(response);
                        });
                    }
                }
            }
        }
        return this._fetchWithInstrumentation(configuration, new Request(url, modifiedOptions))
            .then(function (response) {
            return new SPHttpClientResponse(response);
        });
    };
    SPHttpClient.prototype.get = function (url, configuration, options) {
        return this.fetch(url, configuration, SPHttpClientHelper.overrideHttpMethod(options, 'GET'));
    };
    SPHttpClient.prototype.post = function (url, configuration, options) {
        return this.fetch(url, configuration, SPHttpClientHelper.overrideHttpMethod(options, 'POST'));
    };
    SPHttpClient.prototype.beginBatch = function (batchCreationOptions) {
        return new SPHttpClientBatch(this._serviceScope, batchCreationOptions);
    };
    SPHttpClient.prototype._fetchWithInstrumentation = function (configuration, request) {
        var _this = this;
        var qosMonitor = new _QosMonitor(SPHttpClient._className);
        return SPHttpClientHelper.fetchCore(configuration, request, this._serviceScope, this._fetchProvider, SPHttpClient._className).then(function (response) {
            if (response.status >= 200 && response.status <= 299) {
                qosMonitor.writeSuccess({ source: _this._logSourceId });
            }
            else if (response.status >= 300 && response.status <= 499) {
                qosMonitor.writeExpectedFailure('Fetch', undefined, { source: _this._logSourceId, responseStatus: response.status });
            }
            else {
                qosMonitor.writeUnexpectedFailure('Fetch', undefined, { source: _this._logSourceId, responseStatus: response.status });
            }
            return response;
        }).catch(function (error) {
            qosMonitor.writeUnexpectedFailure('Fetch', error, { source: _this._logSourceId });
            throw error;
        });
    };
    Object.defineProperty(SPHttpClient.prototype, "_logSourceId", {
        get: function () {
            if (this._parentSource.isEmpty()) {
                return SPHttpClient._logSource.id;
            }
            return this._parentSource.id;
        },
        enumerable: true,
        configurable: true
    });
    SPHttpClient.configurations = predefinedConfigurations;
    SPHttpClient.serviceKey = ServiceKey.create('sp-http:SPHttpClient', SPHttpClient);
    SPHttpClient._className = 'SPHttpClient';
    SPHttpClient._logSource = _LogSource.create('spHttpClient');
    SPHttpClient._reservedUrlSegments = [
        '/_API/',
        '/_LAYOUTS/',
        '/_VTI_BIN/'
    ];
    return SPHttpClient;
}());
export default SPHttpClient;
