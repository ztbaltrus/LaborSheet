{"version":3,"sources":["utils/PrettyPrinter.ts"],"names":[],"mappings":"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","file":"PrettyPrinter.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\nimport { Text } from '@microsoft/node-core-library';\r\n\r\nimport { Span } from './Span';\r\n\r\n/**\r\n  * Some helper functions for formatting certain TypeScript Compiler API expressions.\r\n  */\r\nexport class PrettyPrinter {\r\n  /**\r\n    * Used for debugging only.  This dumps the TypeScript Compiler's abstract syntax tree.\r\n    */\r\n  public static dumpTree(node: ts.Node, indent: string = ''): void {\r\n    const kindName: string = ts.SyntaxKind[node.kind];\r\n    let trimmedText: string;\r\n\r\n    try {\r\n      trimmedText = node.getText()\r\n        .replace(/[\\r\\n]/g, ' ')\r\n        .replace(/\\s+/g, ' ')\r\n        .trim();\r\n\r\n      if (trimmedText.length > 100) {\r\n        trimmedText = trimmedText.substr(0, 97) + '...';\r\n      }\r\n    } catch (e) {\r\n      trimmedText = '(error getting text)';\r\n    }\r\n\r\n    console.log(`${indent}${kindName}: [${trimmedText}]`);\r\n\r\n    try {\r\n      for (const childNode of node.getChildren()) {\r\n        PrettyPrinter.dumpTree(childNode, indent + '  ');\r\n      }\r\n    } catch (e) {\r\n      // sometimes getChildren() throws an exception\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a text representation of the enum flags.\r\n   */\r\n  public static getSymbolFlagsString(flags: ts.SymbolFlags): string {\r\n    return PrettyPrinter._getFlagsString(flags, PrettyPrinter._getSymbolFlagString);\r\n  }\r\n\r\n  /**\r\n   * Returns a text representation of the enum flags.\r\n   */\r\n  public static getTypeFlagsString(flags: ts.TypeFlags): string {\r\n    return PrettyPrinter._getFlagsString(flags, PrettyPrinter._getTypeFlagString);\r\n  }\r\n\r\n  /**\r\n    * Returns the first line of a potentially nested declaration.\r\n    * For example, for a class definition this might return\r\n    * \"class Blah<T> extends BaseClass\" without the curly braces.\r\n    * For example, for a function definition, this might return\r\n    * \"test(): void;\" without the curly braces.\r\n    */\r\n  public static getDeclarationSummary(node: ts.Node): string {\r\n    const rootSpan: Span = new Span(node);\r\n    rootSpan.forEach((span: Span) => {\r\n      switch (span.kind) {\r\n        case ts.SyntaxKind.JSDocComment:   // strip any code comments\r\n        case ts.SyntaxKind.DeclareKeyword: // strip the \"declare\" keyword\r\n          span.modification.skipAll();\r\n          break;\r\n      }\r\n    });\r\n\r\n    return Text.convertToLf(rootSpan.getModifiedText());\r\n  }\r\n\r\n  /**\r\n   * Returns a string such as this, based on the context information in the provided node:\r\n   *   \"[C:\\Folder\\File.ts#123]\"\r\n   */\r\n  public static formatFileAndLineNumber(node: ts.Node): string {\r\n    const sourceFile: ts.SourceFile = node.getSourceFile();\r\n    const lineAndCharacter: ts.LineAndCharacter = sourceFile.getLineAndCharacterOfPosition(node.getStart());\r\n    return `[${sourceFile.fileName}#${lineAndCharacter.line}]`;\r\n  }\r\n\r\n  private static _getSymbolFlagString(flag: ts.SymbolFlags): string {\r\n    return ts.SymbolFlags[flag];\r\n  }\r\n\r\n  private static _getTypeFlagString(flag: ts.TypeFlags): string {\r\n    return ts.TypeFlags[flag];\r\n  }\r\n\r\n  private static _getFlagsString<T>(flags: T, func: (x: T) => string): string {\r\n    /* tslint:disable:no-any */\r\n    let result: string = '';\r\n\r\n    let flag: number = 1;\r\n    for (let bit: number = 0; bit < 32; ++bit) {\r\n      if ((flags as any as number) & flag) {\r\n        if (result !== '') {\r\n          result += ', ';\r\n        }\r\n        result += func(flag as any as T);\r\n      }\r\n      flag <<= 1;\r\n    }\r\n    return result === '' ? '???' : result;\r\n    /* tslint:enable:no-any */\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"../../../src"}