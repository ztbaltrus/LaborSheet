{"version":3,"sources":["test/ApiDefinitionReference.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,sEAAmE;AAEnE,uFAAuF;AACvF,IAAI,cAAc,GAIZ,EAAE,CAAC;AAET;IACE,cAAc,GAAG,EAAE,CAAC;AACtB,CAAC;AAED,8BAA8B,gBAA0B;IACtD,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACvE,CAAC;AAED,QAAQ,CAAC,wBAAwB,EAAE;IACjC,QAAQ,CAAC,mCAAmC,EAAE;QAC5C,IAAI,gBAAwB,CAAC;QAC7B,IAAI,MAA0C,CAAC;QAE/C,EAAE,CAAC,gDAAgD,EAAE;YACnD,gBAAgB,GAAG,iCAAiC,CAAC;YAErD,MAAM,GAAG,+CAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAChF,MAAM,CAAC,MAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAC7C,MAAM,CAAC,MAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpD,MAAM,CAAC,MAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,MAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE;YACtD,gBAAgB,GAAG,sBAAsB,CAAC;YAE1C,MAAM,GAAG,+CAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAChF,MAAM,CAAC,MAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,MAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpD,MAAM,CAAC,MAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,MAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wEAAwE,EAAE;YAC3E,gBAAgB,GAAG,6BAA6B,CAAC;YAEjD,MAAM,GAAG,+CAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAChF,MAAM,CAAC,MAAO,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACnC,MAAM,CAAC,MAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACpD,MAAM,CAAC,MAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,MAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,0EAA0E,EAAE;YAC7E,mBAAmB,EAAE,CAAC;YACtB,iGAAiG;YACjG,sCAAsC;YACtC,gBAAgB,GAAG,6BAA6B,CAAC;YACjD,MAAM,GAAG,+CAAsB,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;YAChF,oBAAoB,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"ApiDefinitionReference.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ApiDefinitionReference } from '../ApiDefinitionReference';\r\n\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\nlet capturedErrors: {\r\n  message: string;\r\n  fileName: string;\r\n  lineNumber: number;\r\n}[] = [];\r\n\r\nfunction clearCapturedErrors(): void {\r\n  capturedErrors = [];\r\n}\r\n\r\nfunction assertCapturedErrors(expectedMessages: string[]): void {\r\n  expect(capturedErrors.map(x => x.message)).toEqual(expectedMessages);\r\n}\r\n\r\ndescribe('ApiDocumentation tests', function (): void {\r\n  describe('ApiDocumentation internal methods', function (): void {\r\n    let apiReferenceExpr: string;\r\n    let actual: ApiDefinitionReference | undefined;\r\n\r\n    it('_parseApiReferenceExpression() with scope name', function (): void {\r\n      apiReferenceExpr = '@microsoft/sp-core-library:Guid';\r\n\r\n      actual = ApiDefinitionReference.createFromString(apiReferenceExpr, console.log);\r\n      expect(actual!.scopeName).toBe('@microsoft');\r\n      expect(actual!.packageName).toBe('sp-core-library');\r\n      expect(actual!.exportName).toBe('Guid');\r\n      expect(actual!.memberName).toBe('');\r\n    });\r\n\r\n    it('_parseApiReferenceExpression() without scope name', function (): void {\r\n      apiReferenceExpr = 'sp-core-library:Guid';\r\n\r\n      actual = ApiDefinitionReference.createFromString(apiReferenceExpr, console.log);\r\n      expect(actual!.scopeName).toBe('');\r\n      expect(actual!.packageName).toBe('sp-core-library');\r\n      expect(actual!.exportName).toBe('Guid');\r\n      expect(actual!.memberName).toBe('');\r\n    });\r\n\r\n    it('_parseApiReferenceExpression() without scope name and with member name', function (): void {\r\n      apiReferenceExpr = 'sp-core-library:Guid.equals';\r\n\r\n      actual = ApiDefinitionReference.createFromString(apiReferenceExpr, console.log);\r\n      expect(actual!.scopeName).toBe('');\r\n      expect(actual!.packageName).toBe('sp-core-library');\r\n      expect(actual!.exportName).toBe('Guid');\r\n      expect(actual!.memberName).toBe('equals');\r\n    });\r\n\r\n    it('_parseApiReferenceExpression() without scope name and invalid memberName', function (): void {\r\n      clearCapturedErrors();\r\n      // This won't raise an error (based on our current decision to only show warnings in the *.api.ts\r\n      // files if we can't find a reference)\r\n      apiReferenceExpr = 'sp-core-library:Guid:equals';\r\n      actual = ApiDefinitionReference.createFromString(apiReferenceExpr, console.log);\r\n      assertCapturedErrors([]);\r\n    });\r\n  });\r\n});"],"sourceRoot":"../../../src"}