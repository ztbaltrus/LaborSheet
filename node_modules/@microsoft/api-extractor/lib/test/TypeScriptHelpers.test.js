"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const TypeScriptHelpers_1 = require("../utils/TypeScriptHelpers");
describe('TypeScriptHelpers tests', () => {
    describe('splitStringWithRegEx()', () => {
        it('simple case', () => {
            expect(TypeScriptHelpers_1.TypeScriptHelpers.splitStringWithRegEx('ABCDaFG', /A/gi))
                .toEqual(['A', 'BCD', 'a', 'FG']);
        });
        it('empty match', () => {
            expect(TypeScriptHelpers_1.TypeScriptHelpers.splitStringWithRegEx('', /A/gi))
                .toEqual([]);
        });
    });
    describe('extractJSDocContent()', () => {
        const testCases = [
            {
                input: '/*A*/',
                output: '' // error
            },
            {
                input: '/****A****/',
                output: 'A'
            },
            {
                input: '/**A */',
                output: 'A'
            },
            {
                input: '/** A */',
                output: 'A'
            },
            {
                input: '/**   A */',
                output: 'A'
            },
            {
                input: '/**\n' +
                    'A */',
                output: 'A'
            },
            {
                input: '/**\n' +
                    ' A */',
                output: ' A'
            },
            {
                input: '/**\n' +
                    ' *A */',
                output: 'A'
            },
            {
                input: '/**\n' +
                    ' * A */',
                output: 'A'
            },
            {
                input: '/**\n' +
                    ' *   A*/',
                output: '  A'
            },
            {
                input: '/**\n' +
                    ' *   A\n' +
                    ' */',
                output: '  A\n'
            },
            {
                input: '/*****\n' +
                    '*A\n' +
                    '******/',
                output: 'A\n'
            },
            {
                input: '/******\n' +
                    ' ***A**\n' +
                    ' ******/',
                output: '**A**\n'
            },
            {
                input: '/** A\n' +
                    ' * B\n' +
                    'C */',
                output: 'A\nB\nC'
            },
            {
                input: '/** A\n' +
                    ' *  B\n' +
                    ' *  C */',
                output: 'A\n B\n C'
            },
            {
                input: '/**\n' +
                    ' * A\n' +
                    ' *   \t \n' +
                    ' * B\n' +
                    '    \n' +
                    ' * C\n' +
                    ' */',
                output: 'A\n\nB\n\nC\n'
            },
            {
                input: '/**   *\\/   */',
                output: '*\\/'
            }
        ];
        for (let i = 0; i < testCases.length; ++i) {
            it(`JSDoc test case ${i}`, () => {
                expect(TypeScriptHelpers_1.TypeScriptHelpers.extractJSDocContent(testCases[i].input, console.log))
                    .toBe(testCases[i].output);
            });
        }
    });
    describe('formatJSDocContent()', () => {
        const testCases = [
            {
                input: '',
                output: ''
            },
            {
                input: 'a',
                output: '/** a */'
            },
            {
                input: '\na',
                output: '/**\n * \n * a\n */'
            },
            {
                input: 'a\n',
                output: '/**\n * a\n */'
            },
            {
                input: '  \na\n  ',
                output: '/**\n *   \n * a\n *   \n */'
            },
            {
                input: 'this is\na test\n',
                output: '/**\n * this is\n * a test\n */'
            },
            {
                input: 'single line comment',
                output: '/** single line comment */'
            },
            {
                input: 'a */ b',
                output: '/** a *\\/ b */'
            }
        ];
        for (let i = 0; i < testCases.length; ++i) {
            it(`JSDoc test case ${i}`, () => {
                expect(TypeScriptHelpers_1.TypeScriptHelpers.formatJSDocContent(testCases[i].input))
                    .toBe(testCases[i].output);
            });
        }
    });
});

//# sourceMappingURL=TypeScriptHelpers.test.js.map
