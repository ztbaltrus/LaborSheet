{"version":3,"sources":["test/TypeScriptHelpers.test.ts"],"names":[],"mappings":"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","file":"TypeScriptHelpers.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { TypeScriptHelpers } from '../utils/TypeScriptHelpers';\r\n\r\ninterface ITestCase {\r\n  input: string;\r\n  output: string;\r\n}\r\n\r\ndescribe('TypeScriptHelpers tests', () => {\r\n\r\n  describe('splitStringWithRegEx()', () => {\r\n    it('simple case', () => {\r\n      expect(TypeScriptHelpers.splitStringWithRegEx('ABCDaFG', /A/gi))\r\n        .toEqual(['A', 'BCD', 'a', 'FG']);\r\n    });\r\n\r\n    it('empty match', () => {\r\n      expect(TypeScriptHelpers.splitStringWithRegEx('', /A/gi))\r\n        .toEqual([]);\r\n    });\r\n\r\n  });\r\n\r\n  describe('extractJSDocContent()', () => {\r\n\r\n    const testCases: ITestCase[] = [\r\n      { // 0\r\n        input: '/*A*/',\r\n        output: '' // error\r\n      },\r\n      { // 1\r\n        input: '/****A****/',\r\n        output: 'A'\r\n      },\r\n      { // 2\r\n        input: '/**A */',\r\n        output: 'A'\r\n      },\r\n      { // 3\r\n        input: '/** A */',\r\n        output: 'A'\r\n      },\r\n      { // 4\r\n        input: '/**   A */',\r\n        output: 'A'\r\n      },\r\n      { // 5\r\n        input: '/**\\n' +\r\n               'A */',\r\n        output: 'A'\r\n      },\r\n      { // 6\r\n        input: '/**\\n' +\r\n               ' A */',\r\n        output: ' A'\r\n      },\r\n      { // 7\r\n        input: '/**\\n' +\r\n               ' *A */',\r\n        output: 'A'\r\n      },\r\n      { // 8\r\n        input: '/**\\n' +\r\n               ' * A */',\r\n        output: 'A'\r\n      },\r\n      { // 9\r\n        input: '/**\\n' +\r\n               ' *   A*/',\r\n        output: '  A'\r\n      },\r\n      { // 10\r\n        input: '/**\\n' +\r\n               ' *   A\\n' +\r\n               ' */',\r\n        output: '  A\\n'\r\n      },\r\n      { // 11\r\n        input: '/*****\\n' +\r\n               '*A\\n' +\r\n               '******/',\r\n        output: 'A\\n'\r\n      },\r\n      { // 12\r\n        input: '/******\\n' +\r\n               ' ***A**\\n' +\r\n               ' ******/',\r\n        output: '**A**\\n'\r\n      },\r\n      { // 13\r\n        input: '/** A\\n' +\r\n               ' * B\\n' +\r\n               'C */',\r\n        output: 'A\\nB\\nC'\r\n      },\r\n      { // 14\r\n        input: '/** A\\n' +\r\n               ' *  B\\n' +\r\n               ' *  C */',\r\n        output: 'A\\n B\\n C'\r\n      },\r\n      { // 15\r\n        input: '/**\\n' +\r\n               ' * A\\n' +\r\n               ' *   \\t \\n' +\r\n               ' * B\\n' +\r\n               '    \\n' +\r\n               ' * C\\n' +\r\n               ' */',\r\n        output: 'A\\n\\nB\\n\\nC\\n'\r\n      },\r\n      { // 16\r\n        input: '/**   *\\\\/   */',  // a properly escaped terminator\r\n        output: '*\\\\/'\r\n      }\r\n    ];\r\n\r\n    for (let i: number = 0; i < testCases.length; ++i) {\r\n      it(`JSDoc test case ${i}`, () => {\r\n        expect(TypeScriptHelpers.extractJSDocContent(testCases[i].input, console.log))\r\n        .toBe(testCases[i].output);\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n  describe('formatJSDocContent()', () => {\r\n\r\n    const testCases: ITestCase[] = [\r\n      { // 0\r\n        input: '',\r\n        output: ''\r\n      },\r\n      { // 1\r\n        input: 'a',\r\n        output: '/** a */'\r\n      },\r\n      { // 2\r\n        input: '\\na',\r\n        output: '/**\\n * \\n * a\\n */'\r\n      },\r\n      { // 3\r\n        input: 'a\\n',\r\n        output: '/**\\n * a\\n */'\r\n      },\r\n      { // 4\r\n        input: '  \\na\\n  ',\r\n        output: '/**\\n *   \\n * a\\n *   \\n */'\r\n      },\r\n      { // 5\r\n        input: 'this is\\na test\\n',\r\n        output: '/**\\n * this is\\n * a test\\n */'\r\n      },\r\n      { // 6\r\n        input: 'single line comment',\r\n        output: '/** single line comment */'\r\n      },\r\n      { // 7\r\n        input: 'a */ b',\r\n        output: '/** a *\\\\/ b */'\r\n      }\r\n    ];\r\n\r\n    for (let i: number = 0; i < testCases.length; ++i) {\r\n      it(`JSDoc test case ${i}`, () => {\r\n        expect(TypeScriptHelpers.formatJSDocContent(testCases[i].input))\r\n        .toBe(testCases[i].output);\r\n      });\r\n    }\r\n\r\n  });\r\n});\r\n"],"sourceRoot":"../../../src"}