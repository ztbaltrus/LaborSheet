{"version":3,"sources":["cli/ApiExtractorCommandLine.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AACjC,yBAAyB;AAEzB,gEAAyF;AACzF,2CAAwC;AAExC,6BAAqC,SAAQ,mCAAiB;IAG5D;QACE,KAAK,CAAC;YACJ,YAAY,EAAE,eAAe;YAC7B,eAAe,EAAE,4EAA4E;SAC9F,CAAC,CAAC;QACH,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAES,kBAAkB;QAC1B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC;YAC9C,iBAAiB,EAAE,SAAS;YAC5B,kBAAkB,EAAE,IAAI;YACxB,WAAW,EAAE,sEAAsE;SACpF,CAAC,CAAC;IACL,CAAC;IAES,SAAS;QACjB,MAAM,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,KAAK;YAEnC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC/B,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;YACtC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACvE,CAAC;YAED,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,gBAAgB;QACtB,IAAI,CAAC,SAAS,CAAC,IAAI,qBAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IACtC,CAAC;CACF;AAnCD,0DAmCC","file":"ApiExtractorCommandLine.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { CommandLineParser, CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\nimport { RunAction } from './RunAction';\r\n\r\nexport class ApiExtractorCommandLine extends CommandLineParser {\r\n  private _debugParameter: CommandLineFlagParameter;\r\n\r\n  constructor() {\r\n    super({\r\n      toolFilename: 'api-extractor',\r\n      toolDescription: 'This is an experimental command line interface for the API Extractor tool.'\r\n    });\r\n    this._populateActions();\r\n  }\r\n\r\n  protected onDefineParameters(): void { // override\r\n    this._debugParameter = this.defineFlagParameter({\r\n      parameterLongName: '--debug',\r\n      parameterShortName: '-d',\r\n      description: 'Show the full call stack if an error occurs while executing the tool'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): Promise<void> { // override\r\n    return super.onExecute().catch((error) => {\r\n\r\n      if (this._debugParameter.value) {\r\n        console.error(os.EOL + error.stack);\r\n      } else {\r\n        console.error(os.EOL + colors.red('ERROR: ' + error.message.trim()));\r\n      }\r\n\r\n      process.exitCode = 1;\r\n    });\r\n  }\r\n\r\n  private _populateActions(): void {\r\n    this.addAction(new RunAction(this));\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}