{"version":3,"sources":["ast/AstPackage.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA+B;AAE/B,iCAAiC;AAEjC,uCAAyD;AACzD,2CAAwC;AACxC,kEAA+D;AAG/D;;;IAGI;AACJ,gBAAwB,SAAQ,qBAAS;IA0EvC,YAAY,OAAyB,EAAE,QAAuB;QAC5D,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;QA1E3C,+BAA0B,GAAsB,EAAE,CAAC;QA2EzD,IAAI,CAAC,IAAI,GAAG,qBAAW,CAAC,OAAO,CAAC;QAChC,6DAA6D;QAC7D,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,WAAW,CAAC;QAEhC,MAAM,aAAa,GAAgB,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC;QAErG,GAAG,CAAC,CAAC,MAAM,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAEvC,MAAM,cAAc,GAAc,qCAAiB,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YACpG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC;gBACnC,YAAY,EAAE,YAAY,CAAC,IAAI;gBAC/B,cAAc,EAAE,cAAc;aAC/B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAxFO,MAAM,CAAC,WAAW,CAAC,OAAyB,EAAE,QAAuB;QAC3E,MAAM,cAAc,GAA0B,qCAAiB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;QAErG,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,6DAA6D,GAAG,QAAQ,CAAC,QAAQ;kBAC7F,gGAAgG,CAAC,CAAC;QACxG,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;QACxE,CAAC;QAED,oFAAoF;QACpF,mFAAmF;QACnF,6BAA6B;QAC7B,EAAE;QACF,sFAAsF;QACtF,uFAAuF;QACvF,+DAA+D;QAC/D,EAAE;QACF,kGAAkG;QAClG,wFAAwF;QACxF,8FAA8F;QAC9F,eAAe;QACf,IAAI,mBAAmB,GAA6B,SAAS,CAAC,CAAC,eAAe;QAE9E,GAAG,CAAC,CAAC,MAAM,YAAY,IAAI,EAAE,CAAC,uBAAuB,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACpG,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;gBAC/D,MAAM,WAAW,GAAW,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;gBAExF,uCAAuC;gBACvC,EAAE,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBACnC,qEAAqE;oBACrE,mEAAmE;oBACnE,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtD,mBAAmB,GAAG,YAAY,CAAC;oBACrC,CAAC;oBACD,KAAK,CAAC;gBACR,CAAC;YACH,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,uFAAuF;YACvF,8FAA8F;YAC9F,GAAG,CAAC,CAAC,MAAM,SAAS,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC5C,MAAM,MAAM,GAAsB,EAAE,CAAC;gBACrC,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,uBAAuB,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC1F,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,wBAAwB,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;gBAErF,GAAG,CAAC,CAAC,MAAM,YAAY,IAAI,MAAM,CAAC,CAAC,CAAC;oBAClC,MAAM,WAAW,GAAW,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;oBAExF,EAAE,CAAC,CAAC,WAAW,CAAC,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;wBACtD,OAAO,CAAC,WAAW,CAAC,qFAAqF,EACvG,QAAQ,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC;oBAChC,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,CAAC;YACL,OAAO;YACP,WAAW,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;YAC3C,iBAAiB,EAAE,cAAc;YACjC,kFAAkF;YAClF,+BAA+B;YAC/B,iBAAiB,EAAE,mBAAmB,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;SAC7D,CAAC;IACJ,CAAC;IAqBD;;;;;;;;;;OAUG;IACI,wBAAwB,CAAC,MAAiB;QAC/C,MAAM,cAAc,GAAc,qCAAiB,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5F,GAAG,CAAC,CAAC,MAAM,cAAc,IAAI,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC;YAC7D,EAAE,CAAC,CAAC,cAAc,CAAC,cAAc,KAAK,cAAc,CAAC,CAAC,CAAC;gBACrD,MAAM,CAAC,cAAc,CAAC,YAAY,CAAC;YACrC,CAAC;QACH,CAAC;QACD,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAEM,uBAAuB;QAC5B,iDAAiD;QACjD,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;CACF;AAtHD,gCAsHC","file":"AstPackage.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\nimport { ExtractorContext } from '../ExtractorContext';\r\nimport { AstItemKind, IAstItemOptions } from './AstItem';\r\nimport { AstModule } from './AstModule';\r\nimport { TypeScriptHelpers } from '../utils/TypeScriptHelpers';\r\nimport { IExportedSymbol } from './IExportedSymbol';\r\n\r\n/**\r\n  * This class is part of the AstItem abstract syntax tree.  It represents the top-level\r\n  * exports for an Rush package.  This object acts as the root of the Extractor's tree.\r\n  */\r\nexport class AstPackage extends AstModule {\r\n  private _exportedNormalizedSymbols: IExportedSymbol[] = [];\r\n\r\n  private static _getOptions(context: ExtractorContext, rootFile: ts.SourceFile): IAstItemOptions {\r\n    const rootFileSymbol: ts.Symbol | undefined = TypeScriptHelpers.tryGetSymbolForDeclaration(rootFile);\r\n\r\n    if (!rootFileSymbol) {\r\n      throw new Error('The entry point file does not appear to have any exports:\\n' + rootFile.fileName\r\n        + '\\nNote that API Extractor does not yet support libraries consisting entirely of ambient types.');\r\n    }\r\n\r\n    if (!rootFileSymbol.declarations) {\r\n      throw new Error('Unable to find a root declaration for this package');\r\n    }\r\n\r\n    // The @packagedocumentation comment is special because it is not attached to an AST\r\n    // definition.  Instead, it is part of the \"trivia\" tokens that the compiler treats\r\n    // as irrelevant white space.\r\n    //\r\n    // WARNING: If the comment doesn't precede an export statement, the compiler will omit\r\n    // it from the *.d.ts file, and API Extractor won't find it.  If this happens, you need\r\n    // to rearrange your statements to ensure it is passed through.\r\n    //\r\n    // This implementation assumes that the \"@packagedocumentation\" will be in the first JSDoc-comment\r\n    // that appears in the entry point *.d.ts file.  We could possibly look in other places,\r\n    // but the above warning suggests enforcing a standardized layout.  This design choice is open\r\n    // to feedback.\r\n    let packageCommentRange: ts.TextRange | undefined = undefined; // empty string\r\n\r\n    for (const commentRange of ts.getLeadingCommentRanges(rootFile.text, rootFile.getFullStart()) || []) {\r\n      if (commentRange.kind === ts.SyntaxKind.MultiLineCommentTrivia) {\r\n        const commentBody: string = rootFile.text.substring(commentRange.pos, commentRange.end);\r\n\r\n        // Choose the first JSDoc-style comment\r\n        if (/^\\s*\\/\\*\\*/.test(commentBody)) {\r\n          // But onliy if it looks like it's trying to be @packagedocumentation\r\n          // (The ApiDocumentation parser will validate this more rigorously)\r\n          if (commentBody.indexOf('@packagedocumentation') >= 0) {\r\n            packageCommentRange = commentRange;\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!packageCommentRange) {\r\n      // If we didn't find the @packagedocumentation tag in the expected place, is it in some\r\n      // wrong place?  This sanity check helps people to figure out why there comment isn't working.\r\n      for (const statement of rootFile.statements) {\r\n        const ranges: ts.CommentRange[] = [];\r\n        ranges.push(...ts.getLeadingCommentRanges(rootFile.text, statement.getFullStart()) || []);\r\n        ranges.push(...ts.getTrailingCommentRanges(rootFile.text, statement.getEnd()) || []);\r\n\r\n        for (const commentRange of ranges) {\r\n          const commentBody: string = rootFile.text.substring(commentRange.pos, commentRange.end);\r\n\r\n          if (commentBody.indexOf('@packagedocumentation') >= 0) {\r\n            context.reportError('The @packagedocumentation comment must appear at the top of entry point *.d.ts file',\r\n              rootFile, commentRange.pos);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      context,\r\n      declaration: rootFileSymbol.declarations[0],\r\n      declarationSymbol: rootFileSymbol,\r\n      // NOTE: If there is no range, then provide an empty range to prevent ApiItem from\r\n      // looking in the default place\r\n      aedocCommentRange: packageCommentRange || { pos: 0, end: 0 }\r\n    };\r\n  }\r\n\r\n  constructor(context: ExtractorContext, rootFile: ts.SourceFile) {\r\n    super(AstPackage._getOptions(context, rootFile));\r\n    this.kind = AstItemKind.Package;\r\n    // The scoped package name. (E.g. \"@microsoft/api-extractor\")\r\n    this.name = context.packageName;\r\n\r\n    const exportSymbols: ts.Symbol[] = this.typeChecker.getExportsOfModule(this.declarationSymbol) || [];\r\n\r\n    for (const exportSymbol of exportSymbols) {\r\n        this.processModuleExport(exportSymbol);\r\n\r\n        const followedSymbol: ts.Symbol = TypeScriptHelpers.followAliases(exportSymbol, this.typeChecker);\r\n      this._exportedNormalizedSymbols.push({\r\n        exportedName: exportSymbol.name,\r\n        followedSymbol: followedSymbol\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds and returns the original symbol name.\r\n   *\r\n   * For example, suppose a class is defined as \"export default class MyClass { }\"\r\n   * but exported from the package's index.ts like this:\r\n   *\r\n   *    export { default as _MyClass } from './MyClass';\r\n   *\r\n   * In this example, given the symbol for _MyClass, getExportedSymbolName() will return\r\n   * the string \"MyClass\".\r\n   */\r\n  public tryGetExportedSymbolName(symbol: ts.Symbol): string | undefined {\r\n    const followedSymbol: ts.Symbol = TypeScriptHelpers.followAliases(symbol, this.typeChecker);\r\n    for (const exportedSymbol of this._exportedNormalizedSymbols) {\r\n      if (exportedSymbol.followedSymbol === followedSymbol) {\r\n        return exportedSymbol.exportedName;\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  public shouldHaveDocumentation(): boolean {\r\n    // We don't write JSDoc for the AstPackage object\r\n    return false;\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}