{"version":3,"sources":["ast/AstModuleVariable.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,uCAAyD;AACzD,2CAAwC;AAExC;;;;;GAKG;AACH,uBAA+B,SAAQ,qBAAS;IAK9C,YAAY,OAAwB;QAClC,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,qBAAW,CAAC,cAAc,CAAC;QAEvC,MAAM,iBAAiB,GAAyB,OAAO,CAAC,WAAmC,CAAC;QAC5F,EAAE,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAC/C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACjB,CAAC;QAED,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;QAE7C,EAAE,CAAC,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,sBAAsB;QAC9E,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAClB,CAAC;IACH,CAAC;CACF;AAxBD,8CAwBC","file":"AstModuleVariable.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as ts from 'typescript';\r\nimport { AstItemKind, IAstItemOptions } from './AstItem';\r\nimport { AstMember } from './AstMember';\r\n\r\n/**\r\n * This class is part of the AstItem abstract syntax tree. It represents variables\r\n * that are exported by an AstNamespace (or conceivably an AstPackage in the future).\r\n * The variables have a name, a type, and an initializer. The AstNamespace implementation\r\n * currently requires them to use a primitive type and be declared as \"const\".\r\n */\r\nexport class AstModuleVariable extends AstMember {\r\n  public type: string;\r\n  public name: string;\r\n  public value: string;\r\n\r\n  constructor(options: IAstItemOptions) {\r\n    super(options);\r\n    this.kind = AstItemKind.ModuleVariable;\r\n\r\n    const propertySignature: ts.PropertySignature = options.declaration as ts.PropertySignature;\r\n    if (propertySignature.type) {\r\n      this.type = propertySignature.type.getText();\r\n    } else {\r\n      this.type = '';\r\n    }\r\n\r\n    this.name = propertySignature.name.getText();\r\n\r\n    if (propertySignature.initializer) {\r\n      this.value = propertySignature.initializer.getText(); // value of the export\r\n    } else {\r\n      this.value = '';\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}