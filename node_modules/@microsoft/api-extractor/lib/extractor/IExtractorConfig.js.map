{"version":3,"sources":["extractor/IExtractorConfig.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D","file":"IExtractorConfig.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/**\r\n * With this configuration, API Extractor configures the compiler based on settings that\r\n * it finds in the project's tsconfig.json file.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorTsconfigCompilerConfig {\r\n  configType: 'tsconfig';\r\n\r\n  /**\r\n   * The root folder for the project.\r\n   * @remarks\r\n   * This folder typically contains the tsconfig.json and package.json config files.\r\n   */\r\n  rootFolder: string;\r\n\r\n  /**\r\n   * Override the tsconfig.json file contents.\r\n   *\r\n   * @remarks\r\n   * Provides already parsed tsconfig.json contents conforming to the TypeScript tsconfig schema:\r\n   * http://json.schemastore.org/tsconfig\r\n   *\r\n   * If omitted, then by default the tsconfig.json file will be loaded from the root folder.\r\n   */\r\n  overrideTsconfig?: { };\r\n}\r\n\r\n/**\r\n * With this configuration, API Extractor is configured using an already prepared compiler state\r\n * that is provided programmatically at runtime.  This can potentially enable faster builds,\r\n * by reusing the same compiler invocation for tsc, tslint, and API Extractor.\r\n *\r\n * If configType='runtime' is specified, then IExtractorRuntimeOptions.compilerProgram must be\r\n * provided.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorRuntimeCompilerConfig {\r\n  configType: 'runtime';\r\n}\r\n\r\n/**\r\n * Describes a specific project that will be analyzed.  In principle, multiple individual\r\n * projects can be processed while reusing a common compiler state.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorProjectConfig {\r\n  /**\r\n   * Specifies the TypeScript *.d.ts file that will be treated as the entry point\r\n   * for compilation.  Typically this corresponds to the \"typings\" or \"types\" field\r\n   * from package.json, but secondary entry points are also possible.\r\n   *\r\n   * @remarks\r\n   * The file extension must not be *.ts.  API Extractor does NOT process TypeScript\r\n   * source code, but instead the output of the compiler.  This is needed for compatibility\r\n   * with preprocessors and also custom tooling that produces TypeScript-compatible outputs\r\n   * without using the real compiler.  It also speeds up the analysis by avoiding the\r\n   * need to parse implementation code.\r\n   */\r\n  entryPointSourceFile: string;\r\n\r\n  /**\r\n   * Indicates folders containing additional APJ JSON files (*.api.json) that will be\r\n   * consulted during the analysis.  This is useful for providing annotations for\r\n   * external packages that were not built using API Extractor.\r\n   */\r\n  externalJsonFileFolders?: string[];\r\n}\r\n\r\n/**\r\n * These policies determine how API Extractor validates various best practices for API design.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorPoliciesConfig {\r\n  /**\r\n   * Controls how API Extractor treats the TypeScript namespace keyword:\r\n   *\r\n   * conservative - (the default) namespaces may only be used to represent tables of constants\r\n   *\r\n   * permissive - arbitrary nesting of namespaces is allowed\r\n   */\r\n  namespaceSupport?: 'conservative' | 'permissive';\r\n}\r\n\r\n/**\r\n * Configuration values used for the {@link IExtractorValidationRulesConfig} block.\r\n * @public\r\n */\r\nexport const enum ExtractorValidationRulePolicy {\r\n  /**\r\n   * Violations of the rule will be reported as build errors.\r\n   */\r\n  error = 'error',\r\n  /**\r\n   * Violations of the rule are silently ignored.\r\n   */\r\n  allow = 'allow'\r\n}\r\n\r\n/**\r\n * Configuration for various validation checks that ensure good API design\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorValidationRulesConfig {\r\n  /**\r\n   * This rule checks for top-level API items that are missing a release tag such as \\@beta or \\@internal.\r\n   * If \"allow\" is chosen, then missing release tags will be assumed to be \\@public.\r\n   * The default policy is \"error\".\r\n   */\r\n  missingReleaseTags?: ExtractorValidationRulePolicy;\r\n}\r\n\r\n/**\r\n * Configures how the API review files (*.api.ts) will be generated.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorApiReviewFileConfig {\r\n  /**\r\n   * Whether to generate review files at all.  The default is true.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * The file path of the folder containing API review file, relative to\r\n   * the project folder.  This is part of an API review workflow:  During a build,\r\n   * the API Extractor will output an API file, e.g. \"my-project/temp/my-project.api.ts\".\r\n   * It will then compare this file against the last reviewed file,\r\n   * e.g. \"../api-review/my-project.api.ts\" (assuming that apiReviewFolder is \"../api-review\").\r\n   * If the files are different, the build will fail with an error message that instructs\r\n   * the developer to update the approved file, and then commit it to Git.  When they\r\n   * create a Pull Request, a branch policy will look for changes under \"api-review/*\"\r\n   * and require signoff from the appropriate reviewers.\r\n   *\r\n   * The default value is \"./etc\".\r\n   *\r\n   * Example: \"config\" (for a standalone project)\r\n   * Example: \"../../common/api-review\"  (for a Git repository with Rush)\r\n   */\r\n  apiReviewFolder?: string;\r\n\r\n  /**\r\n   * The *.api.ts report is saved into this folder.  During a production build\r\n   * (i.e. when IExtractorRuntimeOptions.productionBuild=true) the temporary file will\r\n   * be compared with the file in apiReviewFolder; if there are differences, and error\r\n   * will be reported.  During a non-production build, the temporary file will be\r\n   * automatically copied to the apiReviewFolder.\r\n   *\r\n   * The default value is \"./temp\".\r\n   */\r\n  tempFolder?: string;\r\n}\r\n\r\n/**\r\n * Configures how the API JSON files (*.api.json) will be generated.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorApiJsonFileConfig {\r\n  /**\r\n   * Whether to generate API JSON files at all.  The default is true.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * Specifies where the *.api.json file should be written.\r\n   *\r\n   * The default value is \"./dist\"\r\n   */\r\n  outputFolder?: string;\r\n}\r\n\r\n/**\r\n * Configures how the *.d.ts rollup files will be generated.\r\n *\r\n * @remarks\r\n * API Extractor can generate a consolidated *.d.ts file that contains all\r\n * the exported typings for the package entry point.  It can also trim\r\n * \\@alpha, \\@beta, and \\@internal definitions according to the release type.\r\n *\r\n * @beta\r\n */\r\nexport interface IExtractorDtsRollupConfig {\r\n  /**\r\n   * Whether to generate rollup *.d.ts files.  The default is false.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * If \"trimming\" is false (the default), then a single *.d.ts rollup file will be generated in the\r\n   * \"publishFolder\".  If \"trimming\" is true, then three separate *.d.ts rollups will be\r\n   * generated in \"publishFolderForInternal\", \"publishFolderForBeta\", and \"publishFolderForPublic\".\r\n   *\r\n   * @remarks\r\n   * In either case, \"mainDtsRollupPath\" indicates the relative file path.\r\n   */\r\n  trimming?: boolean;\r\n\r\n  /**\r\n   * This setting is only used if \"trimming\" is false.\r\n   * It indicates the folder where \"npm publish\" will be run.  The default value is \"./dist\".\r\n   */\r\n  publishFolder?: string;\r\n\r\n  /**\r\n   * This setting is only used if \"trimming\" is true.\r\n   * It indicates the folder where \"npm publish\" will be run for an internal release.\r\n   * The default value is \"./dist/internal\".\r\n   *\r\n   * @remarks\r\n   * An internal release will contain all definitions that are reachable from the entry point.\r\n   */\r\n  publishFolderForInternal?: string;\r\n\r\n  /**\r\n   * This setting is only used if \"trimming\" is true.\r\n   * It indicates the folder where \"npm publish\" will be run for a beta release.\r\n   * The default value is \"./dist/beta\".\r\n   *\r\n   * @remarks\r\n   * A beta release will contain all definitions that are reachable from the entry point,\r\n   * except definitions marked as \\@alpha or \\@internal.\r\n   */\r\n  publishFolderForBeta?: string;\r\n\r\n  /**\r\n   * This setting is only used if \"trimming\" is true.\r\n   * It indicates the folder where \"npm publish\" will be run for a public release.\r\n   * The default value is \"./dist/public\".\r\n   *\r\n   * @remarks\r\n   * A public release will contain all definitions that are reachable from the entry point,\r\n   * except definitions marked as \\@beta, \\@alpha, or \\@internal.\r\n   */\r\n  publishFolderForPublic?: string;\r\n\r\n  /**\r\n   * Specifies the relative path for the *.d.ts rollup file to be generated for the\r\n   * package's main entry point.  The default value is an empty string, which causes\r\n   * the path to be automatically inferred from the \"typings\" field of the project's\r\n   * package.json file.\r\n   *\r\n   * @remarks\r\n   * If specified, the value must be a relative path that can be combined with one of\r\n   * the publish folder settings.\r\n   */\r\n  mainDtsRollupPath?: string;\r\n}\r\n\r\n/**\r\n * Configuration options for the API Extractor tool.  These options can be loaded\r\n * from a JSON config file.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorConfig {\r\n  /**\r\n   * Determines how the TypeScript compiler will be invoked.\r\n   * The compiler.configType selects the type of configuration;\r\n   * Different options are available according to the configuration type.\r\n   */\r\n  compiler: IExtractorTsconfigCompilerConfig | IExtractorRuntimeCompilerConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorPoliciesConfig}\r\n   */\r\n  policies?: IExtractorPoliciesConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorValidationRulesConfig}\r\n   */\r\n  validationRules?: IExtractorValidationRulesConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorProjectConfig}\r\n   */\r\n  project: IExtractorProjectConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorApiReviewFileConfig}\r\n   */\r\n  apiReviewFile?: IExtractorApiReviewFileConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorApiJsonFileConfig}\r\n   */\r\n  apiJsonFile?: IExtractorApiJsonFileConfig;\r\n\r\n  /**\r\n   * {@inheritdoc IExtractorDtsRollupConfig}\r\n   * @beta\r\n   */\r\n  dtsRollup?: IExtractorDtsRollupConfig;\r\n}\r\n"],"sourceRoot":"../../../src"}