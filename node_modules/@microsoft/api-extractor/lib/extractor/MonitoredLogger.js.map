{"version":3,"sources":["extractor/MonitoredLogger.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAI3D;;GAEG;AACH;IAkBE,YAAY,MAAe;QACzB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAEM,UAAU,CAAC,OAAe;QAC/B,EAAE,IAAI,CAAC,YAAY,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAEM,OAAO,CAAC,OAAe;QAC5B,EAAE,IAAI,CAAC,YAAY,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAEM,UAAU,CAAC,OAAe;QAC/B,EAAE,IAAI,CAAC,YAAY,CAAC;QACpB,EAAE,IAAI,CAAC,YAAY,CAAC;QACpB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAEM,QAAQ,CAAC,OAAe;QAC7B,EAAE,IAAI,CAAC,YAAY,CAAC;QACpB,EAAE,IAAI,CAAC,UAAU,CAAC;QAClB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAEM,aAAa;QAClB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;QACpB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IACxB,CAAC;CACF;AAlDD,0CAkDC","file":"MonitoredLogger.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { ILogger } from './ILogger';\r\n\r\n/**\r\n * Used to collect statistics for an ILogger implementation.\r\n */\r\nexport class MonitoredLogger implements ILogger {\r\n  /**\r\n   * Number of calls to logError()\r\n   */\r\n  public errorCount: number;\r\n\r\n  /**\r\n   * Number of calls to logWarning()\r\n   */\r\n  public warningCount: number;\r\n\r\n  /**\r\n   * Number of calls to any logging method.\r\n   */\r\n  public messageCount: number;\r\n\r\n  private _innerLogger: ILogger;\r\n\r\n  constructor(logger: ILogger) {\r\n    this._innerLogger = logger;\r\n    this.resetCounters();\r\n  }\r\n\r\n  public logVerbose(message: string): void {\r\n    ++this.messageCount;\r\n    this._innerLogger.logVerbose(message);\r\n  }\r\n\r\n  public logInfo(message: string): void {\r\n    ++this.messageCount;\r\n    this._innerLogger.logInfo(message);\r\n  }\r\n\r\n  public logWarning(message: string): void {\r\n    ++this.messageCount;\r\n    ++this.warningCount;\r\n    this._innerLogger.logWarning(message);\r\n  }\r\n\r\n  public logError(message: string): void {\r\n    ++this.messageCount;\r\n    ++this.errorCount;\r\n    this._innerLogger.logError(message);\r\n  }\r\n\r\n  public resetCounters(): void {\r\n    this.errorCount = 0;\r\n    this.warningCount = 0;\r\n    this.messageCount = 0;\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}