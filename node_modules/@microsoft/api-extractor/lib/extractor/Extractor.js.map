{"version":3,"sources":["extractor/Extractor.ts"],"names":[],"mappings":"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","file":"Extractor.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as ts from 'typescript';\r\nimport lodash = require('lodash');\r\nimport colors = require('colors');\r\n\r\nimport {\r\n  JsonFile,\r\n  JsonSchema,\r\n  Path,\r\n  FileSystem\r\n} from '@microsoft/node-core-library';\r\nimport {\r\n  IExtractorConfig,\r\n  IExtractorProjectConfig,\r\n  IExtractorApiJsonFileConfig,\r\n  IExtractorDtsRollupConfig\r\n} from './IExtractorConfig';\r\nimport { ExtractorContext } from '../ExtractorContext';\r\nimport { ILogger } from './ILogger';\r\nimport { ApiJsonGenerator } from '../generators/ApiJsonGenerator';\r\nimport { ApiFileGenerator } from '../generators/ApiFileGenerator';\r\nimport { DtsRollupGenerator, DtsRollupKind } from '../generators/dtsRollup/DtsRollupGenerator';\r\nimport { MonitoredLogger } from './MonitoredLogger';\r\n\r\n/**\r\n * Options for {@link Extractor.processProject}.\r\n * @public\r\n */\r\nexport interface IAnalyzeProjectOptions {\r\n  /**\r\n   * If omitted, then the {@link IExtractorConfig.project} config will be used by default.\r\n   */\r\n  projectConfig?: IExtractorProjectConfig;\r\n}\r\n\r\n/**\r\n * Runtime options for Extractor.\r\n *\r\n * @public\r\n */\r\nexport interface IExtractorOptions {\r\n  /**\r\n   * If IExtractorConfig.project.configType = 'runtime', then the TypeScript compiler state\r\n   * must be provided via this option.\r\n   */\r\n  compilerProgram?: ts.Program;\r\n\r\n  /**\r\n   * Allows the caller to handle API Extractor errors; otherwise, they will be logged\r\n   * to the console.\r\n   */\r\n  customLogger?: Partial<ILogger>;\r\n\r\n  /**\r\n   * Indicates that API Extractor is running as part of a local build, e.g. on developer's\r\n   * machine. This disables certain validation that would normally be performed\r\n   * for a ship/production build. For example, the *.api.ts review file is\r\n   * automatically local in a debug build.\r\n   *\r\n   * The default value is false.\r\n   */\r\n  localBuild?: boolean;\r\n}\r\n\r\n/**\r\n * Used to invoke the API Extractor tool.\r\n * @public\r\n */\r\nexport class Extractor {\r\n  /**\r\n   * The JSON Schema for API Extractor config file (api-extractor-config.schema.json).\r\n   */\r\n  public static jsonSchema: JsonSchema = JsonSchema.fromFile(\r\n    path.join(__dirname, './api-extractor.schema.json'));\r\n\r\n  private static _defaultConfig: Partial<IExtractorConfig> = JsonFile.load(path.join(__dirname,\r\n    './api-extractor-defaults.json'));\r\n\r\n  private static _outputFileExtensionRegExp: RegExp = /\\.d\\.ts$/i;\r\n\r\n  private static _defaultLogger: ILogger = {\r\n    logVerbose: (message: string) => console.log('(Verbose) ' + message),\r\n    logInfo: (message: string) => console.log(message),\r\n    logWarning: (message: string) => console.warn(colors.yellow(message)),\r\n    logError: (message: string) => console.error(colors.red(message))\r\n  };\r\n\r\n  private readonly _actualConfig: IExtractorConfig;\r\n  private readonly _program: ts.Program;\r\n  private readonly _localBuild: boolean;\r\n  private readonly _monitoredLogger: MonitoredLogger;\r\n  private readonly _absoluteRootFolder: string;\r\n\r\n  /**\r\n   * Given a list of absolute file paths, return a list containing only the declaration\r\n   * files.  Duplicates are also eliminated.\r\n   *\r\n   * @remarks\r\n   * The tsconfig.json settings specify the compiler's input (a set of *.ts source files,\r\n   * plus some *.d.ts declaration files used for legacy typings).  However API Extractor\r\n   * analyzes the compiler's output (a set of *.d.ts entry point files, plus any legacy\r\n   * typings).  This requires API Extractor to generate a special file list when it invokes\r\n   * the compiler.\r\n   *\r\n   * For configType=tsconfig this happens automatically, but for configType=runtime it is\r\n   * the responsibility of the custom tooling.  The generateFilePathsForAnalysis() function\r\n   * is provided to facilitate that.  Duplicates are removed so that entry points can be\r\n   * appended without worrying whether they may already appear in the tsconfig.json file list.\r\n   */\r\n  public static generateFilePathsForAnalysis(inputFilePaths: string[]): string[] {\r\n    const analysisFilePaths: string[] = [];\r\n\r\n    const seenFiles: Set<string> = new Set<string>();\r\n\r\n    for (const inputFilePath of inputFilePaths) {\r\n      const inputFileToUpper: string = inputFilePath.toUpperCase();\r\n      if (!seenFiles.has(inputFileToUpper)) {\r\n        seenFiles.add(inputFileToUpper);\r\n\r\n        if (!path.isAbsolute(inputFilePath)) {\r\n          throw new Error('Input file is not an absolute path: ' + inputFilePath);\r\n        }\r\n\r\n        if (Extractor._outputFileExtensionRegExp.test(inputFilePath)) {\r\n          analysisFilePaths.push(inputFilePath);\r\n        }\r\n      }\r\n    }\r\n\r\n    return analysisFilePaths;\r\n  }\r\n\r\n  private static _applyConfigDefaults(config: IExtractorConfig): IExtractorConfig {\r\n    // Use the provided config to override the defaults\r\n    const normalized: IExtractorConfig  = lodash.merge(\r\n      lodash.cloneDeep(Extractor._defaultConfig), config);\r\n\r\n    return normalized;\r\n  }\r\n\r\n  public constructor(config: IExtractorConfig, options?: IExtractorOptions) {\r\n    let mergedLogger: ILogger;\r\n    if (options && options.customLogger) {\r\n      mergedLogger = lodash.merge(lodash.clone(Extractor._defaultLogger), options.customLogger);\r\n    } else {\r\n      mergedLogger = Extractor._defaultLogger;\r\n    }\r\n    this._monitoredLogger = new MonitoredLogger(mergedLogger);\r\n\r\n    this._actualConfig = Extractor._applyConfigDefaults(config);\r\n\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n\r\n    this._localBuild = options.localBuild || false;\r\n\r\n    switch (this.actualConfig.compiler.configType) {\r\n      case 'tsconfig':\r\n        const rootFolder: string = this.actualConfig.compiler.rootFolder;\r\n        if (!FileSystem.exists(rootFolder)) {\r\n          throw new Error('The root folder does not exist: ' + rootFolder);\r\n        }\r\n\r\n        this._absoluteRootFolder = path.normalize(path.resolve(rootFolder));\r\n\r\n        let tsconfig: {} | undefined = this.actualConfig.compiler.overrideTsconfig;\r\n        if (!tsconfig) {\r\n          // If it wasn't overridden, then load it from disk\r\n          tsconfig = JsonFile.load(path.join(this._absoluteRootFolder, 'tsconfig.json'));\r\n        }\r\n\r\n        const commandLine: ts.ParsedCommandLine = ts.parseJsonConfigFileContent(tsconfig,\r\n          ts.sys, this._absoluteRootFolder);\r\n\r\n        const normalizedEntryPointFile: string = path.normalize(\r\n          path.resolve(this._absoluteRootFolder, this.actualConfig.project.entryPointSourceFile));\r\n\r\n        // Append the normalizedEntryPointFile and remove any source files from the list\r\n        const analysisFilePaths: string[] = Extractor.generateFilePathsForAnalysis(commandLine.fileNames\r\n          .concat(normalizedEntryPointFile));\r\n\r\n        this._program = ts.createProgram(analysisFilePaths, commandLine.options);\r\n\r\n        if (commandLine.errors.length > 0) {\r\n          throw new Error('Error parsing tsconfig.json content: ' + commandLine.errors[0].messageText);\r\n        }\r\n\r\n        break;\r\n\r\n      case 'runtime':\r\n        if (!options.compilerProgram) {\r\n          throw new Error('The compiler.configType=runtime configuration was specified,'\r\n            + ' but the caller did not provide an options.compilerProgram object');\r\n        }\r\n\r\n        this._program = options.compilerProgram;\r\n        const rootDir: string | undefined = this._program.getCompilerOptions().rootDir;\r\n        if (!rootDir) {\r\n          throw new Error('The provided compiler state does not specify a root folder');\r\n        }\r\n        if (!FileSystem.exists(rootDir)) {\r\n          throw new Error('The rootDir does not exist: ' + rootDir);\r\n        }\r\n        this._absoluteRootFolder = path.resolve(rootDir);\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Unsupported config type');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the normalized configuration object after defaults have been applied.\r\n   *\r\n   * @remarks\r\n   * This is a read-only object.  The caller should NOT modify any member of this object.\r\n   * It is provided for diagnostic purposes.  For example, a build script could write\r\n   * this object to a JSON file to report the final configuration options used by API Extractor.\r\n   */\r\n  public get actualConfig(): IExtractorConfig {\r\n    return this._actualConfig;\r\n  }\r\n\r\n  /**\r\n   * Invokes the API Extractor engine, using the configuration that was passed to the constructor.\r\n   * @deprecated Use {@link Extractor.processProject} instead.\r\n   */\r\n  public analyzeProject(options?: IAnalyzeProjectOptions): void {\r\n    this.processProject(options);\r\n  }\r\n\r\n  /**\r\n   * Invokes the API Extractor engine, using the configuration that was passed to the constructor.\r\n   * @param options - provides additional runtime state that is NOT part of the API Extractor\r\n   *     config file.\r\n   * @returns true for a successful build, or false if the tool chain should fail the build\r\n   *\r\n   * @remarks\r\n   *\r\n   * This function returns false to indicate that the build failed, i.e. the command-line tool\r\n   * would return a nonzero exit code.  Normally the build fails if there are any errors or\r\n   * warnings; however, if options.localBuild=true then warnings are ignored.\r\n   */\r\n  public processProject(options?: IAnalyzeProjectOptions): boolean {\r\n    this._monitoredLogger.resetCounters();\r\n\r\n    if (!options) {\r\n      options = { };\r\n    }\r\n\r\n    const projectConfig: IExtractorProjectConfig = options.projectConfig ?\r\n      options.projectConfig : this.actualConfig.project;\r\n\r\n    // This helps strict-null-checks to understand that _applyConfigDefaults() eliminated\r\n    // any undefined members\r\n    if (!(this.actualConfig.policies && this.actualConfig.validationRules\r\n      && this.actualConfig.apiJsonFile && this.actualConfig.apiReviewFile && this.actualConfig.dtsRollup)) {\r\n      throw new Error('The configuration object wasn\\'t normalized properly');\r\n    }\r\n\r\n    if (!Extractor._outputFileExtensionRegExp.test(projectConfig.entryPointSourceFile)) {\r\n      throw new Error('The entry point is not a declaration file: ' + projectConfig.entryPointSourceFile);\r\n    }\r\n\r\n    const context: ExtractorContext = new ExtractorContext({\r\n      program: this._program,\r\n      entryPointFile: path.resolve(this._absoluteRootFolder, projectConfig.entryPointSourceFile),\r\n      logger: this._monitoredLogger,\r\n      policies: this.actualConfig.policies,\r\n      validationRules: this.actualConfig.validationRules\r\n    });\r\n\r\n    for (const externalJsonFileFolder of projectConfig.externalJsonFileFolders || []) {\r\n      context.loadExternalPackages(path.resolve(this._absoluteRootFolder, externalJsonFileFolder));\r\n    }\r\n\r\n    const packageBaseName: string = path.basename(context.packageName);\r\n\r\n    const apiJsonFileConfig: IExtractorApiJsonFileConfig = this.actualConfig.apiJsonFile;\r\n\r\n    if (apiJsonFileConfig.enabled) {\r\n      const outputFolder: string = path.resolve(this._absoluteRootFolder,\r\n        apiJsonFileConfig.outputFolder);\r\n\r\n      const jsonGenerator: ApiJsonGenerator = new ApiJsonGenerator();\r\n      const apiJsonFilename: string = path.join(outputFolder, packageBaseName + '.api.json');\r\n\r\n      this._monitoredLogger.logVerbose('Writing: ' + apiJsonFilename);\r\n      jsonGenerator.writeJsonFile(apiJsonFilename, context);\r\n    }\r\n\r\n    if (this.actualConfig.apiReviewFile.enabled) {\r\n      const generator: ApiFileGenerator = new ApiFileGenerator();\r\n      const apiReviewFilename: string = packageBaseName + '.api.ts';\r\n\r\n      const actualApiReviewPath: string = path.resolve(this._absoluteRootFolder,\r\n        this.actualConfig.apiReviewFile.tempFolder, apiReviewFilename);\r\n      const actualApiReviewShortPath: string = this._getShortFilePath(actualApiReviewPath);\r\n\r\n      const expectedApiReviewPath: string = path.resolve(this._absoluteRootFolder,\r\n        this.actualConfig.apiReviewFile.apiReviewFolder, apiReviewFilename);\r\n      const expectedApiReviewShortPath: string = this._getShortFilePath(expectedApiReviewPath);\r\n\r\n      const actualApiReviewContent: string = generator.generateApiFileContent(context);\r\n\r\n      // Write the actual file\r\n      FileSystem.writeFile(actualApiReviewPath, actualApiReviewContent, {\r\n        ensureFolderExists: true\r\n      });\r\n\r\n      // Compare it against the expected file\r\n      if (FileSystem.exists(expectedApiReviewPath)) {\r\n        const expectedApiReviewContent: string = FileSystem.readFile(expectedApiReviewPath);\r\n\r\n        if (!ApiFileGenerator.areEquivalentApiFileContents(actualApiReviewContent, expectedApiReviewContent)) {\r\n          if (!this._localBuild) {\r\n            // For production, issue a warning that will break the CI build.\r\n            this._monitoredLogger.logWarning('You have changed the public API signature for this project.'\r\n              // @microsoft/gulp-core-build seems to run JSON.stringify() on the error messages for some reason,\r\n              // so try to avoid escaped characters:\r\n              + ` Please overwrite ${expectedApiReviewShortPath} with a`\r\n              + ` copy of ${actualApiReviewShortPath}`\r\n              + ' and then request an API review. See the Git repository README.md for more info.');\r\n          } else {\r\n            // For a local build, just copy the file automatically.\r\n            this._monitoredLogger.logWarning('You have changed the public API signature for this project.'\r\n              + ` Updating ${expectedApiReviewShortPath}`);\r\n\r\n            FileSystem.writeFile(expectedApiReviewPath, actualApiReviewContent);\r\n          }\r\n        } else {\r\n          this._monitoredLogger.logVerbose(`The API signature is up to date: ${actualApiReviewShortPath}`);\r\n        }\r\n      } else {\r\n        // NOTE: This warning seems like a nuisance, but it has caught genuine mistakes.\r\n        // For example, when projects were moved into category folders, the relative path for\r\n        // the API review files ended up in the wrong place.\r\n        this._monitoredLogger.logError(`The API review file has not been set up.`\r\n          + ` Do this by copying ${actualApiReviewShortPath}`\r\n          + ` to ${expectedApiReviewShortPath} and committing it.`);\r\n      }\r\n    }\r\n\r\n    this._generateRollupDtsFiles(context);\r\n\r\n    if (this._localBuild) {\r\n      // For a local build, fail if there were errors (but ignore warnings)\r\n      return this._monitoredLogger.errorCount === 0;\r\n    } else {\r\n      // For a production build, fail if there were any errors or warnings\r\n      return (this._monitoredLogger.errorCount + this._monitoredLogger.warningCount) === 0;\r\n    }\r\n  }\r\n\r\n  private _generateRollupDtsFiles(context: ExtractorContext): void {\r\n    const dtsRollup: IExtractorDtsRollupConfig = this.actualConfig.dtsRollup!;\r\n    if (dtsRollup.enabled) {\r\n      let mainDtsRollupPath: string = dtsRollup.mainDtsRollupPath!;\r\n\r\n      if (!mainDtsRollupPath) {\r\n        // If the mainDtsRollupPath is not specified, then infer it from the package.json file\r\n        if (!context.packageJson.typings) {\r\n          this._monitoredLogger.logError('Either the \"mainDtsRollupPath\" setting must be specified,'\r\n            + ' or else the package.json file must contain a \"typings\" field.');\r\n          return;\r\n        }\r\n\r\n        // Resolve the \"typings\" field relative to package.json itself\r\n        const resolvedTypings: string = path.resolve(context.packageFolder, context.packageJson.typings);\r\n\r\n        if (dtsRollup.trimming) {\r\n          if (!Path.isUnder(resolvedTypings, dtsRollup.publishFolderForInternal!)) {\r\n            this._monitoredLogger.logError('The \"mainDtsRollupPath\" setting was not specified.'\r\n              + ' In this case, the package.json \"typings\" field must point to a file under'\r\n              + ' the \"publishFolderForInternal\": ' + dtsRollup.publishFolderForInternal!);\r\n            return;\r\n          }\r\n\r\n          mainDtsRollupPath = path.relative(dtsRollup.publishFolderForInternal!, resolvedTypings);\r\n        } else {\r\n          if (!Path.isUnder(resolvedTypings, dtsRollup.publishFolder!)) {\r\n            this._monitoredLogger.logError('The \"mainDtsRollupPath\" setting was not specified.'\r\n              + ' In this case, the package.json \"typings\" field must point to a file under'\r\n              + ' the \"publishFolder\": ' + dtsRollup.publishFolder!);\r\n            return;\r\n          }\r\n\r\n          mainDtsRollupPath = path.relative(dtsRollup.publishFolder!, resolvedTypings);\r\n        }\r\n\r\n        this._monitoredLogger.logVerbose(\r\n          `The \"mainDtsRollupPath\" setting was inferred from package.json: ${mainDtsRollupPath}`\r\n        );\r\n      } else {\r\n        this._monitoredLogger.logVerbose(`The \"mainDtsRollupPath\" is: ${mainDtsRollupPath}`);\r\n\r\n        if (!path.isAbsolute(mainDtsRollupPath)) {\r\n          this._monitoredLogger.logError('The \"mainDtsRollupPath\" setting must be a relative path'\r\n            + ' that can be combined with one of the \"publishFolder\" settings.');\r\n          return;\r\n        }\r\n      }\r\n\r\n      const dtsRollupGenerator: DtsRollupGenerator = new DtsRollupGenerator(context);\r\n      dtsRollupGenerator.analyze();\r\n\r\n      if (dtsRollup.trimming) {\r\n        this._generateRollupDtsFile(dtsRollupGenerator,\r\n          path.resolve(context.packageFolder, dtsRollup.publishFolderForPublic!, mainDtsRollupPath),\r\n          DtsRollupKind.PublicRelease);\r\n\r\n        this._generateRollupDtsFile(dtsRollupGenerator,\r\n          path.resolve(context.packageFolder, dtsRollup.publishFolderForBeta!, mainDtsRollupPath),\r\n          DtsRollupKind.BetaRelease);\r\n\r\n        this._generateRollupDtsFile(dtsRollupGenerator,\r\n          path.resolve(context.packageFolder, dtsRollup.publishFolderForInternal!, mainDtsRollupPath),\r\n          DtsRollupKind.InternalRelease);\r\n      } else {\r\n        this._generateRollupDtsFile(dtsRollupGenerator,\r\n          path.resolve(context.packageFolder, dtsRollup.publishFolder!, mainDtsRollupPath),\r\n          DtsRollupKind.InternalRelease); // (no trimming)\r\n      }\r\n    }\r\n  }\r\n\r\n  private _generateRollupDtsFile(dtsRollupGenerator: DtsRollupGenerator, mainDtsRollupFullPath: string,\r\n    dtsKind: DtsRollupKind): void {\r\n\r\n    this._monitoredLogger.logVerbose(`Writing package typings: ${mainDtsRollupFullPath}`);\r\n\r\n    dtsRollupGenerator.writeTypingsFile(mainDtsRollupFullPath, dtsKind);\r\n}\r\n\r\n  private _getShortFilePath(absolutePath: string): string {\r\n    if (!path.isAbsolute(absolutePath)) {\r\n      throw new Error('Expected absolute path: ' + absolutePath);\r\n    }\r\n    return path.relative(this._absoluteRootFolder, absolutePath).replace(/\\\\/g, '/');\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}