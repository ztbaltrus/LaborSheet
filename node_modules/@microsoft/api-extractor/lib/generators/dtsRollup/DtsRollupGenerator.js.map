{"version":3,"sources":["generators/dtsRollup/DtsRollupGenerator.ts"],"names":[],"mappings":"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","file":"DtsRollupGenerator.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-bitwise */\r\n\r\nimport * as ts from 'typescript';\r\nimport { FileSystem, NewlineKind } from '@microsoft/node-core-library';\r\n\r\nimport { ExtractorContext } from '../../ExtractorContext';\r\nimport { IndentedWriter } from '../../utils/IndentedWriter';\r\nimport { TypeScriptHelpers } from '../../utils/TypeScriptHelpers';\r\nimport { Span, SpanModification } from '../../utils/Span';\r\nimport { ReleaseTag } from '../../aedoc/ReleaseTag';\r\nimport { AstSymbolTable } from './AstSymbolTable';\r\nimport { AstEntryPoint } from './AstEntryPoint';\r\nimport { AstSymbol } from './AstSymbol';\r\nimport { AstImport } from './AstImport';\r\nimport { DtsEntry } from './DtsEntry';\r\nimport { AstDeclaration } from './AstDeclaration';\r\nimport { SymbolAnalyzer } from './SymbolAnalyzer';\r\n\r\n/**\r\n * Used with DtsRollupGenerator.writeTypingsFile()\r\n */\r\nexport enum DtsRollupKind {\r\n  /**\r\n   * Generate a *.d.ts file for an internal release, or for the trimming=false mode.\r\n   * This output file will contain all definitions that are reachable from the entry point.\r\n   */\r\n  InternalRelease,\r\n\r\n  /**\r\n   * Generate a *.d.ts file for a preview release.\r\n   * This output file will contain all definitions that are reachable from the entry point,\r\n   * except definitions marked as \\@alpha or \\@internal.\r\n   */\r\n  BetaRelease,\r\n\r\n  /**\r\n   * Generate a *.d.ts file for a public release.\r\n   * This output file will contain all definitions that are reachable from the entry point,\r\n   * except definitions marked as \\@beta, \\@alpha, or \\@internal.\r\n   */\r\n  PublicRelease\r\n}\r\n\r\nexport class DtsRollupGenerator {\r\n  private _context: ExtractorContext;\r\n  private _typeChecker: ts.TypeChecker;\r\n  private _astSymbolTable: AstSymbolTable;\r\n  private _astEntryPoint: AstEntryPoint | undefined;\r\n\r\n  private _dtsEntries: DtsEntry[] = [];\r\n  private _dtsEntriesByAstSymbol: Map<AstSymbol, DtsEntry> = new Map<AstSymbol, DtsEntry>();\r\n  private _dtsEntriesBySymbol: Map<ts.Symbol, DtsEntry> = new Map<ts.Symbol, DtsEntry>();\r\n  private _releaseTagByAstSymbol: Map<AstSymbol, ReleaseTag> = new Map<AstSymbol, ReleaseTag>();\r\n\r\n  /**\r\n   * A list of names (e.g. \"example-library\") that should appear in a reference like this:\r\n   *\r\n   * /// <reference types=\"example-library\" />\r\n   */\r\n  private _dtsTypeDefinitionReferences: string[] = [];\r\n\r\n  public constructor(context: ExtractorContext) {\r\n    this._context = context;\r\n    this._typeChecker = context.typeChecker;\r\n    this._astSymbolTable = new AstSymbolTable(this._context.typeChecker, this._context.packageJsonLookup);\r\n  }\r\n\r\n  /**\r\n   * Perform the analysis.  This must be called before writeTypingsFile().\r\n   */\r\n  public analyze(): void {\r\n    if (this._astEntryPoint) {\r\n      throw new Error('DtsRollupGenerator.analyze() was already called');\r\n    }\r\n\r\n    // Build the entry point\r\n    const sourceFile: ts.SourceFile = this._context.package.getDeclaration().getSourceFile();\r\n    this._astEntryPoint = this._astSymbolTable.fetchEntryPoint(sourceFile);\r\n\r\n    const exportedAstSymbols: AstSymbol[] = [];\r\n\r\n    // Create a DtsEntry for each top-level export\r\n    for (const exportedMember of this._astEntryPoint.exportedMembers) {\r\n      const astSymbol: AstSymbol = exportedMember.astSymbol;\r\n\r\n      this._createDtsEntryForSymbol(exportedMember.astSymbol, exportedMember.name);\r\n\r\n      exportedAstSymbols.push(astSymbol);\r\n    }\r\n\r\n    // Create a DtsEntry for each indirectly referenced export.\r\n    // Note that we do this *after* the above loop, so that references to exported AstSymbols\r\n    // are encountered first as exports.\r\n    const alreadySeenAstSymbols: Set<AstSymbol> = new Set<AstSymbol>();\r\n    for (const exportedAstSymbol of exportedAstSymbols) {\r\n      this._createDtsEntryForIndirectReferences(exportedAstSymbol, alreadySeenAstSymbols);\r\n    }\r\n\r\n    this._makeUniqueNames();\r\n\r\n    this._dtsEntries.sort((a, b) => a.getSortKey().localeCompare(b.getSortKey()));\r\n    this._dtsTypeDefinitionReferences.sort();\r\n  }\r\n\r\n  /**\r\n   * Generates the typings file and writes it to disk.\r\n   *\r\n   * @param dtsFilename    - The *.d.ts output filename\r\n   */\r\n  public writeTypingsFile(dtsFilename: string, dtsKind: DtsRollupKind): void {\r\n    const indentedWriter: IndentedWriter = new IndentedWriter();\r\n\r\n    this._generateTypingsFileContent(indentedWriter, dtsKind);\r\n\r\n    FileSystem.writeFile(dtsFilename, indentedWriter.toString(), {\r\n      convertLineEndings: NewlineKind.CrLf,\r\n      ensureFolderExists: true\r\n    });\r\n  }\r\n\r\n  private get astEntryPoint(): AstEntryPoint {\r\n    if (!this._astEntryPoint) {\r\n      throw new Error('DtsRollupGenerator.analyze() was not called');\r\n    }\r\n    return this._astEntryPoint;\r\n  }\r\n\r\n  private _createDtsEntryForSymbol(astSymbol: AstSymbol, exportedName: string | undefined): void {\r\n    let dtsEntry: DtsEntry | undefined = this._dtsEntriesByAstSymbol.get(astSymbol);\r\n\r\n    if (!dtsEntry) {\r\n      dtsEntry = new DtsEntry({\r\n        astSymbol: astSymbol,\r\n        originalName: exportedName || astSymbol.localName,\r\n        exported: !!exportedName\r\n      });\r\n\r\n      this._dtsEntriesByAstSymbol.set(astSymbol, dtsEntry);\r\n      this._dtsEntriesBySymbol.set(astSymbol.followedSymbol, dtsEntry);\r\n      this._dtsEntries.push(dtsEntry);\r\n\r\n      this._collectTypeDefinitionReferences(astSymbol);\r\n    } else {\r\n      if (exportedName) {\r\n        if (!dtsEntry.exported) {\r\n          throw new Error('Program Bug: DtsEntry should have been marked as exported');\r\n        }\r\n        if (dtsEntry.originalName !== exportedName) {\r\n          throw new Error(`The symbol ${exportedName} was also exported as ${dtsEntry.originalName};`\r\n            + ` this is not supported yet`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _createDtsEntryForIndirectReferences(astSymbol: AstSymbol, alreadySeenAstSymbols: Set<AstSymbol>): void {\r\n    if (alreadySeenAstSymbols.has(astSymbol)) {\r\n      return;\r\n    }\r\n    alreadySeenAstSymbols.add(astSymbol);\r\n\r\n    astSymbol.forEachDeclarationRecursive((astDeclaration: AstDeclaration) => {\r\n      for (const referencedAstSymbol of astDeclaration.referencedAstSymbols) {\r\n        this._createDtsEntryForSymbol(referencedAstSymbol, undefined);\r\n        this._createDtsEntryForIndirectReferences(referencedAstSymbol, alreadySeenAstSymbols);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Ensures a unique name for each item in the package typings file.\r\n   */\r\n  private _makeUniqueNames(): void {\r\n    const usedNames: Set<string> = new Set<string>();\r\n\r\n    // First collect the explicit package exports\r\n    for (const dtsEntry of this._dtsEntries) {\r\n      if (dtsEntry.exported) {\r\n\r\n        if (usedNames.has(dtsEntry.originalName)) {\r\n          // This should be impossible\r\n          throw new Error(`Program bug: a package cannot have two exports with the name ${dtsEntry.originalName}`);\r\n        }\r\n\r\n        dtsEntry.nameForEmit = dtsEntry.originalName;\r\n\r\n        usedNames.add(dtsEntry.nameForEmit);\r\n      }\r\n    }\r\n\r\n    // Next generate unique names for the non-exports that will be emitted\r\n    for (const dtsEntry of this._dtsEntries) {\r\n      if (!dtsEntry.exported) {\r\n        let suffix: number = 1;\r\n        dtsEntry.nameForEmit = dtsEntry.originalName;\r\n\r\n        while (usedNames.has(dtsEntry.nameForEmit)) {\r\n          dtsEntry.nameForEmit = `${dtsEntry.originalName}_${++suffix}`;\r\n        }\r\n\r\n        usedNames.add(dtsEntry.nameForEmit);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _generateTypingsFileContent(indentedWriter: IndentedWriter, dtsKind: DtsRollupKind): void {\r\n\r\n    indentedWriter.spacing = '';\r\n    indentedWriter.clear();\r\n\r\n    // If there is a @packagedocumentation header, put it first:\r\n    const packageDocumentation: string = this._context.package.documentation.originalAedoc;\r\n    if (packageDocumentation) {\r\n      indentedWriter.writeLine(TypeScriptHelpers.formatJSDocContent(packageDocumentation));\r\n      indentedWriter.writeLine();\r\n    }\r\n\r\n    // Emit the triple slash directives\r\n    for (const typeDirectiveReference of this._dtsTypeDefinitionReferences) {\r\n      // tslint:disable-next-line:max-line-length\r\n      // https://github.com/Microsoft/TypeScript/blob/611ebc7aadd7a44a4c0447698bfda9222a78cb66/src/compiler/declarationEmitter.ts#L162\r\n      indentedWriter.writeLine(`/// <reference types=\"${typeDirectiveReference}\" />`);\r\n    }\r\n\r\n    // Emit the imports\r\n    for (const dtsEntry of this._dtsEntries) {\r\n      if (dtsEntry.astSymbol.astImport) {\r\n\r\n        const releaseTag: ReleaseTag = this._getReleaseTagForAstSymbol(dtsEntry.astSymbol);\r\n        if (this._shouldIncludeReleaseTag(releaseTag, dtsKind)) {\r\n          const astImport: AstImport = dtsEntry.astSymbol.astImport;\r\n\r\n          if (astImport.exportName === '*') {\r\n            indentedWriter.write(`import * as ${dtsEntry.nameForEmit}`);\r\n          } else if (dtsEntry.nameForEmit !== astImport.exportName) {\r\n            indentedWriter.write(`import { ${astImport.exportName} as ${dtsEntry.nameForEmit} }`);\r\n          } else {\r\n            indentedWriter.write(`import { ${astImport.exportName} }`);\r\n          }\r\n          indentedWriter.writeLine(` from '${astImport.modulePath}';`);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Emit the regular declarations\r\n    for (const dtsEntry of this._dtsEntries) {\r\n      if (!dtsEntry.astSymbol.astImport) {\r\n\r\n        const releaseTag: ReleaseTag = this._getReleaseTagForAstSymbol(dtsEntry.astSymbol);\r\n        if (this._shouldIncludeReleaseTag(releaseTag, dtsKind)) {\r\n\r\n          // Emit all the declarations for this entry\r\n          for (const astDeclaration of dtsEntry.astSymbol.astDeclarations || []) {\r\n\r\n            indentedWriter.writeLine();\r\n\r\n            const span: Span = new Span(astDeclaration.declaration);\r\n            this._modifySpan(span, dtsEntry, astDeclaration, dtsKind);\r\n            indentedWriter.writeLine(span.getModifiedText());\r\n          }\r\n        } else {\r\n          indentedWriter.writeLine();\r\n          indentedWriter.writeLine(`/* Excluded from this release type: ${dtsEntry.nameForEmit} */`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Before writing out a declaration, _modifySpan() applies various fixups to make it nice.\r\n   */\r\n  private _modifySpan(span: Span, dtsEntry: DtsEntry, astDeclaration: AstDeclaration,\r\n    dtsKind: DtsRollupKind): void {\r\n\r\n    const previousSpan: Span | undefined = span.previousSibling;\r\n\r\n    let recurseChildren: boolean = true;\r\n    switch (span.kind) {\r\n      case ts.SyntaxKind.JSDocComment:\r\n        // If the @packagedocumentation comment seems to be attached to one of the regular API items,\r\n        // omit it.  It gets explictly emitted at the top of the file.\r\n        if (span.node.getText().match(/(?:\\s|\\*)@packagedocumentation(?:\\s|\\*)/g)) {\r\n          span.modification.skipAll();\r\n        }\r\n\r\n        // For now, we don't transform JSDoc comment nodes at all\r\n        recurseChildren = false;\r\n        break;\r\n\r\n      case ts.SyntaxKind.ExportKeyword:\r\n      case ts.SyntaxKind.DefaultKeyword:\r\n      case ts.SyntaxKind.DeclareKeyword:\r\n        // Delete any explicit \"export\" or \"declare\" keywords -- we will re-add them below\r\n        span.modification.skipAll();\r\n        break;\r\n\r\n      case ts.SyntaxKind.InterfaceKeyword:\r\n      case ts.SyntaxKind.ClassKeyword:\r\n      case ts.SyntaxKind.EnumKeyword:\r\n      case ts.SyntaxKind.NamespaceKeyword:\r\n      case ts.SyntaxKind.ModuleKeyword:\r\n      case ts.SyntaxKind.TypeKeyword:\r\n      case ts.SyntaxKind.FunctionKeyword:\r\n        // Replace the stuff we possibly deleted above\r\n        let replacedModifiers: string = '';\r\n\r\n        // Add a declare statement for root declarations (but not for nested declarations)\r\n        if (!astDeclaration.parent) {\r\n          replacedModifiers += 'declare ';\r\n        }\r\n\r\n        if (dtsEntry.exported) {\r\n          replacedModifiers = 'export ' + replacedModifiers;\r\n        }\r\n\r\n        if (previousSpan && previousSpan.kind === ts.SyntaxKind.SyntaxList) {\r\n          // If there is a previous span of type SyntaxList, then apply it before any other modifiers\r\n          // (e.g. \"abstract\") that appear there.\r\n          previousSpan.modification.prefix = replacedModifiers + previousSpan.modification.prefix;\r\n        } else {\r\n          // Otherwise just stick it in front of this span\r\n          span.modification.prefix = replacedModifiers + span.modification.prefix;\r\n        }\r\n        break;\r\n\r\n      case ts.SyntaxKind.VariableDeclaration:\r\n        if (!span.parent) {\r\n          // The VariableDeclaration node is part of a VariableDeclarationList, however\r\n          // the Entry.followedSymbol points to the VariableDeclaration part because\r\n          // multiple definitions might share the same VariableDeclarationList.\r\n          //\r\n          // Since we are emitting a separate declaration for each one, we need to look upwards\r\n          // in the ts.Node tree and write a copy of the enclosing VariableDeclarationList\r\n          // content (e.g. \"var\" from \"var x=1, y=2\").\r\n          const list: ts.VariableDeclarationList | undefined = TypeScriptHelpers.matchAncestor(span.node,\r\n            [ts.SyntaxKind.VariableDeclarationList, ts.SyntaxKind.VariableDeclaration]);\r\n          if (!list) {\r\n            throw new Error('Unsupported variable declaration');\r\n          }\r\n          const listPrefix: string = list.getSourceFile().text\r\n            .substring(list.getStart(), list.declarations[0].getStart());\r\n          span.modification.prefix = 'declare ' + listPrefix + span.modification.prefix;\r\n          span.modification.suffix = ';';\r\n        }\r\n        break;\r\n\r\n      case ts.SyntaxKind.Identifier:\r\n        let nameFixup: boolean = false;\r\n        const identifierSymbol: ts.Symbol | undefined = this._typeChecker.getSymbolAtLocation(span.node);\r\n        if (identifierSymbol) {\r\n          const followedSymbol: ts.Symbol = TypeScriptHelpers.followAliases(identifierSymbol, this._typeChecker);\r\n\r\n          const referencedDtsEntry: DtsEntry | undefined = this._dtsEntriesBySymbol.get(followedSymbol);\r\n\r\n          if (referencedDtsEntry) {\r\n            if (!referencedDtsEntry.nameForEmit) {\r\n              // This should never happen\r\n              throw new Error('referencedEntry.uniqueName is undefined');\r\n            }\r\n\r\n            span.modification.prefix = referencedDtsEntry.nameForEmit;\r\n            nameFixup = true;\r\n            // For debugging:\r\n            // span.modification.prefix += '/*R=FIX*/';\r\n          }\r\n\r\n        }\r\n\r\n        if (!nameFixup) {\r\n          // For debugging:\r\n          // span.modification.prefix += '/*R=KEEP*/';\r\n        }\r\n\r\n        break;\r\n    }\r\n\r\n    if (recurseChildren) {\r\n      for (const child of span.children) {\r\n        let childAstDeclaration: AstDeclaration = astDeclaration;\r\n\r\n        // Should we trim this node?\r\n        let trimmed: boolean = false;\r\n        if (SymbolAnalyzer.isAstDeclaration(child.kind)) {\r\n          childAstDeclaration = this._astSymbolTable.getChildAstDeclarationByNode(child.node, astDeclaration);\r\n\r\n          const releaseTag: ReleaseTag = this._getReleaseTagForAstSymbol(childAstDeclaration.astSymbol);\r\n          if (!this._shouldIncludeReleaseTag(releaseTag, dtsKind)) {\r\n            const modification: SpanModification = child.modification;\r\n\r\n            // Yes, trim it and stop here\r\n            const name: string = childAstDeclaration.astSymbol.localName;\r\n            modification.omitChildren = true;\r\n\r\n            modification.prefix = `/* Excluded from this release type: ${name} */`;\r\n            modification.suffix = '';\r\n\r\n            if (child.children.length > 0) {\r\n              // If there are grandchildren, then keep the last grandchild's separator,\r\n              // since it often has useful whitespace\r\n              modification.suffix = child.children[child.children.length - 1].separator;\r\n            }\r\n\r\n            if (child.nextSibling) {\r\n              // If the thing we are trimming is followed by a comma, then trim the comma also.\r\n              // An example would be an enum member.\r\n              if (child.nextSibling.kind === ts.SyntaxKind.CommaToken) {\r\n                // Keep its separator since it often has useful whitespace\r\n                modification.suffix += child.nextSibling.separator;\r\n                child.nextSibling.modification.skipAll();\r\n              }\r\n            }\r\n\r\n            trimmed = true;\r\n          }\r\n        }\r\n\r\n        if (!trimmed) {\r\n          this._modifySpan(child, dtsEntry, childAstDeclaration, dtsKind);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private _shouldIncludeReleaseTag(releaseTag: ReleaseTag, dtsKind: DtsRollupKind): boolean {\r\n    switch (dtsKind) {\r\n      case DtsRollupKind.InternalRelease:\r\n        return true;\r\n      case DtsRollupKind.BetaRelease:\r\n        // NOTE: If the release tag is \"None\", then we don't have enough information to trim it\r\n        return releaseTag === ReleaseTag.Beta || releaseTag === ReleaseTag.Public || releaseTag === ReleaseTag.None;\r\n      case DtsRollupKind.PublicRelease:\r\n        return releaseTag === ReleaseTag.Public || releaseTag === ReleaseTag.None;\r\n    }\r\n\r\n    throw new Error(`DtsRollupKind[dtsKind] is not implemented`);\r\n  }\r\n\r\n  private _getReleaseTagForAstSymbol(astSymbol: AstSymbol): ReleaseTag {\r\n    let releaseTag: ReleaseTag | undefined = this._releaseTagByAstSymbol.get(astSymbol);\r\n    if (releaseTag) {\r\n      return releaseTag;\r\n    }\r\n\r\n    releaseTag = ReleaseTag.None;\r\n\r\n    let current: AstSymbol | undefined = astSymbol;\r\n    while (current) {\r\n      for (const astDeclaration of current.astDeclarations) {\r\n        const declarationReleaseTag: ReleaseTag = this._getReleaseTagForDeclaration(astDeclaration.declaration);\r\n        if (releaseTag !== ReleaseTag.None && declarationReleaseTag !== releaseTag) {\r\n          // this._analyzeWarnings.push('WARNING: Conflicting release tags found for ' + symbol.name);\r\n          break;\r\n        }\r\n\r\n        releaseTag = declarationReleaseTag;\r\n      }\r\n\r\n      if (releaseTag !== ReleaseTag.None) {\r\n        break;\r\n      }\r\n\r\n      current = current.parentAstSymbol;\r\n    }\r\n\r\n    if (releaseTag === ReleaseTag.None) {\r\n      releaseTag = ReleaseTag.Public; // public by default\r\n    }\r\n\r\n    this._releaseTagByAstSymbol.set(astSymbol, releaseTag);\r\n\r\n    return releaseTag;\r\n  }\r\n\r\n  // NOTE: THIS IS A TEMPORARY WORKAROUND.\r\n  // In the near future we will overhaul the AEDoc parser to separate syntactic/semantic analysis,\r\n  // at which point this will be wired up to the same ApiDocumentation layer used for the API Review files\r\n  private _getReleaseTagForDeclaration(declaration: ts.Node): ReleaseTag {\r\n    let releaseTag: ReleaseTag = ReleaseTag.None;\r\n\r\n    // We don't want to match \"bill@example.com\".  But we do want to match \"/**@public*/\".\r\n    // So for now we require whitespace or a star before/after the string.\r\n    const releaseTagRegExp: RegExp = /(?:\\s|\\*)@(internal|alpha|beta|public)(?:\\s|\\*)/g;\r\n\r\n    const sourceFileText: string = declaration.getSourceFile().text;\r\n\r\n    for (const commentRange of TypeScriptHelpers.getJSDocCommentRanges(declaration, sourceFileText) || []) {\r\n      // NOTE: This string includes \"/**\"\r\n      const comment: string = sourceFileText.substring(commentRange.pos, commentRange.end);\r\n\r\n      let match: RegExpMatchArray | null;\r\n      while (match = releaseTagRegExp.exec(comment)) {\r\n        let foundReleaseTag: ReleaseTag = ReleaseTag.None;\r\n        switch (match[1]) {\r\n          case 'internal':\r\n            foundReleaseTag = ReleaseTag.Internal; break;\r\n          case 'alpha':\r\n            foundReleaseTag = ReleaseTag.Alpha; break;\r\n          case 'beta':\r\n            foundReleaseTag = ReleaseTag.Beta; break;\r\n          case 'public':\r\n            foundReleaseTag = ReleaseTag.Public; break;\r\n        }\r\n\r\n        if (releaseTag !== ReleaseTag.None && foundReleaseTag !== releaseTag) {\r\n          // this._analyzeWarnings.push('WARNING: Conflicting release tags found for ' + symbol.name);\r\n          return releaseTag;\r\n        }\r\n\r\n        releaseTag = foundReleaseTag;\r\n      }\r\n    }\r\n\r\n    return releaseTag;\r\n  }\r\n\r\n  private _collectTypeDefinitionReferences(astSymbol: AstSymbol): void {\r\n    // Are we emitting declarations?\r\n    if (astSymbol.astImport) {\r\n      return; // no, it's an import\r\n    }\r\n\r\n    const seenFilenames: Set<string> = new Set<string>();\r\n\r\n    for (const astDeclaration of astSymbol.astDeclarations) {\r\n      const sourceFile: ts.SourceFile = astDeclaration.declaration.getSourceFile();\r\n      if (sourceFile && sourceFile.fileName) {\r\n        if (!seenFilenames.has(sourceFile.fileName)) {\r\n          seenFilenames.add(sourceFile.fileName);\r\n\r\n          for (const typeReferenceDirective of sourceFile.typeReferenceDirectives) {\r\n            const name: string = sourceFile.text.substring(typeReferenceDirective.pos, typeReferenceDirective.end);\r\n            if (this._dtsTypeDefinitionReferences.indexOf(name) < 0) {\r\n              this._dtsTypeDefinitionReferences.push(name);\r\n            }\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}