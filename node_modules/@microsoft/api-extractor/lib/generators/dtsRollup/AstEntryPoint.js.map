{"version":3,"sources":["generators/dtsRollup/AstEntryPoint.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAgB3D;;;;GAIG;AACH;IAGE,YAAmB,UAAoC;QACrD,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC,eAAe,CAAC;IACpD,CAAC;CACF;AAND,sCAMC","file":"AstEntryPoint.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { AstSymbol } from './AstSymbol';\r\n\r\n/**\r\n * Constructor parameters for AstEntryPoint\r\n */\r\nexport interface IExportedMember {\r\n  readonly name: string;\r\n  readonly astSymbol: AstSymbol;\r\n}\r\n\r\nexport interface IAstEntryPointParameters {\r\n  readonly exportedMembers: ReadonlyArray<IExportedMember>;\r\n}\r\n\r\n/**\r\n * This class is used by AstSymbolTable to return an entry point.\r\n * (If AstDeclaration could be used to represent a ts.SyntaxKind.SourceFile node,\r\n * then this class would not be needed.)\r\n */\r\nexport class AstEntryPoint {\r\n  public readonly exportedMembers: ReadonlyArray<IExportedMember>;\r\n\r\n  public constructor(parameters: IAstEntryPointParameters) {\r\n    this.exportedMembers = parameters.exportedMembers;\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}