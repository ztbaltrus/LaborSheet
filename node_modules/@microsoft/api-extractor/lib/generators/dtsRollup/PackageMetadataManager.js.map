{"version":3,"sources":["generators/dtsRollup/PackageMetadataManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAO3D;;;GAGG;AACH;IAkBE,YAAmB,eAAuB,EAAE,iBAAoC;QAC9E,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;QAC5C,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QAEvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;QAE5E,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC;oBACjE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAC7B,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAlCD,0CAkCC;AAED;;;GAGG;AACH;IAKE,YAAmB,iBAAoC;QAHtC,sCAAiC,GAC9C,IAAI,GAAG,EAA2B,CAAC;QAGrC,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACI,uBAAuB,CAAC,cAAsB;QACnD,MAAM,mBAAmB,GACrB,IAAI,CAAC,kBAAkB,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;QACzE,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,SAAS,CAAC;QACnB,CAAC;QACD,IAAI,eAAe,GACf,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;QACpE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACrB,eAAe,GAAG,IAAI,eAAe,CAAC,mBAAmB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;YACpF,IAAI,CAAC,iCAAiC,CAAC,GAAG,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC;QACnF,CAAC;QACD,MAAM,CAAC,eAAe,CAAC;IACzB,CAAC;IAED;;;OAGG;IACI,mBAAmB,CAAC,cAAsB;QAC/C,MAAM,eAAe,GAAgC,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;QAClG,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACrB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC;IACxC,CAAC;CACF;AAxCD,wDAwCC","file":"PackageMetadataManager.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport {\r\n  PackageJsonLookup,\r\n  IPackageJson\r\n} from '@microsoft/node-core-library';\r\n\r\n/**\r\n * Represents analyzed information for a package.json file.\r\n * This object is constructed and returned by PackageMetadataManager.\r\n */\r\nexport class PackageMetadata {\r\n  /**\r\n   * The absolute path to the package.json file being analyzed.\r\n   */\r\n  public readonly packageJsonPath: string;\r\n  /**\r\n   * The parsed contents of package.json.  Note that PackageJsonLookup\r\n   * only includes essential fields.\r\n   */\r\n  public readonly packageJson: IPackageJson;\r\n  /**\r\n   * If true, then the package's documentation comments can be assumed\r\n   * to contain API Extractor compatible TSDoc tags.\r\n   */\r\n  public readonly aedocSupported: boolean;\r\n\r\n  private readonly _packageJsonLookup: PackageJsonLookup;\r\n\r\n  public constructor(packageJsonPath: string, packageJsonLookup: PackageJsonLookup) {\r\n    this._packageJsonLookup = packageJsonLookup;\r\n    this.packageJsonPath = packageJsonPath;\r\n\r\n    this.packageJson = this._packageJsonLookup.loadPackageJson(packageJsonPath);\r\n\r\n    this.aedocSupported = false;\r\n\r\n    if (this.packageJson.tsdoc) {\r\n      if (this.packageJson.tsdoc.tsdocFlavor) {\r\n        if (this.packageJson.tsdoc.tsdocFlavor.toUpperCase() === 'AEDOC') {\r\n          this.aedocSupported = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * This class maintains a cache of analyzed information obtained from package.json\r\n * files.  It is built on top of the PackageJsonLookup class.\r\n */\r\nexport class PackageMetadataManager {\r\n  private readonly _packageJsonLookup: PackageJsonLookup;\r\n  private readonly _packageMetadataByPackageJsonPath: Map<string, PackageMetadata>\r\n    = new Map<string, PackageMetadata>();\r\n\r\n  public constructor(packageJsonLookup: PackageJsonLookup) {\r\n    this._packageJsonLookup = packageJsonLookup;\r\n  }\r\n\r\n  /**\r\n   * Finds the package.json in a parent folder of the specified source file, and\r\n   * returns a PackageMetadata object.  If no package.json was found, then undefined\r\n   * is returned.  The results are cached.\r\n   */\r\n  public tryFetchPackageMetadata(sourceFilePath: string): PackageMetadata | undefined {\r\n    const packageJsonFilePath: string | undefined\r\n      = this._packageJsonLookup.tryGetPackageJsonFilePathFor(sourceFilePath);\r\n    if (!packageJsonFilePath) {\r\n      return undefined;\r\n    }\r\n    let packageMetadata: PackageMetadata | undefined\r\n      = this._packageMetadataByPackageJsonPath.get(packageJsonFilePath);\r\n    if (!packageMetadata) {\r\n      packageMetadata = new PackageMetadata(packageJsonFilePath, this._packageJsonLookup);\r\n      this._packageMetadataByPackageJsonPath.set(packageJsonFilePath, packageMetadata);\r\n    }\r\n    return packageMetadata;\r\n  }\r\n\r\n  /**\r\n   * Returns true if the source file has an associated PackageMetadata object\r\n   * with aedocSupported=true.\r\n   */\r\n  public isAedocSupportedFor(sourceFilePath: string): boolean {\r\n    const packageMetadata: PackageMetadata | undefined = this.tryFetchPackageMetadata(sourceFilePath);\r\n    if (!packageMetadata) {\r\n      return false;\r\n    }\r\n    return packageMetadata.aedocSupported;\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}