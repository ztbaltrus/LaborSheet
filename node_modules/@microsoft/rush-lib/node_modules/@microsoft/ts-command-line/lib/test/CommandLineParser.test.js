"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const CommandLineAction_1 = require("../CommandLineAction");
const CommandLineParser_1 = require("../CommandLineParser");
class TestAction extends CommandLineAction_1.CommandLineAction {
    constructor() {
        super({
            actionName: 'do-job',
            summary: 'does the job',
            documentation: 'a longer description'
        });
        this.done = false;
    }
    onExecute() {
        expect(this._flag.value).toEqual(true);
        this.done = true;
        return Promise.resolve();
    }
    onDefineParameters() {
        this._flag = this.defineFlagParameter({
            parameterLongName: '--flag',
            description: 'The flag'
        });
    }
}
class TestCommandLine extends CommandLineParser_1.CommandLineParser {
    constructor() {
        super({
            toolFilename: 'example',
            toolDescription: 'An example project'
        });
        this.addAction(new TestAction());
    }
    onDefineParameters() {
        // no parameters
    }
}
describe('CommandLineParser', () => {
    it('executes an action', () => {
        const commandLineParser = new TestCommandLine();
        return commandLineParser.execute(['do-job', '--flag']).then(() => {
            expect(commandLineParser.selectedAction).toBeDefined();
            expect(commandLineParser.selectedAction.actionName).toEqual('do-job');
            const action = commandLineParser.selectedAction;
            expect(action.done).toBe(true);
        });
    });
});

//# sourceMappingURL=CommandLineParser.test.js.map
