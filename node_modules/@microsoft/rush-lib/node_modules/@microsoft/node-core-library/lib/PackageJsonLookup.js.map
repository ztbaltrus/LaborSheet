{"version":3,"sources":["PackageJsonLookup.ts"],"names":[],"mappings":"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","file":"PackageJsonLookup.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/* tslint:disable:no-constant-condition */\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport { JsonFile } from './JsonFile';\r\nimport { IPackageJson } from './IPackageJson';\r\nimport { FileConstants } from './Constants';\r\n\r\n/**\r\n * Constructor parameters for {@link PackageJsonLookup}\r\n *\r\n * @public\r\n */\r\nexport interface IPackageJsonLookupParameters {\r\n  /**\r\n   * Certain package.json fields such as \"contributors\" can be very large, and may\r\n   * significantly increase the memory footprint for the PackageJsonLookup cache.\r\n   * By default, PackageJsonLookup only loads a subset of standard commonly used\r\n   * fields names.  Set loadExtraFields=true to always return all fields.\r\n   */\r\n  loadExtraFields?: boolean;\r\n}\r\n\r\n/**\r\n * This class provides methods for finding the nearest \"package.json\" for a folder\r\n * and retrieving the name of the package.  The results are cached.\r\n *\r\n * @public\r\n */\r\nexport class PackageJsonLookup {\r\n  private _loadExtraFields: boolean = false;\r\n\r\n  // Cached the return values for tryGetPackageFolder():\r\n  // sourceFilePath --> packageJsonFolder\r\n  private _packageFolderCache: Map<string, string | undefined>;\r\n\r\n  // Cached the return values for getPackageName():\r\n  // packageJsonPath --> packageName\r\n  private _packageJsonCache: Map<string, IPackageJson>;\r\n\r\n  constructor(parameters?: IPackageJsonLookupParameters) {\r\n    if (parameters) {\r\n      if (parameters.loadExtraFields) {\r\n        this._loadExtraFields = parameters.loadExtraFields;\r\n      }\r\n    }\r\n    this.clearCache();\r\n  }\r\n\r\n  /**\r\n   * Clears the internal file cache.\r\n   * @remarks\r\n   * Call this method if changes have been made to the package.json files on disk.\r\n   */\r\n  public clearCache(): void {\r\n    this._packageFolderCache = new Map<string, string | undefined>();\r\n    this._packageJsonCache = new Map<string, IPackageJson>();\r\n  }\r\n\r\n  /**\r\n   * Returns the absolute path of a folder containing a package.json file, by looking\r\n   * upwards from the specified fileOrFolderPath.  If no package.json can be found,\r\n   * undefined is returned.\r\n   *\r\n   * @remarks\r\n   * The fileOrFolderPath is not required to actually exist on disk.\r\n   * The fileOrFolderPath itself can be the return value, if it is a folder containing\r\n   * a package.json file.\r\n   * Both positive and negative lookup results are cached.\r\n   *\r\n   * @param fileOrFolderPath - a relative or absolute path to a source file or folder\r\n   * that may be part of a package\r\n   * @returns an absolute path to a folder containing a package.json file\r\n   */\r\n  public tryGetPackageFolderFor(fileOrFolderPath: string): string | undefined {\r\n    // Convert it to an absolute path\r\n    const resolvedFileOrFolderPath: string = path.resolve(fileOrFolderPath);\r\n\r\n    // Optimistically hope that the starting string is already in the cache,\r\n    // in which case we can avoid disk access entirely.\r\n    //\r\n    // (Two lookups are required, because get() cannot distinguish the undefined value\r\n    // versus a missing key.)\r\n    if (this._packageFolderCache.has(resolvedFileOrFolderPath)) {\r\n      return this._packageFolderCache.get(resolvedFileOrFolderPath);\r\n    }\r\n\r\n    // Now call the recursive part of the algorithm\r\n    return this._tryGetPackageFolderFor(resolvedFileOrFolderPath);\r\n  }\r\n\r\n  /**\r\n   * If the specified file or folder is part of a package, this returns the absolute path\r\n   * to the associated package.json file.\r\n   *\r\n   * @remarks\r\n   * The package folder is determined using the same algorithm\r\n   * as {@link PackageJsonLookup.tryGetPackageFolderFor}.\r\n   *\r\n   * @param fileOrFolderPath - a relative or absolute path to a source file or folder\r\n   * that may be part of a package\r\n   * @returns an absolute path to * package.json file\r\n   */\r\n  public tryGetPackageJsonFilePathFor(fileOrFolderPath: string): string | undefined {\r\n    const packageJsonFolder: string | undefined = this.tryGetPackageFolderFor(fileOrFolderPath);\r\n    if (!packageJsonFolder) {\r\n      return undefined;\r\n    }\r\n    return path.join(packageJsonFolder, FileConstants.PackageJson);\r\n  }\r\n\r\n  /**\r\n   * If the specified file or folder is part of a package, this loads and returns the\r\n   * associated package.json file.\r\n   *\r\n   * @remarks\r\n   * The package folder is determined using the same algorithm\r\n   * as {@link PackageJsonLookup.tryGetPackageFolderFor}.\r\n   *\r\n   * @param fileOrFolderPath - a relative or absolute path to a source file or folder\r\n   * that may be part of a package\r\n   * @returns an IPackageJson object, or undefined if the fileOrFolderPath does not\r\n   * belong to a package\r\n   */\r\n  public tryLoadPackageJsonFor(fileOrFolderPath: string): IPackageJson | undefined {\r\n    const packageJsonFilePath: string | undefined = this.tryGetPackageJsonFilePathFor(fileOrFolderPath);\r\n    if (!packageJsonFilePath) {\r\n      return undefined;\r\n    }\r\n    return this.loadPackageJson(packageJsonFilePath);\r\n  }\r\n\r\n  /**\r\n   * Loads the specified package.json file, if it is not already present in the cache.\r\n   *\r\n   * @remarks\r\n   * Unless {@link IPackageJsonLookupParameters.loadExtraFields} was specified,\r\n   * the returned IPackageJson object will contain a subset of essential fields.\r\n   * The returned object should be considered to be immutable; the caller must never\r\n   * modify it.\r\n   *\r\n   * @param jsonFilename - a relative or absolute path to a package.json file\r\n   */\r\n  public loadPackageJson(jsonFilename: string): IPackageJson {\r\n    if (!fsx.existsSync(jsonFilename)) {\r\n      throw new Error(`Input file not found: ${jsonFilename}`);\r\n    }\r\n\r\n    // Since this will be a cache key, follow any symlinks and get an absolute path\r\n    // to minimize duplication.  (Note that duplication can still occur due to e.g. character case.)\r\n    const normalizedFilePath: string = fsx.realpathSync(jsonFilename);\r\n\r\n    let packageJson: IPackageJson | undefined = this._packageJsonCache.get(normalizedFilePath);\r\n\r\n    if (!packageJson) {\r\n      const loadedPackageJson: IPackageJson = JsonFile.load(normalizedFilePath) as IPackageJson;\r\n\r\n      // Make sure this is really a package.json file.  CommonJS has fairly strict requirements,\r\n      // but NPM only requires \"name\" and \"version\"\r\n      if (!loadedPackageJson.name) {\r\n        throw new Error(`Error reading \"${jsonFilename}\":\\n  `\r\n          + 'The required field \"name\" was not found');\r\n      }\r\n      if (!loadedPackageJson.version) {\r\n        throw new Error(`Error reading \"${jsonFilename}\":\\n  `\r\n          + 'The required field \"version\" was not found');\r\n      }\r\n\r\n      if (this._loadExtraFields) {\r\n        packageJson = loadedPackageJson;\r\n      } else {\r\n        packageJson = { } as IPackageJson;\r\n\r\n        // Unless \"loadExtraFields\" was requested, copy over the essential fields only\r\n        packageJson.bin = loadedPackageJson.bin;\r\n        packageJson.dependencies = loadedPackageJson.dependencies;\r\n        packageJson.description = loadedPackageJson.description;\r\n        packageJson.devDependencies = loadedPackageJson.devDependencies;\r\n        packageJson.homepage = loadedPackageJson.homepage;\r\n        packageJson.license = loadedPackageJson.license;\r\n        packageJson.main = loadedPackageJson.main;\r\n        packageJson.name = loadedPackageJson.name;\r\n        packageJson.optionalDependencies = loadedPackageJson.optionalDependencies;\r\n        packageJson.peerDependencies = loadedPackageJson.peerDependencies;\r\n        packageJson.private = loadedPackageJson.private;\r\n        packageJson.scripts = loadedPackageJson.scripts;\r\n        packageJson.typings = loadedPackageJson.typings;\r\n        packageJson.tsdoc = loadedPackageJson.tsdoc;\r\n        packageJson.version = loadedPackageJson.version;\r\n      }\r\n\r\n      Object.freeze(packageJson);\r\n      this._packageJsonCache.set(normalizedFilePath, packageJson);\r\n    }\r\n\r\n    return packageJson;\r\n  }\r\n\r\n  // Recursive part of the algorithm from tryGetPackageFolderFor()\r\n  private _tryGetPackageFolderFor(resolvedFileOrFolderPath: string): string | undefined {\r\n    // Two lookups are required, because get() cannot distinguish the undefined value\r\n    // versus a missing key.\r\n    if (this._packageFolderCache.has(resolvedFileOrFolderPath)) {\r\n      return this._packageFolderCache.get(resolvedFileOrFolderPath);\r\n    }\r\n\r\n    // Is resolvedFileOrFolderPath itself a folder with a package.json file?  If so, return it.\r\n    if (fsx.existsSync(path.join(resolvedFileOrFolderPath, FileConstants.PackageJson))) {\r\n      this._packageFolderCache.set(resolvedFileOrFolderPath, resolvedFileOrFolderPath);\r\n      return resolvedFileOrFolderPath;\r\n    }\r\n\r\n    // Otherwise go up one level\r\n    const parentFolder: string | undefined = path.dirname(resolvedFileOrFolderPath);\r\n    if (!parentFolder || parentFolder === resolvedFileOrFolderPath) {\r\n      // We reached the root directory without finding a package.json file,\r\n      // so cache the negative result\r\n      this._packageFolderCache.set(resolvedFileOrFolderPath, undefined);\r\n      return undefined;  // no match\r\n    }\r\n\r\n    // Recurse upwards, caching every step along the way\r\n    const parentResult: string | undefined = this._tryGetPackageFolderFor(parentFolder);\r\n    // Cache the parent's answer as well\r\n    this._packageFolderCache.set(resolvedFileOrFolderPath, parentResult);\r\n\r\n    return parentResult;\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}