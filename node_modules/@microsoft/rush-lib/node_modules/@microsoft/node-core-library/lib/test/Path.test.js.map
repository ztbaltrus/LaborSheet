{"version":3,"sources":["test/Path.test.ts"],"names":[],"mappings":"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","file":"Path.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types='mocha' />\r\n\r\nimport * as os from 'os';\r\nimport { Path } from '../Path';\r\nimport { assert } from 'chai';\r\n\r\ndescribe('Path', () => {\r\n  describe('Test', () => {\r\n\r\n    if (os.platform() === 'win32') {\r\n      it('Windows paths', () => {\r\n        assert.isTrue(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\a'), '1');\r\n        assert.isTrue(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\a\\\\'), '2');\r\n        assert.isTrue(Path.isUnder('C:\\\\a\\\\b\\\\c.txt', 'C:\\\\a'), '3');\r\n\r\n        assert.isFalse(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\b'), '4');\r\n        assert.isFalse(Path.isUnder('C:\\\\a\\\\b.txt', 'C:\\\\b\\\\'), '5');\r\n        assert.isFalse(Path.isUnder('C:\\\\a\\\\b\\\\c.txt', 'C:\\\\b'), '6');\r\n\r\n        assert.isFalse(Path.isUnder('C:\\\\a\\\\b.txt', 'D:\\\\a'), '7');\r\n      });\r\n    }\r\n\r\n    it('Unix paths', () => {\r\n      assert.isTrue(Path.isUnder('/a/b.txt', '/a'), '1');\r\n      assert.isTrue(Path.isUnder('/a/b.txt', '/a/'), '2');\r\n      assert.isTrue(Path.isUnder('/a/b/c.txt', '/a'), '3');\r\n\r\n      assert.isFalse(Path.isUnder('/a/b.txt', '/b'), '4');\r\n      assert.isFalse(Path.isUnder('/a/b.txt', '/b/'), '5');\r\n      assert.isFalse(Path.isUnder('/a/b/c.txt', '/b'), '6');\r\n    });\r\n    it('Edge cases', () => {\r\n      assert.isFalse(Path.isUnder('/a', '/a'), '1');\r\n      assert.isFalse(Path.isUnder('.', '.'), '2');\r\n      assert.isFalse(Path.isUnder('', ''), '3');\r\n    });\r\n    it('Relative paths', () => {\r\n      assert.isTrue(Path.isUnder('a/b/c', 'a/b'), '1');\r\n      assert.isTrue(Path.isUnder('./a/b/c', './a/b'), '2');\r\n      assert.isTrue(Path.isUnder('../a/b/c', '../a/b'), '3');\r\n\r\n      assert.isFalse(Path.isUnder('a/b', 'a/b/c'), '4');\r\n      assert.isFalse(Path.isUnder('./a/b', './a/b/c'), '5');\r\n      assert.isFalse(Path.isUnder('../a/b', '../a/b/c'), '6');\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"../../../src"}