"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types='mocha' />
const os = require("os");
const Path_1 = require("../Path");
const chai_1 = require("chai");
describe('Path', () => {
    describe('Test', () => {
        if (os.platform() === 'win32') {
            it('Windows paths', () => {
                chai_1.assert.isTrue(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\a'), '1');
                chai_1.assert.isTrue(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\a\\'), '2');
                chai_1.assert.isTrue(Path_1.Path.isUnder('C:\\a\\b\\c.txt', 'C:\\a'), '3');
                chai_1.assert.isFalse(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\b'), '4');
                chai_1.assert.isFalse(Path_1.Path.isUnder('C:\\a\\b.txt', 'C:\\b\\'), '5');
                chai_1.assert.isFalse(Path_1.Path.isUnder('C:\\a\\b\\c.txt', 'C:\\b'), '6');
                chai_1.assert.isFalse(Path_1.Path.isUnder('C:\\a\\b.txt', 'D:\\a'), '7');
            });
        }
        it('Unix paths', () => {
            chai_1.assert.isTrue(Path_1.Path.isUnder('/a/b.txt', '/a'), '1');
            chai_1.assert.isTrue(Path_1.Path.isUnder('/a/b.txt', '/a/'), '2');
            chai_1.assert.isTrue(Path_1.Path.isUnder('/a/b/c.txt', '/a'), '3');
            chai_1.assert.isFalse(Path_1.Path.isUnder('/a/b.txt', '/b'), '4');
            chai_1.assert.isFalse(Path_1.Path.isUnder('/a/b.txt', '/b/'), '5');
            chai_1.assert.isFalse(Path_1.Path.isUnder('/a/b/c.txt', '/b'), '6');
        });
        it('Edge cases', () => {
            chai_1.assert.isFalse(Path_1.Path.isUnder('/a', '/a'), '1');
            chai_1.assert.isFalse(Path_1.Path.isUnder('.', '.'), '2');
            chai_1.assert.isFalse(Path_1.Path.isUnder('', ''), '3');
        });
        it('Relative paths', () => {
            chai_1.assert.isTrue(Path_1.Path.isUnder('a/b/c', 'a/b'), '1');
            chai_1.assert.isTrue(Path_1.Path.isUnder('./a/b/c', './a/b'), '2');
            chai_1.assert.isTrue(Path_1.Path.isUnder('../a/b/c', '../a/b'), '3');
            chai_1.assert.isFalse(Path_1.Path.isUnder('a/b', 'a/b/c'), '4');
            chai_1.assert.isFalse(Path_1.Path.isUnder('./a/b', './a/b/c'), '5');
            chai_1.assert.isFalse(Path_1.Path.isUnder('../a/b', '../a/b/c'), '6');
        });
    });
});

//# sourceMappingURL=Path.test.js.map
