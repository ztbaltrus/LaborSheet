{"version":3,"sources":["test/PackageJsonLookup.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,+BAA+B;AAC/B,uFAAuF;AAEvF,+BAA8B;AAC9B,6BAA6B;AAC7B,4DAAyD;AAGzD,QAAQ,CAAC,mBAAmB,EAAE;IAE5B,QAAQ,CAAC,aAAa,EAAE;QAEtB,EAAE,CAAC,8BAA8B,EAAE;YACjC,MAAM,iBAAiB,GAAsB,IAAI,qCAAiB,EAAE,CAAC;YACrE,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,6BAA6B,CAAC,CAAC;YACnF,MAAM,WAAW,GAA6B,iBAAiB,CAAC,qBAAqB,CAAC,cAAc,CAAC,CAAC;YACtG,aAAM,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC;YACvB,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBAChB,aAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;gBAClD,aAAM,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAE3C,gFAAgF;gBAChF,6CAA6C;gBAC7C,aAAM,CAAC,KAAK,CAAC,WAAW,CAAC,kBAAkB,CAAC,CAAC,CAAC;YAChD,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE;YAClC,MAAM,iBAAiB,GAAsB,IAAI,qCAAiB,EAAE,CAAC;YACrE,MAAM,cAAc,GAAW,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,iDAAiD,CAAC,CAAC;YAEvG,mFAAmF;YACnF,MAAM,WAAW,GAAuB,iBAAiB,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;YACjG,aAAM,CAAC,MAAM,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAC5E,qBAAqB,GAAG,WAAW,CAAC,CAAC;YAEvC,MAAM,SAAS,GAAuB,iBAAiB,CAAC,4BAA4B,CAAC,cAAc,CAAC,CAAC;YAErG,aAAM,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,EAAE,cAAc,CAAC,CAAC,CAAC;QACxE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","file":"PackageJsonLookup.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types=\"mocha\" />\r\n/* tslint:disable:no-function-expression - Mocha uses a poorly scoped \"this\" pointer */\r\n\r\nimport { assert } from 'chai';\r\nimport * as path from 'path';\r\nimport { PackageJsonLookup } from '../PackageJsonLookup';\r\nimport { IPackageJson } from '../IPackageJson';\r\n\r\ndescribe('PackageJsonLookup', function (): void {\r\n\r\n  describe('basic tests', function (): void {\r\n\r\n    it('tryLoadPackageJsonFor() test', function (): void {\r\n      const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n      const sourceFilePath: string = path.join(__dirname, './test-data/example-package');\r\n      const packageJson: IPackageJson | undefined = packageJsonLookup.tryLoadPackageJsonFor(sourceFilePath);\r\n      assert.ok(packageJson);\r\n      if (packageJson) {\r\n        assert.equal(packageJson.name, 'example-package');\r\n        assert.equal(packageJson.version, '1.0.0');\r\n\r\n        // The \"nonstandardField\" should have been trimmed because loadExtraFields=false\r\n        // tslint:disable-next-line:no-string-literal\r\n        assert.notOk(packageJson['nonstandardField']);\r\n      }\r\n    });\r\n\r\n    it('tryGetPackageFolderFor() test', function (): void {\r\n      const packageJsonLookup: PackageJsonLookup = new PackageJsonLookup();\r\n      const sourceFilePath: string = path.join(__dirname, './test-data/example-package/src/ExampleFile.txt');\r\n\r\n      // Example: C:\\web-build-tools\\libraries\\node-core-library\\src\\test\\example-package\r\n      const foundFolder: string | undefined = packageJsonLookup.tryGetPackageFolderFor(sourceFilePath);\r\n      assert.isTrue(foundFolder && foundFolder.search(/[\\\\/]example-package$/i) >= 0,\r\n        'Unexpected result: ' + foundFolder);\r\n\r\n      const foundFile: string | undefined = packageJsonLookup.tryGetPackageJsonFilePathFor(sourceFilePath);\r\n\r\n      assert.equal(foundFile, path.join(foundFolder || '', 'package.json'));\r\n    });\r\n  });\r\n});\r\n"],"sourceRoot":"../../../src"}