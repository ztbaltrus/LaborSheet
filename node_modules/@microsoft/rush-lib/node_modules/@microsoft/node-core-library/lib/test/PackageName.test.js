"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
/// <reference types='mocha' />
const PackageName_1 = require("../PackageName");
const chai_1 = require("chai");
describe('PackageName', () => {
    describe('Test', () => {
        it('isValidName() positive test', () => {
            chai_1.assert.isTrue(PackageName_1.PackageName.isValidName('@microsoft/node-core-library'));
        });
        it('isValidName() negative test', () => {
            chai_1.assert.isFalse(PackageName_1.PackageName.isValidName('@microsoft/node-core-library/path'));
        });
        it('tryParse() tests', () => {
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse('@microsoft/node-core-library'), {
                scope: '@microsoft',
                unscopedName: 'node-core-library',
                error: ''
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse(''), {
                scope: '',
                unscopedName: '',
                error: 'The package name must not be empty'
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse(undefined), // tslint:disable-line:no-any
            {
                scope: '',
                unscopedName: '',
                error: 'The package name must not be null or undefined'
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse('@microsoft'), {
                scope: '@microsoft',
                unscopedName: '',
                error: 'Error parsing "@microsoft": The scope must be followed by a slash'
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse('@/node-core-library'), {
                scope: '@',
                unscopedName: 'node-core-library',
                error: 'Error parsing "@/node-core-library": The scope name cannot be empty'
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse('@Microsoft/node-core-library'), {
                scope: '@Microsoft',
                unscopedName: 'node-core-library',
                error: 'The package scope "@Microsoft" must not contain upper case characters'
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse('@micro!soft/node-core-library'), {
                scope: '@micro!soft',
                unscopedName: 'node-core-library',
                error: 'The package name "@micro!soft/node-core-library" contains an invalid character: \"!\"'
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse('@microsoft/node-co~re-library'), {
                scope: '@microsoft',
                unscopedName: 'node-co~re-library',
                error: 'The package name "@microsoft/node-co~re-library" contains an invalid character: \"~\"'
            });
            chai_1.assert.deepEqual(PackageName_1.PackageName.tryParse('@microsoft/node-core-library/path'), {
                scope: '@microsoft',
                unscopedName: 'node-core-library/path',
                error: 'The package name "@microsoft/node-core-library/path" contains an invalid character: \"/\"'
            });
        });
    });
    it('parse() test', () => {
        chai_1.assert.throws(() => { PackageName_1.PackageName.parse('@'); }, 'The scope must be followed by a slash');
    });
    it('combineParts() tests', () => {
        chai_1.assert.equal(PackageName_1.PackageName.combineParts('@microsoft', 'node-core-library'), '@microsoft/node-core-library');
        chai_1.assert.equal(PackageName_1.PackageName.combineParts('', 'node-core-library'), 'node-core-library');
    });
    it('combineParts() errors', () => {
        chai_1.assert.throws(() => { PackageName_1.PackageName.combineParts('', '@microsoft/node-core-library'); }, 'The unscopedName cannot start with an "@" character');
        chai_1.assert.throws(() => { PackageName_1.PackageName.combineParts('@micr!osoft', 'node-core-library'); }, 'The package name "@micr!osoft/node-core-library" contains an invalid character: "!"');
        chai_1.assert.throws(() => { PackageName_1.PackageName.combineParts('', ''); }, 'The package name must not be empty');
    });
});

//# sourceMappingURL=PackageName.test.js.map
