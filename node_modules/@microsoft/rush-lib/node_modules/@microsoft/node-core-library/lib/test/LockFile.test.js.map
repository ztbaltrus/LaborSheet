{"version":3,"sources":["test/LockFile.test.ts"],"names":[],"mappings":"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","file":"LockFile.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\n/// <reference types='mocha' />\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport { assert } from 'chai';\r\nimport * as path from 'path';\r\nimport { LockFile, getProcessStartTime } from '../LockFile';\r\n\r\nfunction setLockFileGetProcessStartTime(fn: (process: number) => string | undefined): void {\r\n  // tslint:disable-next-line:no-any\r\n  (LockFile as any)._getStartTime = fn;\r\n}\r\n\r\ndescribe('LockFile', () => {\r\n  afterEach(() => {\r\n    setLockFileGetProcessStartTime(getProcessStartTime);\r\n  });\r\n\r\n  describe('getLockFilePath', () => {\r\n    it('only acceps alphabetical characters for resource name', () => {\r\n      assert.doesNotThrow(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo123');\r\n      });\r\n      assert.doesNotThrow(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'bar.123');\r\n      });\r\n      assert.doesNotThrow(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo.bar');\r\n      });\r\n      assert.doesNotThrow(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'lock-file.123');\r\n      });\r\n      assert.throws(() => {\r\n        LockFile.getLockFilePath(process.cwd(), '.foo123');\r\n      });\r\n      assert.throws(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo123.');\r\n      });\r\n      assert.throws(() => {\r\n        LockFile.getLockFilePath(process.cwd(), '-foo123');\r\n      });\r\n      assert.throws(() => {\r\n        LockFile.getLockFilePath(process.cwd(), 'foo123-');\r\n      });\r\n      assert.throws(() => {\r\n        LockFile.getLockFilePath(process.cwd(), '');\r\n      });\r\n    });\r\n  });\r\n\r\n  if (process.platform === 'darwin' || process.platform === 'linux') {\r\n    describe('Linux and Mac', () => {\r\n      describe('getLockFilePath()', () => {\r\n        it('returns a resolved path containing the pid', () => {\r\n          assert.equal(\r\n            path.join(process.cwd(), `test#${process.pid}.lock`),\r\n            LockFile.getLockFilePath('./', 'test')\r\n          );\r\n        });\r\n\r\n        it('allows for overridden pid', () => {\r\n          assert.equal(\r\n            path.join(process.cwd(), `test#99.lock`),\r\n            LockFile.getLockFilePath('./', 'test', 99)\r\n          );\r\n        });\r\n      });\r\n\r\n      it('can acquire and close a clean lockfile', () => {\r\n        // ensure test folder is clean\r\n        const testFolder: string = path.join(__dirname, '1');\r\n        fsx.emptyDirSync(testFolder);\r\n\r\n        const resourceName: string = 'test';\r\n        const pidLockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n        const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n        // The lockfile should exist and be in a clean state\r\n        assert.isDefined(lock);\r\n        assert.isFalse(lock!.dirtyWhenAcquired);\r\n        assert.isFalse(lock!.isReleased);\r\n        assert.isTrue(fsx.existsSync(pidLockFileName));\r\n\r\n        // Ensure that we can release the \"clean\" lockfile\r\n        lock!.release();\r\n        assert.isFalse(fsx.existsSync(pidLockFileName));\r\n        assert.isTrue(lock!.isReleased);\r\n\r\n        // Ensure we cannot release the lockfile twice\r\n        assert.throws(() => {\r\n          lock!.release();\r\n        });\r\n      });\r\n\r\n      it('cannot acquire a lock if another valid lock exists', () => {\r\n        // ensure test folder is clean\r\n        const testFolder: string = path.join(__dirname, '2');\r\n        fsx.emptyDirSync(testFolder);\r\n\r\n        const otherPid: number = 999999999;\r\n        const otherPidStartTime: string = '2012-01-02 12:53:12';\r\n\r\n        const resourceName: string = 'test';\r\n\r\n        const otherPidLockFileName: string = LockFile.getLockFilePath(testFolder, resourceName, otherPid);\r\n\r\n        setLockFileGetProcessStartTime((pid: number) => {\r\n          return pid === process.pid ? getProcessStartTime(process.pid) : otherPidStartTime;\r\n        });\r\n\r\n        // create an open lockfile\r\n        const lockFileDescriptor: number = fsx.openSync(otherPidLockFileName, 'w');\r\n        fsx.writeSync(lockFileDescriptor, otherPidStartTime);\r\n        fsx.closeSync(lockFileDescriptor);\r\n        fsx.utimesSync(otherPidLockFileName, 10000, 10000);\r\n\r\n        const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n        // this lock should be undefined since there is an existing lock\r\n        assert.isUndefined(lock);\r\n      });\r\n    });\r\n  }\r\n\r\n  if (process.platform === 'win32') {\r\n    describe('getLockFilePath()', () => {\r\n      it('returns a resolved path that doesn\\'t contain', () => {\r\n        assert.equal(\r\n          path.join(process.cwd(), `test.lock`),\r\n          LockFile.getLockFilePath('./', 'test')\r\n        );\r\n      });\r\n\r\n      it('ignores pid that is passed in', () => {\r\n        assert.equal(\r\n          path.join(process.cwd(), `test.lock`),\r\n          LockFile.getLockFilePath('./', 'test', 99)\r\n        );\r\n      });\r\n    });\r\n\r\n    it('will not acquire if existing lock is there', () => {\r\n      // ensure test folder is clean\r\n      const testFolder: string = path.join(__dirname, '1');\r\n      fsx.removeSync(testFolder);\r\n      fsx.mkdirsSync(testFolder);\r\n\r\n      // create an open lockfile\r\n      const resourceName: string = 'test';\r\n      const lockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n      const lockFileDescriptor: number = fsx.openSync(lockFileName, 'wx');\r\n\r\n      const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n      // this lock should be undefined since there is an existing lock\r\n      assert.isUndefined(lock);\r\n      fsx.closeSync(lockFileDescriptor);\r\n    });\r\n\r\n    it('can acquire and close a dirty lockfile', () => {\r\n      // ensure test folder is clean\r\n      const testFolder: string = path.join(__dirname, '1');\r\n      fsx.removeSync(testFolder);\r\n      fsx.mkdirsSync(testFolder);\r\n\r\n      // Create a lockfile that is still hanging around on disk,\r\n      const resourceName: string = 'test';\r\n      const lockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n      fsx.closeSync(fsx.openSync(lockFileName, 'wx'));\r\n\r\n      const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n      assert.isDefined(lock);\r\n      assert.isTrue(lock!.dirtyWhenAcquired);\r\n      assert.isFalse(lock!.isReleased);\r\n      assert.isTrue(fsx.existsSync(lockFileName));\r\n\r\n      // Ensure that we can release the \"dirty\" lockfile\r\n      lock!.release();\r\n      assert.isFalse(fsx.existsSync(lockFileName));\r\n      assert.isTrue(lock!.isReleased);\r\n    });\r\n\r\n    it('can acquire and close a clean lockfile', () => {\r\n      // ensure test folder is clean\r\n      const testFolder: string = path.join(__dirname, '1');\r\n      fsx.removeSync(testFolder);\r\n      fsx.mkdirsSync(testFolder);\r\n\r\n      const resourceName: string = 'test';\r\n      const lockFileName: string = LockFile.getLockFilePath(testFolder, resourceName);\r\n      const lock: LockFile | undefined = LockFile.tryAcquire(testFolder, resourceName);\r\n\r\n      // The lockfile should exist and be in a clean state\r\n      assert.isDefined(lock);\r\n      assert.isFalse(lock!.dirtyWhenAcquired);\r\n      assert.isFalse(lock!.isReleased);\r\n      assert.isTrue(fsx.existsSync(lockFileName));\r\n\r\n      // Ensure that we can release the \"clean\" lockfile\r\n      lock!.release();\r\n      assert.isFalse(fsx.existsSync(lockFileName));\r\n      assert.isTrue(lock!.isReleased);\r\n\r\n      // Ensure we cannot release the lockfile twice\r\n      assert.throws(() => {\r\n        lock!.release();\r\n      });\r\n    });\r\n  }\r\n});"],"sourceRoot":"../../../src"}