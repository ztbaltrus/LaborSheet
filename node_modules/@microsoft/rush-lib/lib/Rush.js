"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const os_1 = require("os");
const path = require("path");
const colors = require("colors");
const RushCommandLineParser_1 = require("./cli/actions/RushCommandLineParser");
const RushConstants_1 = require("./RushConstants");
const CommandLineMigrationAdvisor_1 = require("./cli/actions/CommandLineMigrationAdvisor");
/**
 * Operations involving the rush tool and its operation.
 *
 * @public
 */
class Rush {
    /**
     * Executes the Rush CLI. This is expected to be called by the @microsoft/rush package, which acts as a version
     *  manager for the Rush tool. The rush-lib API is exposed through the index.ts/js file.
     *
     * @param launcherVersion - The version of the @microsoft/rush wrapper used to call invoke the CLI.
     * @param isManaged - True if the tool was invoked from within a project with a rush.json file, otherwise false. We
     *  consider a project without a rush.json to be "unmanaged" and we'll print that to the command line when
     *  the tool is executed. This is mainly used for debugging purposes.
     */
    static launch(launcherVersion, isManaged) {
        console.log(os_1.EOL +
            colors.bold(`Rush Multi-Project Build Tool ${Rush.version}` + colors.yellow(isManaged ? '' : ' (unmanaged)')) +
            colors.cyan(` - ${RushConstants_1.RushConstants.rushWebSiteUrl}`) +
            os_1.EOL);
        if (!CommandLineMigrationAdvisor_1.CommandLineMigrationAdvisor.checkArgv(process.argv)) {
            // The migration advisor recognized an obsolete command-line
            process.exitCode = 1;
            return;
        }
        const parser = new RushCommandLineParser_1.RushCommandLineParser();
        parser.execute();
    }
    /**
     * The currently executing version of the "rush-lib" library.
     * This is the same as the Rush tool version for that release.
     * @public
     */
    static get version() {
        if (!Rush._version) {
            const myPackageJsonFilename = path.resolve(path.join(__dirname, '..', 'package.json'));
            const myPackageJson = require(myPackageJsonFilename);
            Rush._version = myPackageJson.version;
        }
        return Rush._version;
    }
}
exports.Rush = Rush;

//# sourceMappingURL=Rush.js.map
