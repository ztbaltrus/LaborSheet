{"version":3,"sources":["cli/logic/Git.ts"],"names":[],"mappings":"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","file":"Git.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport gitInfo = require('git-repo-info');\r\nimport * as child_process from 'child_process';\r\n\r\nimport { PublishUtilities } from './PublishUtilities';\r\n\r\nexport class Git {\r\n  private _targetBranch: string | undefined;\r\n\r\n  public static detectIfGitIsSupported(): boolean {\r\n    const command: string = process.platform === 'win32' ? 'where' : 'which';\r\n    const result: child_process.SpawnSyncReturns<string> = child_process.spawnSync(command, ['git']);\r\n\r\n    if (result.status !== 0) {\r\n      return false;\r\n    }\r\n\r\n    try {\r\n      return !!gitInfo().sha;\r\n    } catch (e) {\r\n      return false; // Unexpected, but possible if the .git directory is corrupted.\r\n    }\r\n  }\r\n\r\n  constructor(targetBranch: string | undefined) {\r\n    this._targetBranch = targetBranch;\r\n  }\r\n\r\n  public checkout(branchName: string | undefined, createBranch?: boolean): void {\r\n    const params: string = `checkout ${createBranch ? '-b ' : ''}${branchName}`;\r\n\r\n    PublishUtilities.execCommand(!!this._targetBranch, 'git', params.split(' '));\r\n  }\r\n\r\n  public merge(branchName: string): void {\r\n    PublishUtilities.execCommand(!!this._targetBranch, 'git', `merge ${branchName} --no-edit`.split(' '));\r\n  }\r\n\r\n  public deleteBranch(branchName: string, hasRemote: boolean = true): void {\r\n    PublishUtilities.execCommand(!!this._targetBranch, 'git', `branch -d ${branchName}`.split(' '));\r\n    if (hasRemote) {\r\n      PublishUtilities.execCommand(!!this._targetBranch, 'git', `push origin --delete ${branchName}`.split(' '));\r\n    }\r\n  }\r\n\r\n  public pull(): void {\r\n    PublishUtilities.execCommand(!!this._targetBranch, 'git', `pull origin ${this._targetBranch}`.split(' '));\r\n  }\r\n\r\n  public addChanges(pathspec?: string, workingDirectory?: string): void {\r\n    const files: string = pathspec ? pathspec : '.';\r\n    PublishUtilities.execCommand(!!this._targetBranch, 'git', ['add', files],\r\n      workingDirectory ? workingDirectory : process.cwd());\r\n  }\r\n\r\n  public addTag(shouldExecute: boolean, packageName: string, packageVersion: string): void {\r\n    // Tagging only happens if we're publishing to real NPM and committing to git.\r\n    const tagName: string = PublishUtilities.createTagname(packageName, packageVersion);\r\n    PublishUtilities.execCommand(\r\n      !!this._targetBranch && shouldExecute,\r\n      'git',\r\n      ['tag', '-a', tagName, '-m', `${packageName} v${packageVersion}`]);\r\n  }\r\n\r\n  public commit(message?: string): void {\r\n    const commitMessage: string = message ? message : 'Applying package updates.';\r\n    PublishUtilities.execCommand(!!this._targetBranch, 'git', ['commit', '-m', commitMessage]);\r\n  }\r\n\r\n  public push(branchName: string | undefined): void {\r\n    PublishUtilities.execCommand(\r\n      !!this._targetBranch,\r\n      'git',\r\n      ['push', 'origin', 'HEAD:' + branchName, '--follow-tags', '--verbose']);\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}