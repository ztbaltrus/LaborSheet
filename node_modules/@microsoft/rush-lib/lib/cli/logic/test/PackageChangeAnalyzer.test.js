"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const PackageChangeAnalyzer_1 = require("../PackageChangeAnalyzer");
const packageA = 'project-a';
const packageAPath = path.join('tools', packageA);
const fileA = path.join(packageAPath, 'src/index.ts');
// const packageB: string = 'project-b';
// const packageBPath: string = path.join('tools', packageB);
// const fileB: string = path.join(packageBPath, 'src/index.ts');
// const packageBPath: string = path.join('tools', packageB);
const HASH = '12345abcdef';
// const looseFile: string = 'some/other/folder/index.ts';
describe('PackageChangeAnalyzer', () => {
    it('can associate a file in a project folder with a project', () => {
        const repoHashDeps = {
            files: {
                [fileA]: HASH,
                [path.posix.join('common', 'config', 'rush', 'shrinkwrap.yaml')]: HASH
            }
        };
        PackageChangeAnalyzer_1.PackageChangeAnalyzer.getPackageDeps = (packagePath, ignored) => repoHashDeps;
        const rushConfiguration = {
            projects: [{
                    packageName: packageA,
                    projectRelativeFolder: packageAPath
                }],
            rushJsonFolder: '',
            committedShrinkwrapFilename: 'common/config/rush/shrinkwrap.yaml'
        }; // tslint:disable-line:no-any
        const packageChangeAnalyzer = new PackageChangeAnalyzer_1.PackageChangeAnalyzer(rushConfiguration);
        const packageDeps = packageChangeAnalyzer.getPackageDepsHash(packageA);
        expect(packageDeps).toEqual(repoHashDeps);
    });
    /*
    it('associates a file that is not in a project with all projects', () => {
      const repoHashDeps: IPackageDeps = {
        files: {
          [looseFile]: HASH,
          [fileA]: HASH,
          [fileB]: HASH
        }
      };
  
      PackageChangeAnalyzer.getPackageDeps = (path: string, ignored: string[]) => repoHashDeps;
      PackageChangeAnalyzer.rushConfig = {
        projects: [{
          packageName: packageA,
          projectRelativeFolder: packageAPath
        },
        {
          packageName: packageB,
          projectRelativeFolder: packageBPath
        }]
      } as any; // tslint:disable-line:no-any
  
      let packageDeps: IPackageDeps = PackageChangeAnalyzer.instance.getPackageDepsHash(packageA);
      expect(packageDeps).toEqual({
        files: {
          [looseFile]: HASH,
          [fileA]: HASH
        }
      });
  
      packageDeps = PackageChangeAnalyzer.instance.getPackageDepsHash(packageB);
      expect(packageDeps).toEqual({
        files: {
          [looseFile]: HASH,
          [fileB]: HASH
        }
      });
    });
    */
});

//# sourceMappingURL=PackageChangeAnalyzer.test.js.map
