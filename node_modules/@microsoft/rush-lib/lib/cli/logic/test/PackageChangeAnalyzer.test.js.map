{"version":3,"sources":["cli/logic/test/PackageChangeAnalyzer.test.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAE7B,oEAAiE;AAOjE,MAAM,QAAQ,GAAW,WAAW,CAAC;AACrC,MAAM,YAAY,GAAW,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC1D,MAAM,KAAK,GAAW,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;AAC9D,wCAAwC;AACxC,6DAA6D;AAC7D,iEAAiE;AACjE,6DAA6D;AAC7D,MAAM,IAAI,GAAW,aAAa,CAAC;AACnC,0DAA0D;AAE1D,QAAQ,CAAC,uBAAuB,EAAE;IAChC,EAAE,CAAC,yDAAyD,EAAE;QAC5D,MAAM,YAAY,GAAiB;YACjC,KAAK,EAAE;gBACL,CAAC,KAAK,CAAC,EAAE,IAAI;gBACb,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC,EAAE,IAAI;aACvE;SACF,CAAC;QAEF,6CAAqB,CAAC,cAAc,GAAG,CAAC,WAAmB,EAAE,OAAiB,KAAK,YAAY,CAAC;QAChG,MAAM,iBAAiB,GAAsB;YAC3C,QAAQ,EAAE,CAAC;oBACT,WAAW,EAAE,QAAQ;oBACrB,qBAAqB,EAAE,YAAY;iBACpC,CAAC;YACF,cAAc,EAAE,EAAE;YAClB,2BAA2B,EAAE,oCAAoC;SAC3D,CAAC,CAAC,6BAA6B;QAEvC,MAAM,qBAAqB,GAA0B,IAAI,6CAAqB,CAAC,iBAAiB,CAAC,CAAC;QAClG,MAAM,WAAW,GAA6B,qBAAqB,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QACjG,MAAM,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAsCE;AACJ,CAAC,CAAC,CAAC","file":"PackageChangeAnalyzer.test.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\n\r\nimport { PackageChangeAnalyzer } from '../PackageChangeAnalyzer';\r\nimport { RushConfiguration } from '../../../data/RushConfiguration';\r\n\r\nimport {\r\n  IPackageDeps\r\n} from '@microsoft/package-deps-hash';\r\n\r\nconst packageA: string = 'project-a';\r\nconst packageAPath: string = path.join('tools', packageA);\r\nconst fileA: string = path.join(packageAPath, 'src/index.ts');\r\n// const packageB: string = 'project-b';\r\n// const packageBPath: string = path.join('tools', packageB);\r\n// const fileB: string = path.join(packageBPath, 'src/index.ts');\r\n// const packageBPath: string = path.join('tools', packageB);\r\nconst HASH: string = '12345abcdef';\r\n// const looseFile: string = 'some/other/folder/index.ts';\r\n\r\ndescribe('PackageChangeAnalyzer', () => {\r\n  it('can associate a file in a project folder with a project', () => {\r\n    const repoHashDeps: IPackageDeps = {\r\n      files: {\r\n        [fileA]: HASH,\r\n        [path.posix.join('common', 'config', 'rush', 'shrinkwrap.yaml')]: HASH\r\n      }\r\n    };\r\n\r\n    PackageChangeAnalyzer.getPackageDeps = (packagePath: string, ignored: string[]) => repoHashDeps;\r\n    const rushConfiguration: RushConfiguration = {\r\n      projects: [{\r\n        packageName: packageA,\r\n        projectRelativeFolder: packageAPath\r\n      }],\r\n      rushJsonFolder: '',\r\n      committedShrinkwrapFilename: 'common/config/rush/shrinkwrap.yaml'\r\n    } as any; // tslint:disable-line:no-any\r\n\r\n    const packageChangeAnalyzer: PackageChangeAnalyzer = new PackageChangeAnalyzer(rushConfiguration);\r\n    const packageDeps: IPackageDeps | undefined = packageChangeAnalyzer.getPackageDepsHash(packageA);\r\n    expect(packageDeps).toEqual(repoHashDeps);\r\n  });\r\n\r\n  /*\r\n  it('associates a file that is not in a project with all projects', () => {\r\n    const repoHashDeps: IPackageDeps = {\r\n      files: {\r\n        [looseFile]: HASH,\r\n        [fileA]: HASH,\r\n        [fileB]: HASH\r\n      }\r\n    };\r\n\r\n    PackageChangeAnalyzer.getPackageDeps = (path: string, ignored: string[]) => repoHashDeps;\r\n    PackageChangeAnalyzer.rushConfig = {\r\n      projects: [{\r\n        packageName: packageA,\r\n        projectRelativeFolder: packageAPath\r\n      },\r\n      {\r\n        packageName: packageB,\r\n        projectRelativeFolder: packageBPath\r\n      }]\r\n    } as any; // tslint:disable-line:no-any\r\n\r\n    let packageDeps: IPackageDeps = PackageChangeAnalyzer.instance.getPackageDepsHash(packageA);\r\n    expect(packageDeps).toEqual({\r\n      files: {\r\n        [looseFile]: HASH,\r\n        [fileA]: HASH\r\n      }\r\n    });\r\n\r\n    packageDeps = PackageChangeAnalyzer.instance.getPackageDepsHash(packageB);\r\n    expect(packageDeps).toEqual({\r\n      files: {\r\n        [looseFile]: HASH,\r\n        [fileB]: HASH\r\n      }\r\n    });\r\n  });\r\n  */\r\n});"],"sourceRoot":"../../../../../../../src"}