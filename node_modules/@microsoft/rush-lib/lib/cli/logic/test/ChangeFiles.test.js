"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ChangeFiles_1 = require("../ChangeFiles");
describe('ChangeFiles', () => {
    describe('getFiles', () => {
        it('returns correctly when there is one change file', () => {
            const changesPath = path.join(__dirname, 'leafChange');
            const changeFiles = new ChangeFiles_1.ChangeFiles(changesPath);
            const expectedPath = path.join(changesPath, 'change1.json').replace(/\\/g, '/');
            expect(changeFiles.getFiles()).toEqual([expectedPath]);
        });
        it('returns empty array when no change files', () => {
            const changesPath = path.join(__dirname, 'noChange');
            const changeFiles = new ChangeFiles_1.ChangeFiles(changesPath);
            expect(changeFiles.getFiles().length).toEqual(0);
        });
        it('returns correctly when change files are categorized', () => {
            const changesPath = path.join(__dirname, 'categorizedChanges');
            const changeFiles = new ChangeFiles_1.ChangeFiles(changesPath);
            const files = changeFiles.getFiles();
            expect(files.length).toEqual(3);
            const expectedPathA = path.join(changesPath, '@ms', 'a', 'changeA.json').replace(/\\/g, '/');
            const expectedPathB = path.join(changesPath, '@ms', 'b', 'changeB.json').replace(/\\/g, '/');
            const expectedPathC = path.join(changesPath, 'changeC.json').replace(/\\/g, '/');
            expect(files).toContain(expectedPathA);
            expect(files).toContain(expectedPathB);
            expect(files).toContain(expectedPathC);
        });
    });
    describe('validate', () => {
        it('throws when there is any missing package.', () => {
            const changeFile = path.join(__dirname, 'verifyChanges', 'changes.json');
            const changedPackages = ['a', 'b', 'c'];
            expect(() => {
                ChangeFiles_1.ChangeFiles.validate([changeFile], changedPackages);
            }).toThrow(Error);
        });
        it('does not throw when there is no missing packages', () => {
            const changeFile = path.join(__dirname, 'verifyChanges', 'changes.json');
            const changedPackages = ['a'];
            expect(() => {
                ChangeFiles_1.ChangeFiles.validate([changeFile], changedPackages);
            }).not.toThrow();
        });
        it('throws when missing packages from categorized changes', () => {
            const changeFileA = path.join(__dirname, 'categorizedChanges', '@ms', 'a', 'changeA.json');
            const changeFileB = path.join(__dirname, 'categorizedChanges', '@ms', 'b', 'changeB.json');
            const changedPackages = ['@ms/a', '@ms/b', 'c'];
            expect(() => {
                ChangeFiles_1.ChangeFiles.validate([changeFileA, changeFileB], changedPackages);
            }).toThrow(Error);
        });
        it('does not throw when no missing packages from categorized changes', () => {
            const changeFileA = path.join(__dirname, 'categorizedChanges', '@ms', 'a', 'changeA.json');
            const changeFileB = path.join(__dirname, 'categorizedChanges', '@ms', 'b', 'changeB.json');
            const changeFileC = path.join(__dirname, 'categorizedChanges', 'changeC.json');
            const changedPackages = ['@ms/a', '@ms/b', 'c'];
            expect(() => {
                ChangeFiles_1.ChangeFiles.validate([changeFileA, changeFileB, changeFileC], changedPackages);
            }).not.toThrow(Error);
        });
    });
    describe('deleteAll', () => {
        it('delete all files when there are no prerelease packages', () => {
            const changesPath = path.join(__dirname, 'multipleChangeFiles');
            const changeFiles = new ChangeFiles_1.ChangeFiles(changesPath);
            expect(changeFiles.deleteAll(false)).toEqual(3);
        });
        it('does not delete change files for package whose change logs do not get updated. ', () => {
            const changesPath = path.join(__dirname, 'multipleChangeFiles');
            const changeFiles = new ChangeFiles_1.ChangeFiles(changesPath);
            const updatedChangelogs = [
                {
                    name: 'a',
                    entries: []
                },
                {
                    name: 'b',
                    entries: []
                }
            ];
            expect(changeFiles.deleteAll(false, updatedChangelogs)).toEqual(2);
        });
        it('delete all files when there are hotfixes', () => {
            const changesPath = path.join(__dirname, 'multipleHotfixChanges');
            const changeFiles = new ChangeFiles_1.ChangeFiles(changesPath);
            expect(changeFiles.deleteAll(false)).toEqual(3);
        });
    });
});

//# sourceMappingURL=ChangeFiles.test.js.map
