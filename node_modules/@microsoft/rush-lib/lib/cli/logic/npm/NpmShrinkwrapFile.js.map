{"version":3,"sources":["cli/logic/npm/NpmShrinkwrapFile.ts"],"names":[],"mappings":"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","file":"NpmShrinkwrapFile.js","sourcesContent":["import * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\n\r\nimport {\r\n  JsonFile\r\n} from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  BaseShrinkwrapFile\r\n} from '../base/BaseShrinkwrapFile';\r\n\r\ninterface IShrinkwrapDependencyJson {\r\n  version: string;\r\n  from: string;\r\n  resolved: string;\r\n  dependencies: { [dependency: string]: IShrinkwrapDependencyJson };\r\n}\r\n\r\ninterface IShrinkwrapJson {\r\n  name: string;\r\n  version: string;\r\n  dependencies: { [dependency: string]: IShrinkwrapDependencyJson };\r\n}\r\n\r\nexport class NpmShrinkwrapFile extends BaseShrinkwrapFile {\r\n  private _shrinkwrapJson: IShrinkwrapJson;\r\n\r\n  public static loadFromFile(shrinkwrapJsonFilename: string): NpmShrinkwrapFile | undefined {\r\n    let data: string | undefined = undefined;\r\n    try {\r\n      if (!fsx.existsSync(shrinkwrapJsonFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format\r\n      // and typically very large, so we want to load it the same way that NPM does.\r\n      data = fsx.readFileSync(shrinkwrapJsonFilename).toString();\r\n      if (data.charCodeAt(0) === 0xFEFF) {  // strip BOM\r\n        data = data.slice(1);\r\n      }\r\n\r\n      return new NpmShrinkwrapFile(JSON.parse(data));\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapJsonFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies);\r\n  }\r\n\r\n  protected serialize(): string {\r\n    return JsonFile.stringify(this._shrinkwrapJson);\r\n  }\r\n\r\n  protected getTopLevelDependencyVersion(dependencyName: string): string | undefined {\r\n     // First, check under tempProjectName, as this is the first place \"rush link\" looks.\r\n    const dependencyJson: IShrinkwrapDependencyJson | undefined =\r\n      NpmShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n\r\n     if (!dependencyJson) {\r\n       return undefined;\r\n     }\r\n\r\n     return dependencyJson.version;\r\n  }\r\n\r\n  /**\r\n   * @param dependencyName the name of the dependency to get a version for\r\n   * @param tempProjectName the name of the temp project to check for this dependency\r\n   * @param versionRange Not used, just exists to satisfy abstract API contract\r\n   */\r\n  protected tryEnsureDependencyVersion(dependencyName: string,\r\n    tempProjectName: string,\r\n    versionRange: string): string | undefined {\r\n\r\n    // First, check under tempProjectName, as this is the first place \"rush link\" looks.\r\n    let dependencyJson: IShrinkwrapDependencyJson | undefined = undefined;\r\n\r\n    const tempDependency: IShrinkwrapDependencyJson | undefined = NpmShrinkwrapFile.tryGetValue(\r\n      this._shrinkwrapJson.dependencies, tempProjectName);\r\n    if (tempDependency && tempDependency.dependencies) {\r\n      dependencyJson = NpmShrinkwrapFile.tryGetValue(tempDependency.dependencies, dependencyName);\r\n    }\r\n\r\n    // Otherwise look at the root of the shrinkwrap file\r\n    if (!dependencyJson) {\r\n      return this.getTopLevelDependencyVersion(dependencyName);\r\n    }\r\n\r\n    return dependencyJson.version;\r\n  }\r\n\r\n  private constructor(shrinkwrapJson: IShrinkwrapJson) {\r\n    super();\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n\r\n    // Normalize the data\r\n    if (!this._shrinkwrapJson.version) {\r\n      this._shrinkwrapJson.version = '';\r\n    }\r\n    if (!this._shrinkwrapJson.name) {\r\n      this._shrinkwrapJson.name = '';\r\n    }\r\n    if (!this._shrinkwrapJson.dependencies) {\r\n      this._shrinkwrapJson.dependencies = { };\r\n    }\r\n  }\r\n}"],"sourceRoot":"../../../../../../../src"}