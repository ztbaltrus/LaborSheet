"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fsx = require("fs-extra");
const os = require("os");
const node_core_library_1 = require("@microsoft/node-core-library");
const BaseShrinkwrapFile_1 = require("../base/BaseShrinkwrapFile");
class NpmShrinkwrapFile extends BaseShrinkwrapFile_1.BaseShrinkwrapFile {
    static loadFromFile(shrinkwrapJsonFilename) {
        let data = undefined;
        try {
            if (!fsx.existsSync(shrinkwrapJsonFilename)) {
                return undefined; // file does not exist
            }
            // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format
            // and typically very large, so we want to load it the same way that NPM does.
            data = fsx.readFileSync(shrinkwrapJsonFilename).toString();
            if (data.charCodeAt(0) === 0xFEFF) {
                data = data.slice(1);
            }
            return new NpmShrinkwrapFile(JSON.parse(data));
        }
        catch (error) {
            throw new Error(`Error reading "${shrinkwrapJsonFilename}":` + os.EOL + `  ${error.message}`);
        }
    }
    getTempProjectNames() {
        return this._getTempProjectNames(this._shrinkwrapJson.dependencies);
    }
    serialize() {
        return node_core_library_1.JsonFile.stringify(this._shrinkwrapJson);
    }
    getTopLevelDependencyVersion(dependencyName) {
        // First, check under tempProjectName, as this is the first place "rush link" looks.
        const dependencyJson = NpmShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);
        if (!dependencyJson) {
            return undefined;
        }
        return dependencyJson.version;
    }
    /**
     * @param dependencyName the name of the dependency to get a version for
     * @param tempProjectName the name of the temp project to check for this dependency
     * @param versionRange Not used, just exists to satisfy abstract API contract
     */
    tryEnsureDependencyVersion(dependencyName, tempProjectName, versionRange) {
        // First, check under tempProjectName, as this is the first place "rush link" looks.
        let dependencyJson = undefined;
        const tempDependency = NpmShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, tempProjectName);
        if (tempDependency && tempDependency.dependencies) {
            dependencyJson = NpmShrinkwrapFile.tryGetValue(tempDependency.dependencies, dependencyName);
        }
        // Otherwise look at the root of the shrinkwrap file
        if (!dependencyJson) {
            return this.getTopLevelDependencyVersion(dependencyName);
        }
        return dependencyJson.version;
    }
    constructor(shrinkwrapJson) {
        super();
        this._shrinkwrapJson = shrinkwrapJson;
        // Normalize the data
        if (!this._shrinkwrapJson.version) {
            this._shrinkwrapJson.version = '';
        }
        if (!this._shrinkwrapJson.name) {
            this._shrinkwrapJson.name = '';
        }
        if (!this._shrinkwrapJson.dependencies) {
            this._shrinkwrapJson.dependencies = {};
        }
    }
}
exports.NpmShrinkwrapFile = NpmShrinkwrapFile;

//# sourceMappingURL=NpmShrinkwrapFile.js.map
