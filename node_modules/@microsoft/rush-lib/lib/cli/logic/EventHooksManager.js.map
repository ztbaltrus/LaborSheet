{"version":3,"sources":["cli/logic/EventHooksManager.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,yBAAyB;AACzB,iCAAiC;AAGjC,yDAAsD;AACtD,sDAA8C;AAC9C,yDAAsD;AAEtD;IAIE,YAAmB,UAAsB,EAAE,gBAAwB;QACjE,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,iBAAiB,GAAG,gBAAgB,CAAC;IAC5C,CAAC;IAEM,MAAM,CAAC,KAAY,EAAE,OAAgB;QAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACtB,MAAM,CAAC;QACT,CAAC;QACD,MAAM,OAAO,GAAa,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACtD,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACvB,MAAM,SAAS,GAAc,qBAAS,CAAC,KAAK,EAAE,CAAC;YAC/C,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,6BAA6B,kBAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;YAChF,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM;gBACrB,IAAI,CAAC;oBACH,qBAAS,CAAC,uBAAuB,CAAC,MAAM,EACtC,OAAO,CAAC,GAAG,EAAE,EACb,IAAI,CAAC,iBAAiB,EACtB,IAAI,CACL,CAAC;gBACJ,CAAC;gBAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACf,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,gBAAgB,MAAM,mCAAmC;wBAC9E,qCAAqC,CAAC,CAAC;oBACzC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;wBACZ,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;oBACxC,CAAC;gBACH,CAAC;YACH,CAAC,CAAC,CAAC;YACH,SAAS,CAAC,IAAI,EAAE,CAAC;YACjB,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,0BAA0B,SAAS,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;QACxF,CAAC;IACH,CAAC;CACF;AApCD,8CAoCC","file":"EventHooksManager.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as colors from 'colors';\r\n\r\nimport { EventHooks } from '../../data/EventHooks';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { Event } from '../../data/EventHooks';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\n\r\nexport class EventHooksManager {\r\n  private _eventHooks: EventHooks;\r\n  private _commonTempFolder: string;\r\n\r\n  public constructor(eventHooks: EventHooks, commonTempFolder: string) {\r\n    this._eventHooks = eventHooks;\r\n    this._commonTempFolder = commonTempFolder;\r\n  }\r\n\r\n  public handle(event: Event, isDebug: boolean): void {\r\n    if (!this._eventHooks) {\r\n      return;\r\n    }\r\n    const scripts: string[] = this._eventHooks.get(event);\r\n    if (scripts.length > 0) {\r\n      const stopwatch: Stopwatch = Stopwatch.start();\r\n      console.log(os.EOL + colors.green(`Executing event hooks for ${Event[event]}`));\r\n      scripts.forEach((script) => {\r\n        try {\r\n          Utilities.executeLifecycleCommand(script,\r\n            process.cwd(),\r\n            this._commonTempFolder,\r\n            true\r\n          );\r\n        } catch (error) {\r\n          console.error(`${os.EOL} Event hook \"${script}\" failed. Run \"rush\" with --debug` +\r\n            ` to see detailed error information.`);\r\n          if (isDebug) {\r\n            console.error(os.EOL + error.message);\r\n          }\r\n        }\r\n      });\r\n      stopwatch.stop();\r\n      console.log(os.EOL + colors.green(`Event hooks finished. (${stopwatch.toString()})`));\r\n    }\r\n  }\r\n}"],"sourceRoot":"../../../../../src"}