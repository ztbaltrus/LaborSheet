import { IPackageJson } from '@microsoft/node-core-library';
import { BumpType } from '../../data/VersionPolicy';
import { ChangeFile } from '../../data/ChangeFile';
import { RushConfiguration } from '../../data/RushConfiguration';
import { VersionPolicyConfiguration } from '../../data/VersionPolicyConfiguration';
export declare class VersionManager {
    private _rushConfiguration;
    private _userEmail;
    private _versionPolicyConfiguration;
    private _updatedProjects;
    private _changeFiles;
    constructor(_rushConfiguration: RushConfiguration, _userEmail: string, _versionPolicyConfiguration?: VersionPolicyConfiguration);
    /**
     * Ensures project versions follow the provided version policy. If version policy is not
     * provided, all projects will have their version checked according to the associated version policy.
     * package.json files will be updated if needed.
     * This method does not commit changes.
     * @param versionPolicyName -- version policy name
     * @param shouldCommit -- should update files to disk
     * @param force -- update even when project version is higher than policy version.
     */
    ensure(versionPolicyName?: string, shouldCommit?: boolean, force?: boolean): void;
    /**
     * Bumps versions following version policies.
     *
     * @param lockStepVersionPolicyName - a specified lock step version policy name. Without this value,
     * versions for all lock step policies and all individual policies will be bumped.
     * With this value, only the specified lock step policy will be bumped along with all individual policies.
     * @param bumpType - overrides the default bump type and only works for lock step policy
     * @param identifier - overrides the prerelease identifier and only works for lock step policy
     * @param shouldCommit - whether the changes will be written to disk
     */
    bump(lockStepVersionPolicyName?: string, bumpType?: BumpType, identifier?: string, shouldCommit?: boolean): void;
    readonly updatedProjects: Map<string, IPackageJson>;
    readonly changeFiles: Map<string, ChangeFile>;
    private _ensure(versionPolicyName?, shouldCommit?, force?);
    private _getLockStepProjects();
    private _updateVersionsByPolicy(versionPolicyName?, force?);
    private _isPrerelease(version);
    private _addChangeInfo(packageName, changeInfos);
    private _updateDependencies();
    private _updateProjectAllDependencies(rushProject, clonedProject, projectVersionChanged);
    private _updateProjectDependencies(dependencies, changes, clonedProject, rushProject, projectVersionChanged);
    private _shouldTrackDependencyChange(rushProject, dependencyName);
    private _trackDependencyChange(changes, clonedProject, projectVersionChanged, updatedDependentProject, oldDependencyVersion, newDependencyVersion);
    private _addChange(changes, newChange);
    private _updatePackageJsonFiles();
    private _createChangeInfo(newPackageJson, rushProject);
}
