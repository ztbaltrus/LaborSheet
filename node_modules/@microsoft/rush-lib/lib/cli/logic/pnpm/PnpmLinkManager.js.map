{"version":3,"sources":["cli/logic/pnpm/PnpmLinkManager.ts"],"names":[],"mappings":"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","file":"PnpmLinkManager.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport uriEncode = require('strict-uri-encode');\r\nimport pnpmLinkBins from '@pnpm/link-bins';\r\n\r\nimport {\r\n  JsonFile,\r\n  Text,\r\n  IPackageJson,\r\n  PackageName\r\n} from '@microsoft/node-core-library';\r\n\r\nimport {\r\n  BaseLinkManager\r\n} from '../base/BaseLinkManager';\r\nimport { BasePackage } from '../base/BasePackage';\r\nimport { RushConstants } from '../../../RushConstants';\r\nimport { IRushLinkJson } from '../../../data/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../../data/RushConfigurationProject';\r\n\r\n// special flag for debugging, will print extra diagnostic information,\r\n// but comes with performance cost\r\nconst DEBUG: boolean = false;\r\n\r\nexport class PnpmLinkManager extends BaseLinkManager {\r\n  protected _linkProjects(): Promise<void> {\r\n    try {\r\n      const rushLinkJson: IRushLinkJson = { localLinks: {} };\r\n\r\n      let promise: Promise<void> = Promise.resolve();\r\n\r\n      for (const rushProject of this._rushConfiguration.projects) {\r\n        promise = promise.then(() => {\r\n          console.log(os.EOL + 'LINKING: ' + rushProject.packageName);\r\n          return this._linkProject(rushProject, rushLinkJson);\r\n        });\r\n      }\r\n\r\n      return promise.then(() => {\r\n        console.log(`Writing \"${this._rushConfiguration.rushLinkJsonFilename}\"`);\r\n        JsonFile.save(rushLinkJson, this._rushConfiguration.rushLinkJsonFilename);\r\n      });\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is called once for each local project from Rush.json.\r\n   * @param project             The local project that we will create symlinks for\r\n   * @param rushLinkJson        The common/temp/rush-link.json output file\r\n   */\r\n  private _linkProject(\r\n    project: RushConfigurationProject,\r\n    rushLinkJson: IRushLinkJson): Promise<void> {\r\n\r\n    // first, read the temp package.json information\r\n\r\n    // Example: \"project1\"\r\n    const unscopedTempProjectName: string = PackageName.getUnscopedName(project.tempProjectName);\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\r\n    const extractedFolder: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      RushConstants.rushTempProjectsFolderName, unscopedTempProjectName);\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\projects\\project1\\package.json\"\r\n    const packageJsonFilename: string = path.join(extractedFolder, 'package.json');\r\n\r\n    // Example: \"C:\\MyRepo\\common\\temp\\node_modules\\@rush-temp\\project1\"\r\n    const installFolderName: string = path.join(this._rushConfiguration.commonTempFolder,\r\n      RushConstants.nodeModulesFolderName, RushConstants.rushTempNpmScope, unscopedTempProjectName);\r\n\r\n    const commonPackage: BasePackage = BasePackage.createVirtualTempPackage(packageJsonFilename, installFolderName);\r\n\r\n    const localPackage: BasePackage = BasePackage.createLinkedPackage(\r\n      project.packageJson.name,\r\n      commonPackage.version,\r\n      project.projectFolder\r\n    );\r\n\r\n    // now that we have the temp package.json, we can go ahead and link up all the direct dependencies\r\n\r\n    // first, start with the rush dependencies, we just need to link to the project folder\r\n    for (const dependencyName of Object.keys(commonPackage.packageJson!.rushDependencies || {})) {\r\n\r\n      const matchedRushPackage: RushConfigurationProject | undefined =\r\n        this._rushConfiguration.getProjectByName(dependencyName);\r\n\r\n      if (matchedRushPackage) {\r\n        // We found a suitable match, so place a new local package that\r\n        // symlinks to the Rush project\r\n        const matchedVersion: string = matchedRushPackage.packageJson.version;\r\n\r\n        let localLinks: string[] = rushLinkJson.localLinks[localPackage.name];\r\n        if (!localLinks) {\r\n          localLinks = [];\r\n          rushLinkJson.localLinks[localPackage.name] = localLinks;\r\n        }\r\n        localLinks.push(dependencyName);\r\n\r\n        // e.g. \"C:\\my-repo\\project-a\\node_modules\\project-b\" if project-b is a rush dependency of project-a\r\n        const newLocalFolderPath: string = path.join(localPackage.folderPath, 'node_modules', dependencyName);\r\n\r\n        const newLocalPackage: BasePackage = BasePackage.createLinkedPackage(\r\n          dependencyName,\r\n          matchedVersion,\r\n          newLocalFolderPath\r\n        );\r\n\r\n        newLocalPackage.symlinkTargetFolderPath = matchedRushPackage.projectFolder;\r\n        localPackage.children.push(newLocalPackage);\r\n      } else {\r\n        // weird state or program bug\r\n        throw Error(`Cannot find dependency \"${dependencyName}\" for \"${project.packageName}\" in rush configuration`);\r\n      }\r\n    }\r\n\r\n    // Iterate through all the regular dependencies\r\n\r\n    // With npm, it's possible for two different projects to have dependencies on\r\n    // the same version of the same library, but end up with different implementations\r\n    // of that library, if the library is installed twice and with different secondary\r\n    // dependencies.The NpmLinkManager recursively links dependency folders to try to\r\n    // honor this. Since PNPM always uses the same physical folder to represent a given\r\n    // version of a library, we only need to link directly to the folder that PNPM has chosen,\r\n    // and it will have a consistent set of secondary dependencies.\r\n\r\n    // each of these dependencies should be linked in a special folder that pnpm\r\n    // creates for the installed version of each .TGZ package, all we need to do\r\n    // is re-use that symlink in order to get linked to whatever PNPM thought was\r\n    // appropriate. This folder is usually something like:\r\n    // C:\\{uri-encoed-path-to-tgz}\\node_modules\\{package-name}\r\n\r\n    // e.g.: C:\\wbt\\common\\temp\\projects\\api-documenter.tgz\r\n    const pathToTgzFile: string = path.join(\r\n      this._rushConfiguration.commonTempFolder,\r\n      'projects',\r\n      `${unscopedTempProjectName}.tgz`);\r\n\r\n    // e.g.: C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\r\n    const escapedPathToTgzFile: string = uriEncode(Text.replaceAll(pathToTgzFile, path.sep, '/'));\r\n\r\n    // tslint:disable-next-line:max-line-length\r\n    // e.g.: C:\\wbt\\common\\temp\\node_modules\\.local\\C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\\node_modules\r\n    const pathToLocalInstallation: string = path.join(\r\n      this._rushConfiguration.commonTempFolder,\r\n      RushConstants.nodeModulesFolderName,\r\n      '.local',\r\n      escapedPathToTgzFile,\r\n      RushConstants.nodeModulesFolderName);\r\n\r\n    for (const dependencyName of Object.keys(commonPackage.packageJson!.dependencies || {})) {\r\n      // the dependency we are looking for should have already created a symlink here\r\n\r\n      // FYI dependencyName might contain an NPM scope, here it gets converted into a filesystem folder name\r\n      // e.g. if the dependency is supi:\r\n      // tslint:disable-next-line:max-line-length\r\n      // \"C:\\wbt\\common\\temp\\node_modules\\.local\\C%3A%2Fwbt%2Fcommon%2Ftemp%2Fprojects%2Fapi-documenter.tgz\\node_modules\\supi\"\r\n      const dependencyLocalInstallationSymlink: string = path.join(\r\n        pathToLocalInstallation,\r\n        dependencyName);\r\n\r\n      if (!fsx.existsSync(dependencyLocalInstallationSymlink)) {\r\n        // if this occurs, it is a bug in Rush algorithm or unexpected PNPM behavior\r\n        throw Error(`Cannot find installed dependency \"${dependencyName}\" in \"${pathToLocalInstallation}\"`);\r\n      }\r\n\r\n      if (!fsx.lstatSync(dependencyLocalInstallationSymlink).isSymbolicLink()) {\r\n        // if this occurs, it is a bug in Rush algorithm or unexpected PNPM behavior\r\n        throw Error(`Dependency \"${dependencyName}\" is not a symlink in \"${pathToLocalInstallation}`);\r\n      }\r\n\r\n      // The dependencyLocalInstallationSymlink is just a symlink to another folder.\r\n      // To reduce the number of filesystem reads that are needed, we will link to where that symlink\r\n      // it pointed, rather than linking to a link.\r\n      const dependencyLocalInstallationRealpath: string = fsx.realpathSync(dependencyLocalInstallationSymlink);\r\n\r\n      const newLocalFolderPath: string = path.join(\r\n          localPackage.folderPath, 'node_modules', dependencyName);\r\n\r\n      let version: string | undefined = undefined;\r\n      if (DEBUG) {\r\n        // read the version number for diagnostic purposes\r\n        const packageJsonForDependency: IPackageJson = fsx.readJsonSync(\r\n          path.join(dependencyLocalInstallationRealpath, RushConstants.packageJsonFilename));\r\n\r\n        version = packageJsonForDependency.version;\r\n      }\r\n\r\n      const newLocalPackage: BasePackage = BasePackage.createLinkedPackage(\r\n        dependencyName,\r\n        version,\r\n        newLocalFolderPath\r\n      );\r\n\r\n      newLocalPackage.symlinkTargetFolderPath = dependencyLocalInstallationRealpath;\r\n      localPackage.addChild(newLocalPackage);\r\n    }\r\n\r\n    if (DEBUG) {\r\n      localPackage.printTree();\r\n    }\r\n\r\n    PnpmLinkManager._createSymlinksForTopLevelProject(localPackage);\r\n\r\n    // Also symlink the \".bin\" folder\r\n    const projectFolder: string = path.join(localPackage.folderPath, 'node_modules');\r\n    const projectBinFolder: string = path.join(localPackage.folderPath, 'node_modules', '.bin');\r\n\r\n    // Return type is Promise<void[]> because the API returns Promise.all()\r\n    return pnpmLinkBins(projectFolder, projectBinFolder)\r\n      .then(() => { /* empty block */ });\r\n  }\r\n}"],"sourceRoot":"../../../../../../../src"}