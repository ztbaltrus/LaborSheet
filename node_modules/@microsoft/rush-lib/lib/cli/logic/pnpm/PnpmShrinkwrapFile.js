"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fsx = require("fs-extra");
const yaml = require("js-yaml");
const os = require("os");
const semver = require("semver");
const node_core_library_1 = require("@microsoft/node-core-library");
const BaseShrinkwrapFile_1 = require("../base/BaseShrinkwrapFile");
// This is based on PNPM's own configuration:
// https://github.com/pnpm/pnpm-shrinkwrap/blob/master/src/write.ts
const SHRINKWRAP_YAML_FORMAT = {
    lineWidth: 1000,
    noCompatMode: true,
    noRefs: true,
    sortKeys: true
};
function extractVersionFromPnpmVersionSpecifier(version) {
    let extractedVersion = undefined;
    if (!version) {
        return undefined;
    }
    const versionParts = version.split('/');
    // it had no slashes, so we know it is a version like "0.0.5"
    if (versionParts.length === 1) {
        extractedVersion = version; // e.g. "0.0.5"
    }
    else {
        const isScoped = versionParts[1].indexOf('@') === 0;
        // e.g. "/gulp-karma/0.0.5/karma@0.13.22"
        // if it has 4 parts, then it should be unscoped
        if (versionParts.length === 4 && !isScoped) {
            extractedVersion = versionParts[2]; // e.g. "0.0.5"
        }
        // e.g. "/@ms/sp-client-utilities/3.1.1/foo@13.1.0"
        // if it has 5 parts, it should be scoped
        if (versionParts.length === 5 && isScoped) {
            extractedVersion = versionParts[3]; // e.g. "3.1.1"
        }
        // e.g. "path.pkgs.visualstudio.com/@scope/depame/1.4.0"
        if (!extractedVersion && semver.valid(versionParts[versionParts.length - 1]) !== null) {
            extractedVersion = versionParts[versionParts.length - 1];
        }
    }
    return extractedVersion;
}
exports.extractVersionFromPnpmVersionSpecifier = extractVersionFromPnpmVersionSpecifier;
class PnpmShrinkwrapFile extends BaseShrinkwrapFile_1.BaseShrinkwrapFile {
    static loadFromFile(shrinkwrapYamlFilename) {
        try {
            if (!fsx.existsSync(shrinkwrapYamlFilename)) {
                return undefined; // file does not exist
            }
            // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format
            // and typically very large, so we want to load it the same way that NPM does.
            const parsedData = yaml.safeLoad(fsx.readFileSync(shrinkwrapYamlFilename).toString());
            return new PnpmShrinkwrapFile(parsedData);
        }
        catch (error) {
            throw new Error(`Error reading "${shrinkwrapYamlFilename}":` + os.EOL + `  ${error.message}`);
        }
    }
    getTempProjectNames() {
        return this._getTempProjectNames(this._shrinkwrapJson.dependencies);
    }
    /**
     * Serializes the PNPM Shrinkwrap file
     */
    serialize() {
        return yaml.safeDump(this._shrinkwrapJson, SHRINKWRAP_YAML_FORMAT);
    }
    /**
     * Gets the version number from the list of top-level dependencies in the "dependencies" section
     * of the shrinkwrap file
     */
    getTopLevelDependencyVersion(dependencyName) {
        return BaseShrinkwrapFile_1.BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);
    }
    /**
     * Gets the resolved version number of a dependency for a specific temp project.
     * For PNPM, we can reuse the version that another project is using.
     * Note that this function modifies the shrinkwrap data.
     */
    tryEnsureDependencyVersion(dependencyName, tempProjectName, versionRange) {
        // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the
        // shrinkwrap file puts our dependency in either the top of the node_modules folder
        // or underneath the package we are looking at.
        // This is because the PNPM shrinkwrap file describes the exact links that need to be created
        // to recreate the graph..
        // Because of this, we actually need to check for a version that this package is directly
        // linked to.
        const tempProjectDependencyKey = this._getTempProjectKey(tempProjectName);
        const packageDescription = this._getPackageDescription(tempProjectDependencyKey);
        if (!packageDescription) {
            return undefined;
        }
        if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {
            if (versionRange) {
                // this means the current temp project doesn't provide this dependency,
                // however, we may be able to use a different version. we prefer the latest version
                let latestVersion = undefined;
                this.getTempProjectNames().forEach((otherTempProject) => {
                    const otherVersion = this._getDependencyVersion(dependencyName, otherTempProject);
                    if (otherVersion && semver.satisfies(otherVersion, versionRange)) {
                        if (!latestVersion || semver.gt(otherVersion, latestVersion)) {
                            latestVersion = otherVersion;
                        }
                    }
                });
                if (latestVersion) {
                    // go ahead and fixup the shrinkwrap file to point at this
                    const dependencies = this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies || {};
                    dependencies[dependencyName] = latestVersion;
                    this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies = dependencies;
                    return latestVersion;
                }
            }
            return undefined;
        }
        return this._normalizeDependencyVersion(dependencyName, packageDescription.dependencies[dependencyName]);
    }
    checkValidVersionRange(dependencyVersion, versionRange) {
        // dependencyVersion could be a relattive or absolute path, for those cases we
        // need to extract the version from the end of the path.
        return super.checkValidVersionRange(dependencyVersion.split('/').pop(), versionRange);
    }
    constructor(shrinkwrapJson) {
        super();
        this._shrinkwrapJson = shrinkwrapJson;
        // Normalize the data
        if (!this._shrinkwrapJson.registry) {
            this._shrinkwrapJson.registry = '';
        }
        if (!this._shrinkwrapJson.dependencies) {
            this._shrinkwrapJson.dependencies = {};
        }
        if (!this._shrinkwrapJson.specifiers) {
            this._shrinkwrapJson.specifiers = {};
        }
        if (!this._shrinkwrapJson.packages) {
            this._shrinkwrapJson.packages = {};
        }
    }
    /**
     * Returns the version of a dependency being used by a given project
     */
    _getDependencyVersion(dependencyName, tempProjectName) {
        const tempProjectDependencyKey = this._getTempProjectKey(tempProjectName);
        const packageDescription = this._getPackageDescription(tempProjectDependencyKey);
        if (!packageDescription) {
            return undefined;
        }
        if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {
            return undefined;
        }
        return this._normalizeDependencyVersion(dependencyName, packageDescription.dependencies[dependencyName]);
    }
    /**
     * Gets the package description for a tempProject from the shrinkwrap file.
     */
    _getPackageDescription(tempProjectDependencyKey) {
        const packageDescription = BaseShrinkwrapFile_1.BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.packages, tempProjectDependencyKey);
        if (!packageDescription || !packageDescription.dependencies) {
            return undefined;
        }
        return packageDescription;
    }
    _getTempProjectKey(tempProjectName) {
        // Example: "project1"
        const unscopedTempProjectName = node_core_library_1.PackageName.getUnscopedName(tempProjectName);
        return `file:projects/${unscopedTempProjectName}.tgz`;
    }
    _normalizeDependencyVersion(dependencyName, version) {
        // version will be either:
        // A - the version (e.g. "0.0.5")
        // B - a peer dep version (e.g. "/gulp-karma/0.0.5/karma@0.13.22"
        //                           or "/@ms/sp-client-utilities/3.1.1/foo@13.1.0"
        //                           or "/sinon-chai/2.8.0/chai@3.5.0+sinon@1.17.7")
        // C -The dependency path is relative or absolute (e.g., /foo/1.0.0)
        // check to see if this is the special style of specifiers
        // e.g.:  "/gulp-karma/0.0.5/karma@0.13.22" or
        //     or "/@ms/sp-client-utilities/3.1.1/foo@13.1.0"
        // split it by forward slashes, then grab the second group (or the 3rd, if the package name is scoped)
        // if the second group doesn't exist, return the version directly
        if (version) {
            const extractedVersion = extractVersionFromPnpmVersionSpecifier(version);
            if (!extractedVersion) {
                throw new Error(`Cannot parse pnpm shrinkwrap version specifier: `
                    + `"${version}" for "${dependencyName}"`);
            }
            return extractedVersion;
        }
        else {
            return undefined;
        }
    }
}
exports.PnpmShrinkwrapFile = PnpmShrinkwrapFile;

//# sourceMappingURL=PnpmShrinkwrapFile.js.map
