{"version":3,"sources":["cli/logic/pnpm/PnpmShrinkwrapFile.ts"],"names":[],"mappings":"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","file":"PnpmShrinkwrapFile.js","sourcesContent":["import * as fsx from 'fs-extra';\r\nimport * as yaml from 'js-yaml';\r\nimport * as os from 'os';\r\nimport * as semver from 'semver';\r\nimport { PackageName } from '@microsoft/node-core-library';\r\n\r\nimport { BaseShrinkwrapFile } from '../base/BaseShrinkwrapFile';\r\n\r\n// This is based on PNPM's own configuration:\r\n// https://github.com/pnpm/pnpm-shrinkwrap/blob/master/src/write.ts\r\nconst SHRINKWRAP_YAML_FORMAT: yaml.DumpOptions = {\r\n  lineWidth: 1000,\r\n  noCompatMode: true,\r\n  noRefs: true,\r\n  sortKeys: true\r\n};\r\n\r\ninterface IShrinkwrapDependencyJson {\r\n  /** Information about the resolved package */\r\n  resolution: {\r\n    /** The hash of the tarball, to ensure archive integrity */\r\n    integrity: string;\r\n    /** The name of the tarball, if this was from a TGX file */\r\n    tarball?: string;\r\n  };\r\n  /** The list of dependencies and the resolved version */\r\n  dependencies: { [dependency: string]: string };\r\n}\r\n\r\n/**\r\n * This interface represents the raw shrinkwrap.YAML file\r\n * Example:\r\n *  {\r\n *    \"dependencies\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    },\r\n *    \"packages\": {\r\n *      \"file:projects/library1.tgz\": {\r\n *        \"dependencies: {\r\n *          \"markdown\": \"0.5.0\"\r\n *        },\r\n *        \"name\": \"@rush-temp/library1\",\r\n *        \"resolution\": {\r\n *          \"tarball\": \"file:projects/library1.tgz\"\r\n *        },\r\n *        \"version\": \"0.0.0\"\r\n *      },\r\n *      \"markdown/0.5.0\": {\r\n *        \"resolution\": {\r\n *          \"integrity\": \"sha1-KCBbVlqK51kt4gdGPWY33BgnIrI=\"\r\n *        }\r\n *      }\r\n *    },\r\n *    \"registry\": \"http://localhost:4873/\",\r\n *    \"shrinkwrapVersion\": 3,\r\n *    \"specifiers\": {\r\n *      \"@rush-temp/project1\": \"file:./projects/project1.tgz\"\r\n *    }\r\n *  }\r\n */\r\ninterface IShrinkwrapYaml {\r\n  /** The list of resolved version numbers for direct dependencies */\r\n  dependencies: { [dependency: string]: string };\r\n  /** The description of the solved graph */\r\n  packages: { [dependencyVersion: string]: IShrinkwrapDependencyJson };\r\n  /** URL of the registry which was used */\r\n  registry: string;\r\n  /** The list of specifiers used to resolve direct dependency versions */\r\n  specifiers: { [dependency: string]: string };\r\n}\r\n\r\nexport function extractVersionFromPnpmVersionSpecifier(version: string): string | undefined {\r\n  let extractedVersion: string | undefined = undefined;\r\n\r\n  if (!version) {\r\n    return undefined;\r\n  }\r\n\r\n  const versionParts: string[] = version.split('/');\r\n\r\n  // it had no slashes, so we know it is a version like \"0.0.5\"\r\n  if (versionParts.length === 1) {\r\n    extractedVersion = version; // e.g. \"0.0.5\"\r\n  } else {\r\n    const isScoped: boolean = versionParts[1].indexOf('@') === 0;\r\n\r\n    // e.g. \"/gulp-karma/0.0.5/karma@0.13.22\"\r\n    // if it has 4 parts, then it should be unscoped\r\n    if (versionParts.length === 4 && !isScoped) {\r\n      extractedVersion = versionParts[2]; // e.g. \"0.0.5\"\r\n    }\r\n\r\n    // e.g. \"/@ms/sp-client-utilities/3.1.1/foo@13.1.0\"\r\n    // if it has 5 parts, it should be scoped\r\n    if (versionParts.length === 5 && isScoped) {\r\n      extractedVersion = versionParts[3]; // e.g. \"3.1.1\"\r\n    }\r\n\r\n    // e.g. \"path.pkgs.visualstudio.com/@scope/depame/1.4.0\"\r\n    if (!extractedVersion && semver.valid(versionParts[versionParts.length - 1]) !== null) {\r\n      extractedVersion = versionParts[versionParts.length - 1];\r\n    }\r\n  }\r\n\r\n  return extractedVersion;\r\n}\r\n\r\nexport class PnpmShrinkwrapFile extends BaseShrinkwrapFile {\r\n  private _shrinkwrapJson: IShrinkwrapYaml;\r\n\r\n  public static loadFromFile(shrinkwrapYamlFilename: string): PnpmShrinkwrapFile | undefined {\r\n    try {\r\n      if (!fsx.existsSync(shrinkwrapYamlFilename)) {\r\n        return undefined; // file does not exist\r\n      }\r\n\r\n      // We don't use JsonFile/jju here because shrinkwrap.json is a special NPM file format\r\n      // and typically very large, so we want to load it the same way that NPM does.\r\n      const parsedData: IShrinkwrapYaml = yaml.safeLoad(fsx.readFileSync(shrinkwrapYamlFilename).toString());\r\n\r\n      return new PnpmShrinkwrapFile(parsedData);\r\n    } catch (error) {\r\n      throw new Error(`Error reading \"${shrinkwrapYamlFilename}\":` + os.EOL + `  ${error.message}`);\r\n    }\r\n  }\r\n\r\n  public getTempProjectNames(): ReadonlyArray<string> {\r\n    return this._getTempProjectNames(this._shrinkwrapJson.dependencies);\r\n  }\r\n\r\n  /**\r\n   * Serializes the PNPM Shrinkwrap file\r\n   */\r\n  protected serialize(): string {\r\n    return yaml.safeDump(this._shrinkwrapJson, SHRINKWRAP_YAML_FORMAT);\r\n  }\r\n\r\n  /**\r\n   * Gets the version number from the list of top-level dependencies in the \"dependencies\" section\r\n   * of the shrinkwrap file\r\n   */\r\n  protected getTopLevelDependencyVersion(dependencyName: string): string | undefined {\r\n    return BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.dependencies, dependencyName);\r\n  }\r\n\r\n  /**\r\n   * Gets the resolved version number of a dependency for a specific temp project.\r\n   * For PNPM, we can reuse the version that another project is using.\r\n   * Note that this function modifies the shrinkwrap data.\r\n   */\r\n  protected tryEnsureDependencyVersion(dependencyName: string,\r\n    tempProjectName: string,\r\n    versionRange: string): string | undefined {\r\n    // PNPM doesn't have the same advantage of NPM, where we can skip generate as long as the\r\n    // shrinkwrap file puts our dependency in either the top of the node_modules folder\r\n    // or underneath the package we are looking at.\r\n    // This is because the PNPM shrinkwrap file describes the exact links that need to be created\r\n    // to recreate the graph..\r\n    // Because of this, we actually need to check for a version that this package is directly\r\n    // linked to.\r\n\r\n    const tempProjectDependencyKey: string = this._getTempProjectKey(tempProjectName);\r\n    const packageDescription: IShrinkwrapDependencyJson | undefined =\r\n      this._getPackageDescription(tempProjectDependencyKey);\r\n    if (!packageDescription) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {\r\n      if (versionRange) {\r\n        // this means the current temp project doesn't provide this dependency,\r\n        // however, we may be able to use a different version. we prefer the latest version\r\n        let latestVersion: string | undefined = undefined;\r\n\r\n        this.getTempProjectNames().forEach((otherTempProject: string) => {\r\n          const otherVersion: string | undefined = this._getDependencyVersion(dependencyName, otherTempProject);\r\n          if (otherVersion && semver.satisfies(otherVersion, versionRange)) {\r\n            if (!latestVersion || semver.gt(otherVersion, latestVersion)) {\r\n              latestVersion = otherVersion;\r\n            }\r\n          }\r\n        });\r\n\r\n        if (latestVersion) {\r\n          // go ahead and fixup the shrinkwrap file to point at this\r\n          const dependencies: { [key: string]: string } | undefined =\r\n            this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies || {};\r\n          dependencies[dependencyName] = latestVersion;\r\n          this._shrinkwrapJson.packages[tempProjectDependencyKey].dependencies = dependencies;\r\n\r\n          return latestVersion;\r\n        }\r\n      }\r\n\r\n      return undefined;\r\n    }\r\n\r\n    return this._normalizeDependencyVersion(dependencyName, packageDescription.dependencies[dependencyName]);\r\n  }\r\n\r\n  protected checkValidVersionRange(dependencyVersion: string, versionRange: string): boolean { // override\r\n    // dependencyVersion could be a relattive or absolute path, for those cases we\r\n    // need to extract the version from the end of the path.\r\n    return super.checkValidVersionRange(dependencyVersion.split('/').pop()!, versionRange);\r\n  }\r\n\r\n  private constructor(shrinkwrapJson: IShrinkwrapYaml) {\r\n    super();\r\n    this._shrinkwrapJson = shrinkwrapJson;\r\n\r\n    // Normalize the data\r\n    if (!this._shrinkwrapJson.registry) {\r\n      this._shrinkwrapJson.registry = '';\r\n    }\r\n    if (!this._shrinkwrapJson.dependencies) {\r\n      this._shrinkwrapJson.dependencies = { };\r\n    }\r\n    if (!this._shrinkwrapJson.specifiers) {\r\n      this._shrinkwrapJson.specifiers = { };\r\n    }\r\n    if (!this._shrinkwrapJson.packages) {\r\n      this._shrinkwrapJson.packages = { };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the version of a dependency being used by a given project\r\n   */\r\n  private _getDependencyVersion(dependencyName: string, tempProjectName: string): string | undefined {\r\n    const tempProjectDependencyKey: string = this._getTempProjectKey(tempProjectName);\r\n    const packageDescription: IShrinkwrapDependencyJson | undefined =\r\n      this._getPackageDescription(tempProjectDependencyKey);\r\n    if (!packageDescription) {\r\n      return undefined;\r\n    }\r\n\r\n    if (!packageDescription.dependencies.hasOwnProperty(dependencyName)) {\r\n      return undefined;\r\n    }\r\n\r\n    return this._normalizeDependencyVersion(dependencyName, packageDescription.dependencies[dependencyName]);\r\n  }\r\n\r\n  /**\r\n   * Gets the package description for a tempProject from the shrinkwrap file.\r\n   */\r\n  private _getPackageDescription(tempProjectDependencyKey: string): IShrinkwrapDependencyJson | undefined {\r\n    const packageDescription: IShrinkwrapDependencyJson | undefined\r\n      = BaseShrinkwrapFile.tryGetValue(this._shrinkwrapJson.packages, tempProjectDependencyKey);\r\n\r\n    if (!packageDescription || !packageDescription.dependencies) {\r\n      return undefined;\r\n    }\r\n\r\n    return packageDescription;\r\n  }\r\n\r\n  private _getTempProjectKey(tempProjectName: string): string {\r\n    // Example: \"project1\"\r\n    const unscopedTempProjectName: string = PackageName.getUnscopedName(tempProjectName);\r\n    return `file:projects/${unscopedTempProjectName}.tgz`;\r\n  }\r\n\r\n  private _normalizeDependencyVersion(dependencyName: string, version: string): string | undefined {\r\n    // version will be either:\r\n    // A - the version (e.g. \"0.0.5\")\r\n    // B - a peer dep version (e.g. \"/gulp-karma/0.0.5/karma@0.13.22\"\r\n    //                           or \"/@ms/sp-client-utilities/3.1.1/foo@13.1.0\"\r\n    //                           or \"/sinon-chai/2.8.0/chai@3.5.0+sinon@1.17.7\")\r\n    // C -The dependency path is relative or absolute (e.g., /foo/1.0.0)\r\n\r\n    // check to see if this is the special style of specifiers\r\n    // e.g.:  \"/gulp-karma/0.0.5/karma@0.13.22\" or\r\n    //     or \"/@ms/sp-client-utilities/3.1.1/foo@13.1.0\"\r\n    // split it by forward slashes, then grab the second group (or the 3rd, if the package name is scoped)\r\n    // if the second group doesn't exist, return the version directly\r\n    if (version) {\r\n      const extractedVersion: string | undefined = extractVersionFromPnpmVersionSpecifier(version);\r\n\r\n      if (!extractedVersion) {\r\n        throw new Error(`Cannot parse pnpm shrinkwrap version specifier: `\r\n          + `\"${version}\" for \"${dependencyName}\"`);\r\n      }\r\n\r\n      return extractedVersion;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n}"],"sourceRoot":"../../../../../../../src"}