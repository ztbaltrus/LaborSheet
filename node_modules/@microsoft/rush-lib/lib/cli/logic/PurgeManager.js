"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const path = require("path");
const AsyncRecycler_1 = require("../../utilities/AsyncRecycler");
const RushConstants_1 = require("../../RushConstants");
/**
 * This class implements the logic for "rush purge"
 */
class PurgeManager {
    constructor(rushConfiguration) {
        this._rushConfiguration = rushConfiguration;
        const commonAsyncRecyclerPath = path.join(this._rushConfiguration.commonTempFolder, RushConstants_1.RushConstants.rushRecyclerFolderName);
        this._commonTempFolderRecycler = new AsyncRecycler_1.AsyncRecycler(commonAsyncRecyclerPath);
        const rushUserAsyncRecyclerPath = path.join(this._rushConfiguration.rushUserFolder, RushConstants_1.RushConstants.rushRecyclerFolderName);
        this._rushUserFolderRecycler = new AsyncRecycler_1.AsyncRecycler(rushUserAsyncRecyclerPath);
    }
    /**
     * Performs the AsyncRecycler.deleteAll() operation.  This should be called before
     * the PurgeManager instance is disposed.
     */
    deleteAll() {
        this._commonTempFolderRecycler.deleteAll();
        this._rushUserFolderRecycler.deleteAll();
    }
    get commonTempFolderRecycler() {
        return this._commonTempFolderRecycler;
    }
    /**
     * Delete everything from the common/temp folder
     */
    purgeNormal() {
        // Delete everything under common\temp except for the recycler folder itself
        console.log('Purging ' + this._rushConfiguration.commonTempFolder);
        this._commonTempFolderRecycler.moveAllItemsInFolder(this._rushConfiguration.commonTempFolder, this._getMembersToExclude(this._rushConfiguration.commonTempFolder));
    }
    /**
     * In addition to performing the purgeNormal() operation, this method also cleans the
     * .rush folder in the user's home directory.
     */
    purgeUnsafe() {
        this.purgeNormal();
        // Also delete everything under ~/.rush except for the recycler folder itself
        console.log('Purging ' + this._rushConfiguration.rushUserFolder);
        this._rushUserFolderRecycler.moveAllItemsInFolder(this._rushConfiguration.rushUserFolder, this._getMembersToExclude(this._rushConfiguration.rushUserFolder));
    }
    _getMembersToExclude(folderToRecycle) {
        // Don't recycle the recycler
        const membersToExclude = [RushConstants_1.RushConstants.rushRecyclerFolderName];
        // If the current process is running inside one of the folders, don't recycle that either
        // Example: "/home/user/.rush/rush-1.2.3/lib/example.js"
        const currentFolderPath = path.resolve(__dirname);
        // Example:
        // folderToRecycle = "/home/user/.rush"
        // relative =  "rush-1.2.3/lib/example.js"
        const relative = path.relative(folderToRecycle, currentFolderPath);
        // (The result can be an absolute path if the two folders are on different drive letters)
        if (!path.isAbsolute(relative)) {
            // Get the first path segment:
            const firstPart = relative.split(/[\\\/]/)[0];
            if (firstPart.length > 0 && firstPart !== '..') {
                membersToExclude.push(firstPart);
                // Warn that we won't dispose this folder
                console.log(colors.yellow('The active process\'s folder will not be deleted: '
                    + path.join(folderToRecycle, firstPart)));
            }
        }
        return membersToExclude;
    }
}
exports.PurgeManager = PurgeManager;

//# sourceMappingURL=PurgeManager.js.map
