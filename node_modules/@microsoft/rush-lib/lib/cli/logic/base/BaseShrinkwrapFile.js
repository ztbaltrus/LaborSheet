"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const colors = require("colors");
const fsx = require("fs-extra");
const semver = require("semver");
const npmPackageArg = require("npm-package-arg");
const node_core_library_1 = require("@microsoft/node-core-library");
const RushConstants_1 = require("../../../RushConstants");
/**
 * This class is a parser for both npm's npm-shrinkwrap.json and pnpm's shrinkwrap.yaml file formats.
 */
class BaseShrinkwrapFile {
    constructor() {
        this._alreadyWarnedSpecs = new Set();
    }
    static tryGetValue(dictionary, key) {
        if (dictionary.hasOwnProperty(key)) {
            return dictionary[key];
        }
        return undefined;
    }
    /**
     * Serializes and saves the shrinkwrap file to specified location
     */
    save(filePath) {
        fsx.writeFileSync(filePath, this.serialize());
    }
    /**
     * Returns true if the shrinkwrap file includes a top-level package that would satisfy the specified
     * package name and SemVer version range
     */
    hasCompatibleTopLevelDependency(dependencyName, versionRange) {
        const dependencyVersion = this.getTopLevelDependencyVersion(dependencyName);
        if (!dependencyVersion) {
            return false;
        }
        return this._checkDependencyVerson(dependencyName, versionRange, dependencyVersion);
    }
    /**
     * Returns true if the shrinkwrap file includes a package that would satisfying the specified
     * package name and SemVer version range.  By default, the dependencies are resolved by looking
     * at the root of the node_modules folder described by the shrinkwrap file.  However, if
     * tempProjectName is specified, then the resolution will start in that subfolder.
     *
     * Consider this example:
     *
     * - node_modules\
     *   - temp-project\
     *     - lib-a@1.2.3
     *     - lib-b@1.0.0
     *   - lib-b@2.0.0
     *
     * In this example, hasCompatibleDependency("lib-b", ">= 1.1.0", "temp-project") would fail
     * because it finds lib-b@1.0.0 which does not satisfy the pattern ">= 1.1.0".
     */
    tryEnsureCompatibleDependency(dependencyName, versionRange, tempProjectName) {
        const dependencyVersion = this.tryEnsureDependencyVersion(dependencyName, tempProjectName, versionRange);
        if (!dependencyVersion) {
            return false;
        }
        return this._checkDependencyVerson(dependencyName, versionRange, dependencyVersion);
    }
    _getTempProjectNames(dependencies) {
        const result = [];
        for (const key of Object.keys(dependencies)) {
            // If it starts with @rush-temp, then include it:
            if (node_core_library_1.PackageName.getScope(key) === RushConstants_1.RushConstants.rushTempNpmScope) {
                result.push(key);
            }
        }
        result.sort(); // make the result deterministic
        return result;
    }
    checkValidVersionRange(dependencyVersion, versionRange) {
        // If it's a SemVer pattern, then require that the shrinkwrapped version must be compatible
        return semver.satisfies(dependencyVersion, versionRange);
    }
    _checkDependencyVerson(dependencyName, versionRange, dependencyVersion) {
        const result = npmPackageArg.resolve(dependencyName, versionRange);
        switch (result.type) {
            case 'version':
            case 'range':
                return this.checkValidVersionRange(dependencyVersion, versionRange);
            default:
                // Only warn once for each spec
                if (!this._alreadyWarnedSpecs.has(result.rawSpec)) {
                    this._alreadyWarnedSpecs.add(result.rawSpec);
                    console.log(colors.yellow(`WARNING: Not validating ${result.type}-based specifier: "${result.rawSpec}"`));
                }
                return true;
        }
    }
}
exports.BaseShrinkwrapFile = BaseShrinkwrapFile;

//# sourceMappingURL=BaseShrinkwrapFile.js.map
