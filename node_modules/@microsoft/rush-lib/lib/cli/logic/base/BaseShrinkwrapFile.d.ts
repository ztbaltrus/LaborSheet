/**
 * This class is a parser for both npm's npm-shrinkwrap.json and pnpm's shrinkwrap.yaml file formats.
 */
export declare abstract class BaseShrinkwrapFile {
    protected _alreadyWarnedSpecs: Set<string>;
    protected static tryGetValue<T>(dictionary: {
        [key2: string]: T;
    }, key: string): T | undefined;
    /**
     * Serializes and saves the shrinkwrap file to specified location
     */
    save(filePath: string): void;
    /**
     * Returns true if the shrinkwrap file includes a top-level package that would satisfy the specified
     * package name and SemVer version range
     */
    hasCompatibleTopLevelDependency(dependencyName: string, versionRange: string): boolean;
    /**
     * Returns true if the shrinkwrap file includes a package that would satisfying the specified
     * package name and SemVer version range.  By default, the dependencies are resolved by looking
     * at the root of the node_modules folder described by the shrinkwrap file.  However, if
     * tempProjectName is specified, then the resolution will start in that subfolder.
     *
     * Consider this example:
     *
     * - node_modules\
     *   - temp-project\
     *     - lib-a@1.2.3
     *     - lib-b@1.0.0
     *   - lib-b@2.0.0
     *
     * In this example, hasCompatibleDependency("lib-b", ">= 1.1.0", "temp-project") would fail
     * because it finds lib-b@1.0.0 which does not satisfy the pattern ">= 1.1.0".
     */
    tryEnsureCompatibleDependency(dependencyName: string, versionRange: string, tempProjectName: string): boolean;
    /**
     * Returns the list of temp projects defined in this file.
     * Example: [ '@rush-temp/project1', '@rush-temp/project2' ]
     */
    abstract getTempProjectNames(): ReadonlyArray<string>;
    protected abstract tryEnsureDependencyVersion(dependencyName: string, tempProjectName: string, versionRange: string): string | undefined;
    protected abstract getTopLevelDependencyVersion(dependencyName: string): string | undefined;
    protected abstract serialize(): string;
    protected _getTempProjectNames(dependencies: {
        [key: string]: {};
    }): ReadonlyArray<string>;
    protected checkValidVersionRange(dependencyVersion: string, versionRange: string): boolean;
    private _checkDependencyVerson(dependencyName, versionRange, dependencyVersion);
}
