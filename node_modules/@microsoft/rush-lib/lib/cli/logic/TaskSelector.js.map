{"version":3,"sources":["cli/logic/TaskSelector.ts"],"names":[],"mappings":";;AAKA,oEAAwD;AAExD,yDAAsD;AACtD,2DAAwD;AACxD,mEAAgE;AAehE;;;;;;;GAOG;AACH;IAOE,YAAY,OAAiC;QAC3C,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QAExB,IAAI,CAAC,sBAAsB,GAAG,IAAI,6CAAqB,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACnF,IAAI,CAAC,WAAW,GAAG,IAAI,uBAAU,CAC/B,IAAI,CAAC,QAAQ,CAAC,WAAW,EACzB,IAAI,CAAC,QAAQ,CAAC,WAAW,EACzB,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QAErC,IAAI,CAAC;YACH,IAAI,CAAC,aAAa,GAAG,4BAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,CAAC;QAC3F,CAAC;QAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,oBAAoB,IAAI;kBACvF,+CAA+C,CAAC,CAAC;QACvD,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QACnD,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/E,IAAI,CAAC,YAAY,EAAE,CAAC;QACtB,CAAC;IACH,CAAC;IAEM,OAAO;QACZ,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IACpC,CAAC;IAEO,gBAAgB,CAAC,OAA8B;QACrD,GAAG,CAAC,CAAC,MAAM,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC;YAC7B,MAAM,SAAS,GACb,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,MAAM,CAAC,CAAC;YACrE,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACf,MAAM,IAAI,KAAK,CAAC,gBAAgB,MAAM,+BAA+B,CAAC,CAAC;YACzE,CAAC;YAED,MAAM,IAAI,GAAgB,IAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;YAE9E,wCAAwC;YACxC,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAE/F,kDAAkD;YAClD,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,GAAG,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACvG,CAAC;IACH,CAAC;IAEO,kBAAkB,CAAC,SAAgC;QACzD,GAAG,CAAC,CAAC,MAAM,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC;YACjC,MAAM,WAAW,GACb,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;YACzE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;gBACjB,MAAM,IAAI,KAAK,CAAC,gBAAgB,QAAQ,+BAA+B,CAAC,CAAC;YAC3E,CAAC;YAED,oGAAoG;YACpG,IAAI,CAAC,oBAAoB,EAAE,CAAC;YAE5B,iFAAiF;YACjF,MAAM,UAAU,GAAgB,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YACpF,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;YAExC,qCAAqC;YACrC,UAAU,CAAC,OAAO,CAAC,SAAS;gBAC1B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,CAAC;YAClF,CAAC,CAAC,CAAC;YAEH,2EAA2E;YAC3E,mGAAmG;YACnG,UAAU,CAAC,OAAO,CAAC,SAAS,IAC1B,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,SAAS,EACxC,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC;IAEO,YAAY;QAClB,qBAAqB;QACrB,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnE,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;QAClC,CAAC;QAED,uBAAuB;QACvB,GAAG,CAAC,CAAC,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,WAAW,EAAE,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAC5F,CAAC;IACH,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,OAAe;QAC7C,MAAM,IAAI,GAAgB,IAAI,GAAG,CAAS,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;QAClF,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/F,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAClB,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;OAEG;IACK,qBAAqB,CAAC,OAAe;QAC3C,MAAM,IAAI,GAAgB,IAAI,GAAG,EAAU,CAAC;QAC5C,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,IAAI,GAAG,EAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG;YAClE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAChB,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC7F,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACK,oBAAoB;QAC1B,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAuB,CAAC;QAErD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,OAAO;YACxD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG;gBAChD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAClC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC;gBAClD,CAAC;gBACD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,aAAa,CAAC,OAA6C;QACjE,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACZ,MAAM,WAAW,GAAgB,IAAI,yBAAW,CAAC;gBAC/C,WAAW,EAAE,OAAO;gBACpB,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,iBAAiB;gBAClD,YAAY,EAAE,IAAI,CAAC,QAAQ,CAAC,YAAY;gBACxC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW;gBACtC,yBAAyB,EAAE,IAAI,CAAC,QAAQ,CAAC,yBAAyB;gBAClE,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC,mBAAmB;gBACtD,qBAAqB,EAAE,IAAI,CAAC,sBAAsB;aACnD,CAAC,CAAC;YAEH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChD,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YACxC,CAAC;QACH,CAAC;IACH,CAAC;CACF;AAxJD,oCAwJC","file":"TaskSelector.js","sourcesContent":["import {\r\n  RushConfiguration,\r\n  IRushLinkJson\r\n} from '../../data/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../data/RushConfigurationProject';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nimport { TaskRunner } from '../taskRunner/TaskRunner';\r\nimport { ProjectTask } from '../taskRunner/ProjectTask';\r\nimport { PackageChangeAnalyzer } from './PackageChangeAnalyzer';\r\n\r\nexport interface ITaskSelectorConstructor {\r\n  rushConfiguration: RushConfiguration;\r\n  toFlags: ReadonlyArray<string>;\r\n  fromFlags: ReadonlyArray<string>;\r\n  commandToRun: string;\r\n  customFlags: string[];\r\n  isQuietMode: boolean;\r\n  parallelism: string | undefined;\r\n  isIncrementalBuildAllowed: boolean;\r\n  changedProjectsOnly: boolean;\r\n  ignoreMissingScript: boolean;\r\n}\r\n\r\n/**\r\n * This class is responsible for:\r\n *  - based on to/from flags, solving the dependency graph and figuring out which projects need to be run\r\n *  - creating a ProjectTask for each project that needs to be built\r\n *  - registering the necessary ProjectTasks with the TaskRunner, which actually orchestrates execution\r\n *\r\n * This class is currently only used by CustomRushAction\r\n */\r\nexport class TaskSelector {\r\n  private _taskRunner: TaskRunner;\r\n  private _dependentList: Map<string, Set<string>>;\r\n  private _rushLinkJson: IRushLinkJson;\r\n  private _options: ITaskSelectorConstructor;\r\n  private _packageChangeAnalyzer: PackageChangeAnalyzer;\r\n\r\n  constructor(options: ITaskSelectorConstructor) {\r\n    this._options = options;\r\n\r\n    this._packageChangeAnalyzer = new PackageChangeAnalyzer(options.rushConfiguration);\r\n    this._taskRunner = new TaskRunner(\r\n      this._options.isQuietMode,\r\n      this._options.parallelism,\r\n      this._options.changedProjectsOnly);\r\n\r\n    try {\r\n      this._rushLinkJson = JsonFile.load(this._options.rushConfiguration.rushLinkJsonFilename);\r\n    } catch (error) {\r\n      throw new Error(`Could not read \"${this._options.rushConfiguration.rushLinkJsonFilename}\".`\r\n        + ` Did you run \"rush install\" or \"rush update\"?`);\r\n    }\r\n\r\n    if (this._options.toFlags.length > 0) {\r\n      this._registerToFlags(this._options.toFlags);\r\n    }\r\n    if (this._options.fromFlags.length > 0) {\r\n      this._registerFromFlags(this._options.fromFlags);\r\n    }\r\n    if (this._options.toFlags.length === 0 && this._options.fromFlags.length === 0) {\r\n      this._registerAll();\r\n    }\r\n  }\r\n\r\n  public execute(): Promise<void> {\r\n    return this._taskRunner.execute();\r\n  }\r\n\r\n  private _registerToFlags(toFlags: ReadonlyArray<string>): void {\r\n    for (const toFlag of toFlags) {\r\n      const toProject: RushConfigurationProject | undefined =\r\n        this._options.rushConfiguration.findProjectByShorthandName(toFlag);\r\n      if (!toProject) {\r\n        throw new Error(`The project '${toFlag}' does not exist in rush.json`);\r\n      }\r\n\r\n      const deps: Set<string> = this._collectAllDependencies(toProject.packageName);\r\n\r\n      // Register any dependencies it may have\r\n      deps.forEach(dep => this._registerTask(this._options.rushConfiguration.getProjectByName(dep)));\r\n\r\n      // Register the dependency graph to the TaskRunner\r\n      deps.forEach(dep => this._taskRunner.addDependencies(dep, this._rushLinkJson.localLinks[dep] || []));\r\n    }\r\n  }\r\n\r\n  private _registerFromFlags(fromFlags: ReadonlyArray<string>): void {\r\n    for (const fromFlag of fromFlags) {\r\n      const fromProject: RushConfigurationProject | undefined\r\n        = this._options.rushConfiguration.findProjectByShorthandName(fromFlag);\r\n      if (!fromProject) {\r\n        throw new Error(`The project '${fromFlag}' does not exist in rush.json`);\r\n      }\r\n\r\n      // Only register projects which depend on the current package, as well as things that depend on them\r\n      this._buildDependentGraph();\r\n\r\n      // We will assume this project will be built, but act like it has no dependencies\r\n      const dependents: Set<string> = this._collectAllDependents(fromProject.packageName);\r\n      dependents.add(fromProject.packageName);\r\n\r\n      // Register all downstream dependents\r\n      dependents.forEach(dependent => {\r\n        this._registerTask(this._options.rushConfiguration.getProjectByName(dependent));\r\n      });\r\n\r\n      // Only register dependencies graph for projects which have been registered\r\n      // e.g. package C may depend on A & B, but if we are only building A's downstream, we will ignore B\r\n      dependents.forEach(dependent =>\r\n        this._taskRunner.addDependencies(dependent,\r\n          (this._rushLinkJson.localLinks[dependent] || []).filter(dep => dependents.has(dep))));\r\n    }\r\n  }\r\n\r\n  private _registerAll(): void {\r\n    // Register all tasks\r\n    for (const rushProject of this._options.rushConfiguration.projects) {\r\n      this._registerTask(rushProject);\r\n    }\r\n\r\n    // Add all dependencies\r\n    for (const projectName of Object.keys(this._rushLinkJson.localLinks)) {\r\n      this._taskRunner.addDependencies(projectName, this._rushLinkJson.localLinks[projectName]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collects all upstream dependencies for a certain project\r\n   */\r\n  private _collectAllDependencies(project: string): Set<string> {\r\n    const deps: Set<string> = new Set<string>(this._rushLinkJson.localLinks[project]);\r\n    deps.forEach(dep => this._collectAllDependencies(dep).forEach(innerDep => deps.add(innerDep)));\r\n    deps.add(project);\r\n    return deps;\r\n  }\r\n\r\n  /**\r\n   * Collects all downstream dependents of a certain project\r\n   */\r\n  private _collectAllDependents(project: string): Set<string> {\r\n    const deps: Set<string> = new Set<string>();\r\n    (this._dependentList.get(project) || new Set<string>()).forEach((dep) => {\r\n      deps.add(dep);\r\n    });\r\n    deps.forEach(dep => this._collectAllDependents(dep).forEach(innerDep => deps.add(innerDep)));\r\n    return deps;\r\n  }\r\n\r\n  /**\r\n   * Inverts the localLinks to arrive at the dependent graph, rather than using the dependency graph\r\n   * this helps when using the --from flag\r\n   */\r\n  private _buildDependentGraph(): void {\r\n    this._dependentList = new Map<string, Set<string>>();\r\n\r\n    Object.keys(this._rushLinkJson.localLinks).forEach(project => {\r\n      this._rushLinkJson.localLinks[project].forEach(dep => {\r\n        if (!this._dependentList.has(dep)) {\r\n          this._dependentList.set(dep, new Set<string>());\r\n        }\r\n        this._dependentList.get(dep)!.add(project);\r\n      });\r\n    });\r\n  }\r\n\r\n  private _registerTask(project: RushConfigurationProject | undefined): void {\r\n    if (project) {\r\n      const projectTask: ProjectTask = new ProjectTask({\r\n        rushProject: project,\r\n        rushConfiguration: this._options.rushConfiguration,\r\n        commandToRun: this._options.commandToRun,\r\n        customFlags: this._options.customFlags,\r\n        isIncrementalBuildAllowed: this._options.isIncrementalBuildAllowed,\r\n        ignoreMissingScript: this._options.ignoreMissingScript,\r\n        packageChangeAnalyzer: this._packageChangeAnalyzer\r\n      });\r\n\r\n      if (!this._taskRunner.hasTask(projectTask.name)) {\r\n        this._taskRunner.addTask(projectTask);\r\n      }\r\n    }\r\n  }\r\n}"],"sourceRoot":"../../../../../src"}