{"version":3,"sources":["cli/actions/PublishAction.ts"],"names":[],"mappings":"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","file":"PublishAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport { EOL } from 'os';\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport {\r\n  IChangeInfo,\r\n  ChangeType\r\n} from '../../data/ChangeManagement';\r\nimport { RushConfigurationProject } from '../../data/RushConfigurationProject';\r\nimport { Npm } from '../../utilities/Npm';\r\nimport { RushCommandLineParser } from './RushCommandLineParser';\r\nimport { PublishUtilities } from '../logic/PublishUtilities';\r\nimport { ChangelogGenerator } from '../logic/ChangelogGenerator';\r\nimport { GitPolicy } from '../logic/GitPolicy';\r\nimport { PrereleaseToken } from '../logic/PrereleaseToken';\r\nimport { ChangeManager } from '../logic/ChangeManager';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { Git } from '../logic/Git';\r\nimport { VersionControl } from '../../utilities/VersionControl';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\n\r\nexport class PublishAction extends BaseRushAction {\r\n  private _addCommitDetails: CommandLineFlagParameter;\r\n  private _apply: CommandLineFlagParameter;\r\n  private _includeAll: CommandLineFlagParameter;\r\n  private _npmAuthToken: CommandLineStringParameter;\r\n  private _npmTag: CommandLineStringParameter;\r\n  private _publish: CommandLineFlagParameter;\r\n  private _regenerateChangelogs: CommandLineFlagParameter;\r\n  private _registryUrl: CommandLineStringParameter;\r\n  private _targetBranch: CommandLineStringParameter;\r\n  private _prereleaseName: CommandLineStringParameter;\r\n  private _suffix: CommandLineStringParameter;\r\n  private _force: CommandLineFlagParameter;\r\n  private _prereleaseToken: PrereleaseToken;\r\n  private _versionPolicy: CommandLineStringParameter;\r\n\r\n  private _releaseFolder: CommandLineStringParameter;\r\n  private _pack: CommandLineFlagParameter;\r\n  private _releaseType: CommandLineStringParameter;\r\n\r\n  private _hotfixTagOverride: string;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'publish',\r\n      summary: 'Reads and processes package publishing change requests generated by \"rush change\".',\r\n      documentation:\r\n      'Reads and processes package publishing change requests generated by \"rush change\". This will perform a ' +\r\n      'read-only operation by default, printing operations executed to the console. To commit ' +\r\n      'changes and publish packages, you must use the --commit flag and/or the --publish flag.',\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._apply = this.defineFlagParameter({\r\n      parameterLongName: '--apply',\r\n      parameterShortName: '-a',\r\n      description: 'If this flag is specified, the change requests will be applied to package.json files.'\r\n    });\r\n    this._targetBranch = this.defineStringParameter({\r\n      parameterLongName: '--target-branch',\r\n      parameterShortName: '-b',\r\n      argumentName: 'BRANCH',\r\n      description:\r\n      'If this flag is specified, applied changes and deleted change requests will be' +\r\n      'committed and merged into the target branch.'\r\n    });\r\n    this._publish = this.defineFlagParameter({\r\n      parameterLongName: '--publish',\r\n      parameterShortName: '-p',\r\n      description: 'If this flag is specified, applied changes will be published to npm.'\r\n    });\r\n    this._addCommitDetails = this.defineFlagParameter({\r\n      parameterLongName: '--add-commit-details',\r\n      parameterShortName: undefined,\r\n      description: 'Adds commit author and hash to the changelog.json files for each change.'\r\n    });\r\n    this._regenerateChangelogs = this.defineFlagParameter({\r\n      parameterLongName: '--regenerate-changelogs',\r\n      parameterShortName: undefined,\r\n      description: 'Regenerates all changelog files based on the current JSON content.'\r\n    });\r\n\r\n    // NPM registry related parameters\r\n    this._registryUrl = this.defineStringParameter({\r\n      parameterLongName: '--registry',\r\n      parameterShortName: '-r',\r\n      argumentName: 'REGISTRY',\r\n      description:\r\n      `Publishes to a specified NPM registry. If this is specified, it will prevent the current commit will not be ` +\r\n      'tagged.'\r\n    });\r\n    this._npmAuthToken = this.defineStringParameter({\r\n      parameterLongName: '--npm-auth-token',\r\n      parameterShortName: '-n',\r\n      argumentName: 'TOKEN',\r\n      description:\r\n      'Provide the default scope NPM auth token to be passed into npm publish for global package publishing.'\r\n    });\r\n    this._npmTag = this.defineStringParameter({\r\n      parameterLongName: '--tag',\r\n      parameterShortName: '-t',\r\n      argumentName: 'TAG',\r\n      description:\r\n      `The tag option to pass to npm publish. By default NPM will publish using the 'latest' tag, even if ` +\r\n      `the package is older than the current latest, so in publishing workflows for older releases, providing ` +\r\n      `a tag is important. When hotfix changes are made, this parameter defaults to 'hotfix'.`\r\n    });\r\n\r\n    // NPM pack tarball related parameters\r\n    this._pack = this.defineFlagParameter({\r\n      parameterLongName: '--pack',\r\n      description:\r\n        `Packs projects into tarballs instead of publishing to npm repository. It can only be used when ` +\r\n        `--include-all is specified. If this flag is specified, NPM registry related parameters will be ignored.`\r\n    });\r\n    this._releaseFolder = this.defineStringParameter({\r\n      parameterLongName: '--release-folder',\r\n      argumentName: 'FOLDER',\r\n      description:\r\n      `This parameter is used with --pack parameter to provide customized location for the tarballs instead of ` +\r\n      `the default value. `\r\n    });\r\n    this._releaseType = this.defineStringParameter({\r\n      parameterLongName: '--release-type',\r\n      argumentName: 'RELEASE_TYPE',\r\n      description:\r\n      `This parameter is used with --pack parameter to provide release type for the generated tarballs. ` +\r\n      `The default value is 'internal'. The valid values include 'public', 'beta', 'internal'`\r\n    });\r\n    // End of NPM pack tarball related parameters\r\n\r\n    this._includeAll = this.defineFlagParameter({\r\n      parameterLongName: '--include-all',\r\n      parameterShortName: undefined,\r\n      description: 'If this flag is specified, all packages with shouldPublish=true in rush.json ' +\r\n      'or with a specified version policy ' +\r\n      'will be published if their version is newer than published version.'\r\n    });\r\n    this._versionPolicy = this.defineStringParameter({\r\n      parameterLongName: '--version-policy',\r\n      argumentName: 'POLICY',\r\n      description: 'Version policy name. Only projects with this version policy will be published if used ' +\r\n      'with --include-all.'\r\n    });\r\n    this._prereleaseName = this.defineStringParameter({\r\n      parameterLongName: '--prerelease-name',\r\n      argumentName: 'NAME',\r\n      description: 'Bump up to a prerelease version with the provided prerelease name. Cannot be used with --suffix'\r\n    });\r\n    this._suffix = this.defineStringParameter({\r\n      parameterLongName: '--suffix',\r\n      argumentName: 'SUFFIX',\r\n      description: 'Append a suffix to all changed versions. Cannot be used with --prerelease-name.'\r\n    });\r\n    this._force = this.defineFlagParameter({\r\n      parameterLongName: '--force',\r\n      parameterShortName: undefined,\r\n      description: 'If this flag is specified with --publish, packages will be published with --force on npm'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes the publish action, which will read change request files, apply changes to package.jsons,\r\n   */\r\n  protected run(): Promise<void> {\r\n    if (!GitPolicy.check(this.rushConfiguration)) {\r\n      process.exit(1);\r\n      return Promise.resolve();\r\n    }\r\n    const allPackages: Map<string, RushConfigurationProject> = this.rushConfiguration.projectsByName;\r\n\r\n    if (this._regenerateChangelogs.value) {\r\n      console.log('Regenerating changelogs');\r\n      ChangelogGenerator.regenerateChangelogs(allPackages, this.rushConfiguration);\r\n      return Promise.resolve();\r\n    }\r\n\r\n    this._validate();\r\n\r\n    if (this._includeAll.value) {\r\n      this._publishAll(allPackages);\r\n    } else {\r\n      this._prereleaseToken = new PrereleaseToken(this._prereleaseName.value, this._suffix.value);\r\n      this._publishChanges(allPackages);\r\n    }\r\n\r\n    console.log(EOL + colors.green('Rush publish finished successfully.'));\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Validate some input parameters\r\n   */\r\n  private _validate(): void {\r\n    if (this._pack.value && !this._includeAll.value) {\r\n      throw new Error('--pack can only be used with --include-all');\r\n    }\r\n    if (this._releaseFolder.value && !this._pack.value) {\r\n      throw new Error(`--release-folder can only be used with --pack`);\r\n    }\r\n    if (this._releaseType.value && !this._pack.value) {\r\n      throw new Error(`--release-type can only be used with --pack`);\r\n    }\r\n    if (this._registryUrl.value && this._pack.value) {\r\n      throw new Error(`--registry cannot be used with --pack`);\r\n    }\r\n  }\r\n\r\n  private _publishChanges(allPackages: Map<string, RushConfigurationProject>): void {\r\n    const changeManager: ChangeManager = new ChangeManager(this.rushConfiguration);\r\n    changeManager.load(this.rushConfiguration.changesFolder,\r\n      this._prereleaseToken,\r\n      this._addCommitDetails.value);\r\n\r\n    if (changeManager.hasChanges()) {\r\n      const orderedChanges: IChangeInfo[] = changeManager.changes;\r\n      const git: Git = new Git(this._targetBranch.value);\r\n      const tempBranch: string = 'publish-' + new Date().getTime();\r\n\r\n      // Make changes in temp branch.\r\n      git.checkout(tempBranch, true);\r\n\r\n      // Make changes to package.json and change logs.\r\n      changeManager.apply(this._apply.value);\r\n      changeManager.updateChangelog(this._apply.value);\r\n\r\n      if (VersionControl.hasUncommittedChanges()) {\r\n        // Stage, commit, and push the changes to remote temp branch.\r\n        git.addChanges();\r\n        git.commit();\r\n        git.push(tempBranch);\r\n\r\n        // Override tag parameter if there is a hotfix change.\r\n        for (const change of orderedChanges) {\r\n          if (change.changeType === ChangeType.hotfix) {\r\n            this._hotfixTagOverride = 'hotfix';\r\n            break;\r\n          }\r\n        }\r\n\r\n        // npm publish the things that need publishing.\r\n        for (const change of orderedChanges) {\r\n          if (change.changeType && change.changeType > ChangeType.dependency) {\r\n            const project: RushConfigurationProject | undefined = allPackages.get(change.packageName);\r\n            if (project) {\r\n              this._npmPublish(change.packageName, project.projectFolder);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Create and push appropriate git tags.\r\n        this._gitAddTags(git, orderedChanges);\r\n        git.push(tempBranch);\r\n\r\n        // Now merge to target branch.\r\n        git.checkout(this._targetBranch.value);\r\n        git.pull();\r\n        git.merge(tempBranch);\r\n        git.push(this._targetBranch.value);\r\n        git.deleteBranch(tempBranch);\r\n      } else {\r\n        git.checkout(this._targetBranch.value);\r\n        git.deleteBranch(tempBranch, false);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _publishAll(allPackages: Map<string, RushConfigurationProject>): void {\r\n    console.log(`Rush publish starts with includeAll and version policy ${this._versionPolicy.value}`);\r\n\r\n    let updated: boolean = false;\r\n    const git: Git = new Git(this._targetBranch.value);\r\n\r\n    allPackages.forEach((packageConfig, packageName) => {\r\n      if (packageConfig.shouldPublish &&\r\n        (!this._versionPolicy.value || this._versionPolicy.value === packageConfig.versionPolicyName)\r\n      ) {\r\n        if (this._pack.value) {\r\n          // packs to tarball instead of publishing to NPM repository\r\n          this._npmPack(packageName, packageConfig);\r\n        } else if (this._force.value || !this._packageExists(packageConfig)) {\r\n          // Publish to npm repository\r\n          this._npmPublish(packageName, packageConfig.projectFolder);\r\n          git.addTag(!!this._publish.value && !this._registryUrl.value, packageName, packageConfig.packageJson.version);\r\n          updated = true;\r\n        } else {\r\n          console.log(`Skip ${packageName}. Not updated.`);\r\n        }\r\n      }\r\n    });\r\n    if (updated) {\r\n      git.push(this._targetBranch.value);\r\n    }\r\n  }\r\n\r\n  private _gitAddTags(git: Git, orderedChanges: IChangeInfo[]): void {\r\n    for (const change of orderedChanges) {\r\n      if (\r\n        change.changeType &&\r\n        change.changeType > ChangeType.dependency &&\r\n        this.rushConfiguration.projectsByName.get(change.packageName)!.shouldPublish\r\n      ) {\r\n        git.addTag(!!this._publish.value && !this._registryUrl.value, change.packageName, change.newVersion!);\r\n      }\r\n    }\r\n  }\r\n\r\n  private _npmPublish(packageName: string, packagePath: string): void {\r\n    const env: { [key: string]: string | undefined } = PublishUtilities.getEnvArgs();\r\n    const args: string[] = ['publish'];\r\n\r\n    if (this.rushConfiguration.projectsByName.get(packageName)!.shouldPublish) {\r\n      let registry: string = '//registry.npmjs.org/';\r\n      if (this._registryUrl.value) {\r\n        const registryUrl: string = this._registryUrl.value;\r\n        env['npm_config_registry'] = registryUrl; // tslint:disable-line:no-string-literal\r\n        registry = registryUrl.substring(registryUrl.indexOf('//'));\r\n      }\r\n\r\n      if (this._npmAuthToken.value) {\r\n        args.push(`--${registry}:_authToken=${this._npmAuthToken.value}`);\r\n      }\r\n\r\n      if (this._npmTag.value) {\r\n        args.push(`--tag`, this._npmTag.value);\r\n      } else if (this._hotfixTagOverride) {\r\n        args.push(`--tag`, this._hotfixTagOverride);\r\n      }\r\n\r\n      if (this._force.value) {\r\n        args.push(`--force`);\r\n      }\r\n\r\n      PublishUtilities.execCommand(\r\n        !!this._publish.value,\r\n        this.rushConfiguration.packageManagerToolFilename,\r\n        args,\r\n        packagePath,\r\n        env);\r\n    }\r\n  }\r\n\r\n  private _packageExists(packageConfig: RushConfigurationProject): boolean {\r\n    const env: { [key: string]: string | undefined } = PublishUtilities.getEnvArgs();\r\n    if (this._registryUrl.value) {\r\n      env['npm_config_registry'] = this._registryUrl.value; // tslint:disable-line:no-string-literal\r\n    }\r\n    const publishedVersions: string[] = Npm.publishedVersions(packageConfig.packageName,\r\n      packageConfig.projectFolder,\r\n      env);\r\n    return publishedVersions.indexOf(packageConfig.packageJson.version) >= 0;\r\n  }\r\n\r\n  private _npmPack(packageName: string, project: RushConfigurationProject): void {\r\n    const args: string[] = ['pack'];\r\n    const env: { [key: string]: string | undefined } = PublishUtilities.getEnvArgs();\r\n\r\n    if (this._releaseType.value && this._releaseType.value !== 'internal') {\r\n      // a temporary workaround. Will replace it with npm or rush hooks.\r\n      if (this._releaseType.value !== 'public' && this._releaseType.value !== 'beta') {\r\n        throw new Error(`Invalid release type \"${this._releaseType.value}\"`);\r\n      }\r\n      this._updateAPIFile(packageName, project);\r\n    }\r\n\r\n    PublishUtilities.execCommand(\r\n      !!this._publish.value,\r\n      this.rushConfiguration.packageManagerToolFilename,\r\n      args,\r\n      project.projectFolder,\r\n      env\r\n    );\r\n\r\n    if (!!this._publish.value) {\r\n      // Copy the tarball the release folder\r\n      const tarballName: string = this._calculateTarballName(project);\r\n      const tarballPath: string = path.join(project.projectFolder, tarballName);\r\n      const destFolder: string = this._releaseFolder.value ?\r\n       this._releaseFolder.value : path.join(this.rushConfiguration.commonTempFolder, 'artifacts', 'packages');\r\n\r\n      fsx.copySync(tarballPath, path.join(destFolder, tarballName));\r\n      fsx.unlinkSync(tarballPath);\r\n    }\r\n  }\r\n\r\n  private _updateAPIFile(packageName: string, project: RushConfigurationProject): void {\r\n    const apiConfigPath: string = path.join(project.projectFolder,\r\n      'config', 'api-extractor.json');\r\n\r\n    if (fsx.existsSync(apiConfigPath)) {\r\n      // Read api-extractor.json file\r\n      const apiConfig: {} = JsonFile.load(apiConfigPath);\r\n      /* tslint:disable:no-string-literal */\r\n      if (!!apiConfig['generateDtsRollup'] &&  !!apiConfig['dtsRollupTrimming']) {\r\n        // copy all files from publishFolderForPublic or publishFolderForBeta to publishFolderForInternal\r\n        const toApiFolder: string = !!apiConfig['publishFolderForInternal'] ?\r\n          apiConfig['publishFolderForInternal'] : './dist';\r\n        let fromApiFolder: string | undefined = undefined;\r\n        if (this._releaseType.value === 'public') {\r\n          fromApiFolder = !!apiConfig['publishFolderForPublic'] ?\r\n            apiConfig['publishFolderForPublic'] : './dist/public';\r\n        } else if (this._releaseType.value === 'beta') {\r\n          fromApiFolder = !!apiConfig['publishFolderForBeta'] ? apiConfig['publishFolderForBeta'] : './dist/beta';\r\n        }\r\n\r\n        if (fromApiFolder) {\r\n          const fromApiFolderPath: string = path.join(project.projectFolder, fromApiFolder);\r\n          const toApiFolderPath: string = path.join(project.projectFolder, toApiFolder);\r\n          if (fsx.existsSync(fromApiFolderPath) && fsx.existsSync(toApiFolderPath)) {\r\n            fsx.readdirSync(fromApiFolderPath).forEach(fileName => {\r\n              fsx.copySync(path.join(fromApiFolderPath, fileName), path.join(toApiFolderPath, fileName));\r\n              console.log(`Copied file ${fileName} from ${fromApiFolderPath} to ${toApiFolderPath}`);\r\n            });\r\n          }\r\n        }\r\n      }\r\n      /* tslint:enable:no-string-literal */\r\n    }\r\n  }\r\n\r\n  private _calculateTarballName(project: RushConfigurationProject): string {\r\n    // Same logic as how npm forms the tarball name\r\n    const packageName: string = project.packageName;\r\n    const name: string = packageName[0] === '@' ?\r\n      packageName.substr(1).replace(/\\//g, '-') : packageName;\r\n\r\n    return `${name}-${project.packageJson.version}.tgz`;\r\n  }\r\n}"],"sourceRoot":"../../../../../src"}