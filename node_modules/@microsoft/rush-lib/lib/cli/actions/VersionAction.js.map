{"version":3,"sources":["cli/actions/VersionAction.ts"],"names":[],"mappings":"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","file":"VersionAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as semver from 'semver';\r\nimport { IPackageJson } from '@microsoft/node-core-library';\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { BumpType, LockStepVersionPolicy } from '../../data/VersionPolicy';\r\nimport { VersionPolicyConfiguration } from '../../data/VersionPolicyConfiguration';\r\nimport { RushConfiguration } from '../../data/RushConfiguration';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { VersionControl } from '../../utilities/VersionControl';\r\nimport { VersionMismatchFinder } from '../../data/VersionMismatchFinder';\r\nimport { RushCommandLineParser } from './RushCommandLineParser';\r\nimport { GitPolicy } from '../logic/GitPolicy';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { VersionManager } from '../logic/VersionManager';\r\nimport { Git } from '../logic/Git';\r\n\r\nexport class VersionAction extends BaseRushAction {\r\n  private _ensureVersionPolicy: CommandLineFlagParameter;\r\n  private _overrideVersion: CommandLineStringParameter;\r\n  private _bumpVersion: CommandLineFlagParameter;\r\n  private _versionPolicy: CommandLineStringParameter;\r\n  private _bypassPolicy: CommandLineFlagParameter;\r\n  private _targetBranch: CommandLineStringParameter;\r\n  private _overwriteBump: CommandLineStringParameter;\r\n  private _prereleaseIdentifier: CommandLineStringParameter;\r\n\r\n  private _versionManager: VersionManager;\r\n\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'version',\r\n      summary: '(EXPERIMENTAL) Manage package versions in the repo.',\r\n      documentation: '(EXPERIMENTAL) use this \"rush version\" command to ensure version policies and bump versions.',\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._targetBranch = this.defineStringParameter({\r\n      parameterLongName: '--target-branch',\r\n      parameterShortName: '-b',\r\n      argumentName: 'BRANCH',\r\n      description:\r\n      'If this flag is specified, changes will be committed and merged into the target branch.'\r\n    });\r\n    this._ensureVersionPolicy = this.defineFlagParameter({\r\n      parameterLongName: '--ensure-version-policy',\r\n      description: 'Updates package versions if needed to satisfy version policies.'\r\n    });\r\n    this._overrideVersion = this.defineStringParameter({\r\n      parameterLongName: '--override-version',\r\n      argumentName: 'NEW_VERSION',\r\n      description: 'Override the version in the specified --version-policy. ' +\r\n        'This setting only works for lock-step version policy and when --ensure-version-policy is specified.'\r\n    });\r\n    this._bumpVersion = this.defineFlagParameter({\r\n      parameterLongName: '--bump',\r\n      description: 'Bumps package version based on version policies.'\r\n    });\r\n    this._bypassPolicy = this.defineFlagParameter({\r\n      parameterLongName: '--bypass-policy',\r\n      description: 'Overrides \"gitPolicy\" enforcement (use honorably!)'\r\n    });\r\n    this._versionPolicy = this.defineStringParameter({\r\n      parameterLongName: '--version-policy',\r\n      argumentName: 'POLICY',\r\n      description: 'The name of the version policy'\r\n    });\r\n    this._overwriteBump = this.defineStringParameter({\r\n      parameterLongName: '--override-bump',\r\n      argumentName: 'BUMPTYPE',\r\n      description: 'Overrides the bump type in the version-policy.json for the specified version policy.' +\r\n        'Valid BUMPTYPE values include: prerelease, patch, preminor, minor, major. ' +\r\n        'This setting only works for lock-step version policy in bump action.'\r\n    });\r\n    this._prereleaseIdentifier = this.defineStringParameter({\r\n      parameterLongName: '--override-prerelease-id',\r\n      argumentName: 'ID',\r\n      description: 'Overrides the prerelease identifier in the version value of version-policy.json ' +\r\n        'for the specified version policy. ' +\r\n        'This setting only works for lock-step version policy. ' +\r\n        'This setting increases to new prerelease id when \"--bump\" is provided but only replaces the ' +\r\n        'prerelease name when \"--ensure-version-policy\" is provided.'\r\n    });\r\n  }\r\n\r\n  protected run(): Promise<void> {\r\n    if (!this._bypassPolicy.value) {\r\n      if (!GitPolicy.check(this.rushConfiguration)) {\r\n        process.exit(1);\r\n        return Promise.resolve();\r\n      }\r\n    }\r\n    this._validateInput();\r\n\r\n    this._versionManager = new VersionManager(this.rushConfiguration, this._getUserEmail());\r\n    if (this._ensureVersionPolicy.value) {\r\n      this._overwritePolicyVersionIfNeeded();\r\n      const tempBranch: string = 'version/ensure-' + new Date().getTime();\r\n      this._versionManager.ensure(this._versionPolicy.value, true,\r\n        !!this._overrideVersion.value || !!this._prereleaseIdentifier.value);\r\n\r\n      const updatedPackages: Map<string, IPackageJson> = this._versionManager.updatedProjects;\r\n      if (updatedPackages.size > 0) {\r\n        console.log(`${updatedPackages.size} packages are getting updated.`);\r\n        this._gitProcess(tempBranch);\r\n      }\r\n    } else if (this._bumpVersion.value) {\r\n      const tempBranch: string = 'version/bump-' + new Date().getTime();\r\n      this._versionManager.bump(this._versionPolicy.value,\r\n        this._overwriteBump.value ? BumpType[this._overwriteBump.value] : undefined,\r\n        this._prereleaseIdentifier.value,\r\n        true);\r\n      this._gitProcess(tempBranch);\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n  private _overwritePolicyVersionIfNeeded(): void {\r\n    if (!this._overrideVersion.value && !this._prereleaseIdentifier.value) {\r\n      // No need to overwrite policy version\r\n      return;\r\n    }\r\n    if (this._overrideVersion.value && this._prereleaseIdentifier.value) {\r\n      throw new Error(`The parameters \"--override-version\" and` +\r\n        ` \"--override-prerelease-id\" cannot be used together.`);\r\n    }\r\n\r\n    if (this._versionPolicy.value) {\r\n      const versionConfig: VersionPolicyConfiguration = this.rushConfiguration.versionPolicyConfiguration;\r\n      const policy: LockStepVersionPolicy = versionConfig.getVersionPolicy(this._versionPolicy.value) as\r\n          LockStepVersionPolicy;\r\n      if (!policy || !policy.isLockstepped) {\r\n        throw new Error(`The lockstep version policy \"${policy.policyName}\" is not found.`);\r\n      }\r\n      let newVersion: string | undefined = undefined;\r\n      if (this._overrideVersion.value) {\r\n        newVersion = this._overrideVersion.value;\r\n      } else if (this._prereleaseIdentifier.value) {\r\n        const newPolicyVersion: semver.SemVer = new semver.SemVer(policy.version);\r\n        if (newPolicyVersion.prerelease.length) {\r\n          // Update 1.5.0-alpha.10 to 1.5.0-beta.10\r\n          newPolicyVersion.prerelease[0] = this._prereleaseIdentifier.value;\r\n        } else {\r\n          // Update 1.5.0 to 1.5.0-beta\r\n          newPolicyVersion.prerelease.push(this._prereleaseIdentifier.value);\r\n        }\r\n        newVersion = newPolicyVersion.format();\r\n      }\r\n\r\n      if (newVersion) {\r\n        console.log(`Update version policy ${policy.policyName} from ${policy.version} to ${newVersion}`);\r\n        versionConfig.update(this._versionPolicy.value, newVersion);\r\n      }\r\n    } else {\r\n      throw new Error('Missing --version-policy parameter to specify which version policy should be overwritten.');\r\n    }\r\n  }\r\n\r\n  private _validateInput(): void {\r\n    if (this._bumpVersion.value && this._ensureVersionPolicy.value) {\r\n      throw new Error('Please choose --bump or --ensure-version-policy but not together.');\r\n    }\r\n\r\n    if (this._overwriteBump.value && !BumpType[this._overwriteBump.value]) {\r\n      throw new Error('The value of override-bump is not valid.  ' +\r\n      'Valid values include prerelease, patch, preminor, minor, and major');\r\n    }\r\n  }\r\n\r\n  private _validateResult(): void {\r\n    // Load the config from file to avoid using inconsistent in-memory data.\r\n    const rushConfig: RushConfiguration =\r\n      RushConfiguration.loadFromConfigurationFile(this.rushConfiguration.rushJsonFile);\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(\r\n      rushConfig.projects,\r\n      rushConfig.commonVersions.allowedAlternativeVersions\r\n    );\r\n    if (mismatchFinder.numberOfMismatches) {\r\n      throw new Error('Unable to finish version bump because inconsistencies were encountered.' +\r\n        ' Run \\\"rush check\\\" to find more details.');\r\n    }\r\n  }\r\n\r\n  private _getUserEmail(): string {\r\n    return Utilities.executeCommandAndCaptureOutput('git',\r\n        ['config', 'user.email'], '.').trim();\r\n  }\r\n\r\n  private _gitProcess(tempBranch: string): void {\r\n    // Validate the result before commit.\r\n    this._validateResult();\r\n\r\n    const git: Git = new Git(this._targetBranch.value);\r\n\r\n    // Make changes in temp branch.\r\n    git.checkout(tempBranch, true);\r\n\r\n    const uncommittedChanges: ReadonlyArray<string> = VersionControl.getUncommittedChanges();\r\n\r\n    // Stage, commit, and push the changes to remote temp branch.\r\n    // Need to commit the change log updates in its own commit\r\n    const changeLogUpdated: boolean = uncommittedChanges.some((changePath) => {\r\n      return changePath.indexOf('CHANGELOG.json') > 0;\r\n    });\r\n\r\n    if (changeLogUpdated) {\r\n      git.addChanges('.', this.rushConfiguration.changesFolder);\r\n      git.addChanges('**/CHANGELOG.json');\r\n      git.addChanges('**/CHANGELOG.md');\r\n      git.commit('Deleting change files and updating change logs for package updates.');\r\n    }\r\n\r\n    // Commit the package.json and change files updates.\r\n    const packageJsonUpdated: boolean = uncommittedChanges.some((changePath) => {\r\n      return changePath.indexOf('package.json') > 0;\r\n    });\r\n\r\n    if (packageJsonUpdated) {\r\n      git.addChanges();\r\n      git.commit();\r\n    }\r\n\r\n    if (changeLogUpdated || packageJsonUpdated) {\r\n      git.push(tempBranch);\r\n\r\n      // Now merge to target branch.\r\n      git.checkout(this._targetBranch.value);\r\n      git.pull();\r\n      git.merge(tempBranch);\r\n      git.push(this._targetBranch.value);\r\n      git.deleteBranch(tempBranch);\r\n    } else {\r\n      // skip commits\r\n      git.checkout(this._targetBranch.value);\r\n      git.deleteBranch(tempBranch, false);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}