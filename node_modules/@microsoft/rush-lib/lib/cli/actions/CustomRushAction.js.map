{"version":3,"sources":["cli/actions/CustomRushAction.ts"],"names":[],"mappings":"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","file":"CustomRushAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as colors from 'colors';\r\n\r\nimport {\r\n  Event\r\n} from '../../index';\r\n\r\nimport {\r\n  CustomOption,\r\n  ICustomEnumValue\r\n} from '../../data/CommandLineConfiguration';\r\n\r\nimport {\r\n  CommandLineFlagParameter,\r\n  CommandLineStringParameter,\r\n  CommandLineStringListParameter,\r\n  CommandLineChoiceParameter,\r\n  ICommandLineActionOptions\r\n} from '@microsoft/ts-command-line';\r\n\r\nimport { RushCommandLineParser } from './RushCommandLineParser';\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { TaskSelector } from '../logic/TaskSelector';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\n\r\ninterface ICustomOptionInstance {\r\n  optionDefinition: CustomOption;\r\n  parameterValue?: CommandLineFlagParameter | CommandLineChoiceParameter;\r\n}\r\n\r\nexport class CustomRushAction extends BaseRushAction {\r\n  private customOptions: Map<string, ICustomOptionInstance> = new Map<string, ICustomOptionInstance>();\r\n\r\n  private _changedProjectsOnly: CommandLineFlagParameter;\r\n  private _fromFlag: CommandLineStringListParameter;\r\n  private _toFlag: CommandLineStringListParameter;\r\n  private _toVersionPolicy: CommandLineStringListParameter;\r\n  private _verboseParameter: CommandLineFlagParameter;\r\n  private _parallelismParameter: CommandLineStringParameter | undefined;\r\n\r\n  constructor(\r\n    parser: RushCommandLineParser,\r\n    options: ICommandLineActionOptions,\r\n    private _parallelized: boolean = false,\r\n    private _ignoreMissingScript: boolean = false\r\n  ) {\r\n    super({\r\n      ...options,\r\n      parser\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Registers a custom option to a task. This custom option is then registered during onDefineParameters()\r\n   * @param longName the long name of the option, e.g. \"--verbose\"\r\n   * @param option the Custom Option definition\r\n   */\r\n  public addCustomOption(longName: string, option: CustomOption): void {\r\n    if (this.customOptions.get(longName)) {\r\n      throw new Error(`Cannot define two custom options with the same name: \"${longName}\"`);\r\n    }\r\n    this.customOptions.set(longName, {\r\n      optionDefinition: option\r\n    });\r\n  }\r\n\r\n  public run(): Promise<void> {\r\n    if (!fsx.existsSync(this.rushConfiguration.rushLinkJsonFilename)) {\r\n      throw new Error(`File not found: ${this.rushConfiguration.rushLinkJsonFilename}` +\r\n        `${os.EOL}Did you run \"rush link\"?`);\r\n    }\r\n    this._doBeforeTask();\r\n\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    const isQuietMode: boolean = !(this._verboseParameter.value);\r\n\r\n    // if this is parallizable, then use the value from the flag (undefined or a number),\r\n    // if this is not parallelized, then use 1 core\r\n    const parallelism: string | undefined = this._isParallelized()\r\n      ? this._parallelismParameter!.value\r\n      : '1';\r\n\r\n    // collect all custom flags here\r\n    const customFlags: string[] = [];\r\n    this.customOptions.forEach((customOption: ICustomOptionInstance, longName: string) => {\r\n      if (customOption.parameterValue!.value) {\r\n        if (customOption.optionDefinition.optionType === 'flag') {\r\n          customFlags.push(longName);\r\n        } else if (customOption.optionDefinition.optionType === 'enum') {\r\n          customFlags.push(`${longName} ${customOption.parameterValue!.value}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    const changedProjectsOnly: boolean = this.actionName === 'build' && this._changedProjectsOnly.value;\r\n\r\n    const tasks: TaskSelector = new TaskSelector(\r\n      {\r\n        rushConfiguration: this.parser.rushConfiguration,\r\n        toFlags: this._mergeToProjects(),\r\n        fromFlags: this._fromFlag.values,\r\n        commandToRun: this.actionName,\r\n        customFlags,\r\n        isQuietMode,\r\n        parallelism,\r\n        isIncrementalBuildAllowed: this.actionName === 'build',\r\n        changedProjectsOnly,\r\n        ignoreMissingScript: this._ignoreMissingScript\r\n      }\r\n    );\r\n\r\n    return tasks.execute().then(\r\n      () => {\r\n        stopwatch.stop();\r\n        console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));\r\n        this._doAfterTask(stopwatch, true);\r\n      })\r\n      .catch((error: Error) => {\r\n        if (error && error.message) {\r\n          console.log('Error: ' + error.message);\r\n        }\r\n        stopwatch.stop();\r\n        console.log(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));\r\n        this._doAfterTask(stopwatch, false);\r\n        throw new AlreadyReportedError();\r\n      });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    if (this._isParallelized()) {\r\n      this._parallelismParameter = this.defineStringParameter({\r\n        parameterLongName: '--parallelism',\r\n        parameterShortName: '-p',\r\n        argumentName: 'COUNT',\r\n        description: 'Specify the number of concurrent build processes'\r\n          + ' The value \"max\" can be specified to indicate the number of CPU cores.'\r\n          + ' If this parameter omitted, the default value depends on the operating system and number of CPU cores.'\r\n      });\r\n    }\r\n    this._toFlag = this.defineStringListParameter({\r\n      parameterLongName: '--to',\r\n      parameterShortName: '-t',\r\n      argumentName: 'PROJECT1',\r\n      description: 'Run command in the specified project and all of its dependencies'\r\n    });\r\n    this._toVersionPolicy =  this.defineStringListParameter({\r\n      parameterLongName: '--to-version-policy',\r\n      argumentName: 'VERSION_POLICY_NAME',\r\n      description: 'Run command in all projects with the specified version policy and all of their dependencies'\r\n    });\r\n    this._fromFlag = this.defineStringListParameter({\r\n      parameterLongName: '--from',\r\n      parameterShortName: '-f',\r\n      argumentName: 'PROJECT2',\r\n      description: 'Run command in all projects that directly or indirectly depend on the specified project'\r\n    });\r\n    this._verboseParameter = this.defineFlagParameter({\r\n      parameterLongName: '--verbose',\r\n      parameterShortName: '-v',\r\n      description: 'Display the logs during the build, rather than just displaying the build status summary'\r\n    });\r\n    if (this.actionName === 'build') {\r\n      this._changedProjectsOnly = this.defineFlagParameter({\r\n        parameterLongName: '--changed-projects-only',\r\n        parameterShortName: '-o',\r\n        description: 'If specified, the incremental build will only rebuild projects that have changed, '\r\n          + 'but not any projects that directly or indirectly depend on the changed package.'\r\n      });\r\n    }\r\n\r\n    // @TODO we should throw if they are trying to overwrite built in flags\r\n\r\n    this.customOptions.forEach((customOption: ICustomOptionInstance, longName: string) => {\r\n      if (customOption.optionDefinition.optionType === 'flag') {\r\n        customOption.parameterValue = this.defineFlagParameter({\r\n          parameterShortName: customOption.optionDefinition.shortName,\r\n          parameterLongName: longName,\r\n          description: customOption.optionDefinition.description\r\n        });\r\n      } else if (customOption.optionDefinition.optionType === 'enum') {\r\n        customOption.parameterValue = this.defineChoiceParameter({\r\n          parameterShortName: customOption.optionDefinition.shortName,\r\n          parameterLongName: longName,\r\n          description: customOption.optionDefinition.description,\r\n          defaultValue: customOption.optionDefinition.defaultValue,\r\n          alternatives: customOption.optionDefinition.enumValues.map((enumValue: ICustomEnumValue) => {\r\n              return enumValue.name;\r\n            })\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private _mergeToProjects(): string[] {\r\n    const projects: string[] = [...this._toFlag.values];\r\n    if (this._toVersionPolicy.values && this._toVersionPolicy.values.length) {\r\n      this.rushConfiguration.projects.forEach(project => {\r\n        const matches: boolean = this._toVersionPolicy.values.some(policyName => {\r\n          return project.versionPolicyName === policyName;\r\n        });\r\n        if (matches) {\r\n          projects.push(project.packageName);\r\n        }\r\n      });\r\n    }\r\n    return projects;\r\n  }\r\n\r\n  private _isParallelized(): boolean {\r\n    return this.actionName === 'build'\r\n      || this.actionName === 'rebuild'\r\n      || this._parallelized;\r\n  }\r\n\r\n  private _doBeforeTask(): void {\r\n    if (this.actionName !== 'build' && this.actionName !== 'rebuild') {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n\r\n    this.eventHooksManager.handle(Event.preRushBuild, this.parser.isDebug);\r\n  }\r\n\r\n  private _doAfterTask(stopwatch: Stopwatch, success: boolean): void {\r\n    if (this.actionName !== 'build' && this.actionName !== 'rebuild') {\r\n      // Only collects information for built-in tasks like build or rebuild.\r\n      return;\r\n    }\r\n    this._collectTelemetry(stopwatch, success);\r\n    this.parser.flushTelemetry();\r\n    this.eventHooksManager.handle(Event.postRushBuild, this.parser.isDebug);\r\n  }\r\n\r\n  private _collectTelemetry(stopwatch: Stopwatch, success: boolean): void {\r\n    const extraData: { [key: string]: string } = {\r\n      command_to: (this._toFlag.values.length > 0).toString(),\r\n      command_from: (this._fromFlag.values.length > 0).toString()\r\n    };\r\n\r\n    this.customOptions.forEach((customOption: ICustomOptionInstance, longName: string) => {\r\n      if (customOption.parameterValue!.value) {\r\n        extraData[`${this.actionName}_${longName}`] =\r\n          customOption.parameterValue!.value!.toString();\r\n      }\r\n    });\r\n\r\n    if (this.parser.telemetry) {\r\n      this.parser.telemetry.log({\r\n        name: this.actionName,\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData\r\n      });\r\n    }\r\n  }\r\n}"],"sourceRoot":"../../../../../src"}