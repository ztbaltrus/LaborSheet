{"version":3,"sources":["cli/actions/RushCommandLineParser.ts"],"names":[],"mappings":"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","file":"RushCommandLineParser.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as colors from 'colors';\r\nimport * as wordwrap from 'wordwrap';\r\nimport { CommandLineParser, CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\n\r\nimport { RushConstants } from '../../RushConstants';\r\nimport { CommandLineConfiguration } from '../../data/CommandLineConfiguration';\r\nimport { RushConfiguration } from '../../data/RushConfiguration';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { ChangeAction } from './ChangeAction';\r\nimport { CheckAction } from './CheckAction';\r\nimport { UpdateAction } from './UpdateAction';\r\nimport { InstallAction } from './InstallAction';\r\nimport { LinkAction } from './LinkAction';\r\nimport { PublishAction } from './PublishAction';\r\nimport { PurgeAction } from './PurgeAction';\r\nimport { UnlinkAction } from './UnlinkAction';\r\nimport { ScanAction } from './ScanAction';\r\nimport { VersionAction } from './VersionAction';\r\nimport { CustomCommandFactory } from './CustomCommandFactory';\r\nimport { CustomRushAction } from './CustomRushAction';\r\n\r\nimport { Telemetry } from '../logic/Telemetry';\r\nimport { AlreadyReportedError } from '../../utilities/AlreadyReportedError';\r\n\r\nexport class RushCommandLineParser extends CommandLineParser {\r\n  public telemetry: Telemetry | undefined;\r\n  public rushConfiguration: RushConfiguration;\r\n\r\n  private _debugParameter: CommandLineFlagParameter;\r\n\r\n  constructor() {\r\n    super({\r\n      toolFilename: 'rush',\r\n      toolDescription: 'Rush makes life easier for JavaScript developers who develop, build, and publish'\r\n        + ' many packages from a central Git repo.  It is designed to handle very large repositories'\r\n        + ' supporting many projects and people.  Rush provides policies, protections, and customizations'\r\n        + ' that help coordinate teams and safely onboard new contributors.  Rush also generates change logs'\r\n        + ' and automates package publishing.  It can manage decoupled subsets of projects with different'\r\n        + ' release and versioning strategies.  A full API is included to facilitate integration with other'\r\n        + ' automation tools.  If you are looking for a proven turnkey solution for monorepo management,'\r\n        + ' Rush is for you.'\r\n    });\r\n    this._populateActions();\r\n  }\r\n\r\n  public get isDebug(): boolean {\r\n    return this._debugParameter.value;\r\n  }\r\n\r\n  public flushTelemetry(): void {\r\n    if (this.telemetry) {\r\n      this.telemetry.flush();\r\n    }\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    this._debugParameter = this.defineFlagParameter({\r\n      parameterLongName: '--debug',\r\n      parameterShortName: '-d',\r\n      description: 'Show the full call stack if an error occurs while executing the tool'\r\n    });\r\n  }\r\n\r\n  protected onExecute(): Promise<void> {\r\n    return this._wrapOnExecute().catch((error: Error) => {\r\n      this._reportErrorAndSetExitCode(error);\r\n    });\r\n  }\r\n\r\n  private _wrapOnExecute(): Promise<void> {\r\n    try {\r\n      if (this.rushConfiguration) {\r\n        this.telemetry = new Telemetry(this.rushConfiguration);\r\n      }\r\n      return super.onExecute().then(() => {\r\n        if (this.telemetry) {\r\n          this.flushTelemetry();\r\n        }\r\n      });\r\n    } catch (error) {\r\n      return Promise.reject(error);\r\n    }\r\n  }\r\n\r\n  private _populateActions(): void {\r\n    try {\r\n      let  commandLineConfig: CommandLineConfiguration | undefined = undefined;\r\n\r\n      const rushJsonFilename: string | undefined = RushConfiguration.tryFindRushJsonLocation();\r\n      if (rushJsonFilename) {\r\n        this.rushConfiguration = RushConfiguration.loadFromConfigurationFile(rushJsonFilename);\r\n\r\n        const commandLineConfigFile: string = path.join(\r\n          this.rushConfiguration.commonRushConfigFolder, RushConstants.commandLineFilename\r\n        );\r\n\r\n        commandLineConfig = CommandLineConfiguration.tryLoadFromFile(commandLineConfigFile);\r\n      }\r\n\r\n      this.addAction(new ChangeAction(this));\r\n      this.addAction(new CheckAction(this));\r\n      this.addAction(new InstallAction(this));\r\n      this.addAction(new LinkAction(this));\r\n      this.addAction(new PublishAction(this));\r\n      this.addAction(new PurgeAction(this));\r\n      this.addAction(new ScanAction(this));\r\n      this.addAction(new UpdateAction(this));\r\n      this.addAction(new UnlinkAction(this));\r\n      this.addAction(new VersionAction(this));\r\n\r\n      CustomCommandFactory.createCommands(this, commandLineConfig)\r\n        .forEach((customAction: CustomRushAction) => {\r\n          this.addAction(customAction);\r\n        });\r\n\r\n    } catch (error) {\r\n      this._reportErrorAndSetExitCode(error);\r\n    }\r\n  }\r\n\r\n  private _reportErrorAndSetExitCode(error: Error): void {\r\n    if (!(error instanceof AlreadyReportedError)) {\r\n      const prefix: string = 'ERROR: ';\r\n      const wrap: (textToWrap: string) => string = wordwrap.soft(prefix.length, Utilities.getConsoleWidth());\r\n      console.error(os.EOL + colors.red(prefix + wrap(error.message).trim()));\r\n    }\r\n\r\n    if (this._debugParameter.value) {\r\n      // If catchSyncErrors() called this, then show a call stack similar to what NodeJS\r\n      // would show for an uncaught error\r\n      console.error(os.EOL + error.stack);\r\n    }\r\n\r\n    this.flushTelemetry();\r\n\r\n    // Ideally we want to remove all calls to process.exit() from our code, and replace them\r\n    // with normal control flow that properly cleans up its data structures.\r\n    // For this particular call, we have a problem that the RushCommandLineParser constructor\r\n    // performs nontrivial work that can throw an exception.  Either the Rush class would need\r\n    // to handle reporting for those exceptions, or else _populateActions() should be moved\r\n    // to a RushCommandLineParser lifecycle stage that can handle it.\r\n    process.exit(1);\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}