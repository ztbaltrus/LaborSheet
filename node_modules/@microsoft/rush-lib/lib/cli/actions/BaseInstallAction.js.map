{"version":3,"sources":["cli/actions/BaseInstallAction.ts"],"names":[],"mappings":"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","file":"BaseInstallAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\n\r\nimport { CommandLineFlagParameter } from '@microsoft/ts-command-line';\r\n\r\nimport { BaseRushAction } from './BaseRushAction';\r\nimport { Event } from '../../data/EventHooks';\r\nimport { InstallManager, IInstallManagerOptions } from '../logic/InstallManager';\r\nimport { PurgeManager } from '../logic/PurgeManager';\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\n\r\n/**\r\n * This is the common base class for InstallAction and UpdateAction.\r\n */\r\nexport abstract class BaseInstallAction extends BaseRushAction {\r\n  protected _purgeParameter: CommandLineFlagParameter;\r\n  protected _bypassPolicyParameter: CommandLineFlagParameter;\r\n  protected _noLinkParameter: CommandLineFlagParameter;\r\n\r\n  protected onDefineParameters(): void {\r\n    this._purgeParameter = this.defineFlagParameter({\r\n      parameterLongName: '--purge',\r\n      parameterShortName: '-p',\r\n      description: 'Perform \"rush purge\" before starting the installation'\r\n    });\r\n    this._bypassPolicyParameter = this.defineFlagParameter({\r\n      parameterLongName: '--bypass-policy',\r\n      description: 'Overrides enforcement of the \"gitPolicy\" rules from rush.json (use honorably!)'\r\n    });\r\n    this._noLinkParameter = this.defineFlagParameter({\r\n      parameterLongName: '--no-link',\r\n      description: 'If \"--no-link\" is specified, then project symlinks will NOT be created'\r\n        + ' after the installation completes.  You will need to run \"rush link\" manually.'\r\n        + ' This flag is useful for automated builds that want to report stages individually'\r\n        + ' or perform extra operations in between the two stages.'\r\n    });\r\n  }\r\n\r\n  protected abstract buildInstallOptions(): IInstallManagerOptions;\r\n\r\n  protected run(): Promise<void> {\r\n    const stopwatch: Stopwatch = Stopwatch.start();\r\n\r\n    this.eventHooksManager.handle(Event.preRushInstall, this.parser.isDebug);\r\n\r\n    const purgeManager: PurgeManager = new PurgeManager(this.rushConfiguration);\r\n    const installManager: InstallManager = new InstallManager(this.rushConfiguration, purgeManager);\r\n\r\n    if (this._purgeParameter.value!) {\r\n      console.log('The --purge flag was specified, so performing \"rush purge\"');\r\n      purgeManager.purgeNormal();\r\n      console.log('');\r\n    }\r\n\r\n    const installManagerOptions: IInstallManagerOptions = this.buildInstallOptions();\r\n\r\n    return installManager.doInstall(installManagerOptions)\r\n      .then(() => {\r\n        purgeManager.deleteAll();\r\n        stopwatch.stop();\r\n\r\n        this._collectTelemetry(stopwatch, installManagerOptions, true);\r\n        this.eventHooksManager.handle(Event.postRushInstall, this.parser.isDebug);\r\n\r\n        console.log(os.EOL + colors.green(\r\n          `Rush ${this.actionName} finished successfully. (${stopwatch.toString()})`));\r\n      })\r\n      .catch((error) => {\r\n        purgeManager.deleteAll();\r\n        stopwatch.stop();\r\n\r\n        this._collectTelemetry(stopwatch, installManagerOptions, false);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  private _collectTelemetry(stopwatch: Stopwatch, installManagerOptions: IInstallManagerOptions,\r\n    success: boolean): void {\r\n\r\n    if (this.parser.telemetry) {\r\n      this.parser.telemetry.log({\r\n        name: 'install',\r\n        duration: stopwatch.duration,\r\n        result: success ? 'Succeeded' : 'Failed',\r\n        extraData: {\r\n          mode: this.actionName,\r\n          clean: (!!this._purgeParameter.value).toString(),\r\n          full: installManagerOptions.fullUpgrade.toString()\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"../../../../../src"}