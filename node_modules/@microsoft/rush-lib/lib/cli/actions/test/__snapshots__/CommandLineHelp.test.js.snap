// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommandLineHelp prints the global help 1`] = `
"usage: rush [-h] [-d] <command> ...

Rush makes life easier for JavaScript developers who develop, build, and 
publish many packages from a central Git repo. It is designed to handle very 
large repositories supporting many projects and people. Rush provides 
policies, protections, and customizations that help coordinate teams and 
safely onboard new contributors. Rush also generates change logs and 
automates package publishing. It can manage decoupled subsets of projects 
with different release and versioning strategies. A full API is included to 
facilitate integration with other automation tools. If you are looking for a 
proven turnkey solution for monorepo management, Rush is for you.

Positional arguments:
  <command>
    change     Records changes made to projects, indicating how the package 
               version number should be bumped for the next publish.
    check      Checks each project's package.json files and ensures that all 
               dependencies are of the same version throughout the repository.
    install    Install package dependencies for all projects in the repo 
               according to the shrinkwrap file
    link       Create node_modules symlinks for all projects
    publish    Reads and processes package publishing change requests 
               generated by \\"rush change\\".
    purge      For diagnostic purposes, use this command to delete caches and 
               other temporary files used by Rush
    scan       Scan the current project folder and display a report of 
               imported packages.
    update     Install package dependencies for all projects in the repo, and 
               create or update the shrinkwrap file as needed
    unlink     Delete node_modules symlinks for all projects in the repo
    version    (EXPERIMENTAL) Manage package versions in the repo.
    build      (EXPERIMENTAL) Build all projects that haven't been built, or 
               have changed since they were last built.
    rebuild    Clean and rebuild the entire set of projects

Optional arguments:
  -h, --help   Show this help message and exit.
  -d, --debug  Show the full call stack if an error occurs while executing 
               the tool

For detailed help about a specific command, use: rush <command> -h
"
`;

exports[`CommandLineHelp prints the help for "rush build" 1`] = `
"usage: rush build [-h] [-p COUNT] [-t PROJECT1]
                  [--to-version-policy VERSION_POLICY_NAME] [-f PROJECT2] [-v]
                  [-o] [--no-color] [--production]
                  

The Rush build command assumes that the package.json file for each project 
contains a \\"scripts\\" entry for \\"npm run build\\". It invokes this commands to 
build each project. Projects are built in parallel where possible, but always 
respecting the dependency graph for locally linked projects. The number of 
simultaneous processes will be based on the number of machine cores unless 
overridden by the --parallelism flag.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specify the number of concurrent build processes The 
                        value \\"max\\" can be specified to indicate the number 
                        of CPU cores. If this parameter omitted, the default 
                        value depends on the operating system and number of 
                        CPU cores.
  -t PROJECT1, --to PROJECT1
                        Run command in the specified project and all of its 
                        dependencies
  --to-version-policy VERSION_POLICY_NAME
                        Run command in all projects with the specified 
                        version policy and all of their dependencies
  -f PROJECT2, --from PROJECT2
                        Run command in all projects that directly or 
                        indirectly depend on the specified project
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  -o, --changed-projects-only
                        If specified, the incremental build will only rebuild 
                        projects that have changed, but not any projects that 
                        directly or indirectly depend on the changed package.
  --no-color            disable colors in the build log, defaults to 'true'
  --production          Perform a production build, including minification 
                        and localization steps
"
`;

exports[`CommandLineHelp prints the help for "rush change" 1`] = `
"usage: rush change [-h] [-v] [-b BRANCH]

Asks a series of questions and then generates a <branchname>-<timstamp>.json 
file in the common folder. The \`publish\` command will consume these files and 
perform the proper version bumps. Note these changes will eventually be 
published in a changelog.md file in each package. The possible types of 
changes are: MAJOR - these are breaking changes that are not backwards 
compatible. Examples are: renaming a public class, adding/removing a 
non-optional parameter from a public API, or renaming an variable or function 
that is exported. MINOR - these are changes that are backwards compatible 
(but not forwards compatible). Examples are: adding a new public API or 
adding an optional parameter to a public API PATCH - these are changes that 
are backwards and forwards compatible. Examples are: Modifying a private API 
or fixing a bug in the logic of how an existing API works. HOTFIX 
(EXPERIMENTAL) - these are changes that are hotfixes targeting a specific 
older version of the package. When a hotfix change is added, other changes 
will not be able to increment the version number.Enable this feature by 
setting 'hotfixChangeEnabled' in your rush.json.

Optional arguments:
  -h, --help            Show this help message and exit.
  -v, --verify          Verify the change file has been generated and that it 
                        is a valid JSON file
  -b BRANCH, --target-branch BRANCH
                        If this parameter is specified, compare current 
                        branch with the target branch to get changes. If this 
                        parameter is not specified, the current branch is 
                        compared against the \\"master\\" branch.
"
`;

exports[`CommandLineHelp prints the help for "rush check" 1`] = `
"usage: rush check [-h]

Checks each project's package.json files and ensures that all dependencies 
are of the same version throughout the repository.

Optional arguments:
  -h, --help  Show this help message and exit.
"
`;

exports[`CommandLineHelp prints the help for "rush install" 1`] = `
"usage: rush install [-h] [-p] [--bypass-policy] [--no-link]

The \\"rush install\\" command installs package dependencies for all your 
projects, based on the shrinkwrap file that is created/updated using \\"rush 
update\\". (This \\"shrinkwrap\\" file stores a central inventory of all 
dependencies and versions for projects in your repo. It is found in the 
\\"common/config/rush\\" folder.) If the shrinkwrap file is missing or outdated 
(e.g. because project package.json files have changed), \\"rush install\\" will 
fail and tell you to run \\"rush update\\" instead. This read-only nature is the 
main feature: Continuous integration builds should use \\"rush install\\" instead 
of \\"rush update\\" to catch developers who forgot to commit their shrinkwrap 
changes. Cautious people can also use \\"rush install\\" if they want to avoid 
accidentally updating their shrinkwrap file.

Optional arguments:
  -h, --help       Show this help message and exit.
  -p, --purge      Perform \\"rush purge\\" before starting the installation
  --bypass-policy  Overrides enforcement of the \\"gitPolicy\\" rules from rush.
                   json (use honorably!)
  --no-link        If \\"--no-link\\" is specified, then project symlinks will 
                   NOT be created after the installation completes. You will 
                   need to run \\"rush link\\" manually. This flag is useful for 
                   automated builds that want to report stages individually 
                   or perform extra operations in between the two stages.
"
`;

exports[`CommandLineHelp prints the help for "rush link" 1`] = `
"usage: rush link [-h] [-f]

Create node_modules symlinks for all projects. This operation is normally 
performed automatically as part of \\"rush install\\" or \\"rush update\\". You 
should only need to use \\"rush link\\" if you performed \\"rush unlink\\" for some 
reason, or if you specified the \\"--no-link\\" option for \\"rush install\\" or 
\\"rush update\\".

Optional arguments:
  -h, --help   Show this help message and exit.
  -f, --force  Deletes and recreates all links, even if the filesystem state 
               seems to indicate that this is unnecessary.
"
`;

exports[`CommandLineHelp prints the help for "rush publish" 1`] = `
"usage: rush publish [-h] [-a] [-b BRANCH] [-p] [--add-commit-details]
                    [--regenerate-changelogs] [-r REGISTRY] [-n TOKEN]
                    [-t TAG] [--pack] [--release-folder FOLDER]
                    [--release-type RELEASE_TYPE] [--include-all]
                    [--version-policy POLICY] [--prerelease-name NAME]
                    [--suffix SUFFIX] [--force]
                    

Reads and processes package publishing change requests generated by \\"rush 
change\\". This will perform a read-only operation by default, printing 
operations executed to the console. To commit changes and publish packages, 
you must use the --commit flag and/or the --publish flag.

Optional arguments:
  -h, --help            Show this help message and exit.
  -a, --apply           If this flag is specified, the change requests will 
                        be applied to package.json files.
  -b BRANCH, --target-branch BRANCH
                        If this flag is specified, applied changes and 
                        deleted change requests will becommitted and merged 
                        into the target branch.
  -p, --publish         If this flag is specified, applied changes will be 
                        published to npm.
  --add-commit-details  Adds commit author and hash to the changelog.json 
                        files for each change.
  --regenerate-changelogs
                        Regenerates all changelog files based on the current 
                        JSON content.
  -r REGISTRY, --registry REGISTRY
                        Publishes to a specified NPM registry. If this is 
                        specified, it will prevent the current commit will 
                        not be tagged.
  -n TOKEN, --npm-auth-token TOKEN
                        Provide the default scope NPM auth token to be passed 
                        into npm publish for global package publishing.
  -t TAG, --tag TAG     The tag option to pass to npm publish. By default NPM 
                        will publish using the 'latest' tag, even if the 
                        package is older than the current latest, so in 
                        publishing workflows for older releases, providing a 
                        tag is important. When hotfix changes are made, this 
                        parameter defaults to 'hotfix'.
  --pack                Packs projects into tarballs instead of publishing to 
                        npm repository. It can only be used when 
                        --include-all is specified. If this flag is specified,
                         NPM registry related parameters will be ignored.
  --release-folder FOLDER
                        This parameter is used with --pack parameter to 
                        provide customized location for the tarballs instead 
                        of the default value.
  --release-type RELEASE_TYPE
                        This parameter is used with --pack parameter to 
                        provide release type for the generated tarballs. The 
                        default value is 'internal'. The valid values include 
                        'public', 'beta', 'internal'
  --include-all         If this flag is specified, all packages with 
                        shouldPublish=true in rush.json or with a specified 
                        version policy will be published if their version is 
                        newer than published version.
  --version-policy POLICY
                        Version policy name. Only projects with this version 
                        policy will be published if used with --include-all.
  --prerelease-name NAME
                        Bump up to a prerelease version with the provided 
                        prerelease name. Cannot be used with --suffix
  --suffix SUFFIX       Append a suffix to all changed versions. Cannot be 
                        used with --prerelease-name.
  --force               If this flag is specified with --publish, packages 
                        will be published with --force on npm
"
`;

exports[`CommandLineHelp prints the help for "rush purge" 1`] = `
"usage: rush purge [-h] [--unsafe]

The \\"rush purge\\" command is used to delete temporary files created by Rush. 
This is useful if you are having problems and suspect that cache files may be 
corrupt.

Optional arguments:
  -h, --help  Show this help message and exit.
  --unsafe    (UNSAFE!) Also delete shared files such as the package manager 
              instances stored in the \\".rush\\" folder in the user's home 
              directory. This is a more aggressive fix that is NOT SAFE to 
              run in a live environment because it will cause other 
              concurrent Rush processes to fail.
"
`;

exports[`CommandLineHelp prints the help for "rush rebuild" 1`] = `
"usage: rush rebuild [-h] [-p COUNT] [-t PROJECT1]
                    [--to-version-policy VERSION_POLICY_NAME] [-f PROJECT2]
                    [-v] [--no-color] [--production]
                    

The Rush build command assumes that the package.json file for each project 
contains a \\"scripts\\" entry for \\"npm run build\\". It invokes this commands to 
build each project. Projects are built in parallel where possible, but always 
respecting the dependency graph for locally linked projects. The number of 
simultaneous processes will be based on the number of machine cores unless 
overridden by the --parallelism flag.

Optional arguments:
  -h, --help            Show this help message and exit.
  -p COUNT, --parallelism COUNT
                        Specify the number of concurrent build processes The 
                        value \\"max\\" can be specified to indicate the number 
                        of CPU cores. If this parameter omitted, the default 
                        value depends on the operating system and number of 
                        CPU cores.
  -t PROJECT1, --to PROJECT1
                        Run command in the specified project and all of its 
                        dependencies
  --to-version-policy VERSION_POLICY_NAME
                        Run command in all projects with the specified 
                        version policy and all of their dependencies
  -f PROJECT2, --from PROJECT2
                        Run command in all projects that directly or 
                        indirectly depend on the specified project
  -v, --verbose         Display the logs during the build, rather than just 
                        displaying the build status summary
  --no-color            disable colors in the build log, defaults to 'true'
  --production          Perform a production build, including minification 
                        and localization steps
"
`;

exports[`CommandLineHelp prints the help for "rush scan" 1`] = `
"usage: rush scan [-h]

The NPM system allows a project to import dependencies without explicitly 
listing them in its package.json file. This is a dangerous practice, because 
there is no guarantee you will get a compatible version. The \\"rush scan\\" 
command reports a list of packages that are imported by your code, which you 
can compare against your package.json file to find mistakes. It searches the 
\\"./src\\" and \\"./lib\\" folders for typical import syntaxes such as \\"import __ 
from '__'\\", \\"require('__')\\", \\"System.import('__'), etc. The results are only 
approximate, but generally pretty accurate.

Optional arguments:
  -h, --help  Show this help message and exit.
"
`;

exports[`CommandLineHelp prints the help for "rush unlink" 1`] = `
"usage: rush unlink [-h]

This removes the symlinks created by the \\"rush link\\" command. This is useful 
for cleaning a repo using \\"git clean\\" without accidentally deleting source 
files, or for using standard NPM commands on a project.

Optional arguments:
  -h, --help  Show this help message and exit.
"
`;

exports[`CommandLineHelp prints the help for "rush update" 1`] = `
"usage: rush update [-h] [-p] [--bypass-policy] [--no-link] [--full]
                   [--recheck]
                   

The \\"rush update\\" command installs the dependencies described in your package.
json files, and updates the shrinkwrap file as needed. (This \\"shrinkwrap\\" 
file stores a central inventory of all dependencies and versions for projects 
in your repo. It is found in the \\"common/config/rush\\" folder.) Note that Rush 
always performs a single install for all projects in your repo. You should 
run \\"rush update\\" whenever you start working in a Rush repo, after you pull 
from Git, and after you modify a package.json file. If there is nothing to do,
 \\"rush update\\" is instantaneous. NOTE: In certain cases \\"rush install\\" should 
be used instead of \\"rush update\\" -- for details, see the command help for 
\\"rush install\\".

Optional arguments:
  -h, --help       Show this help message and exit.
  -p, --purge      Perform \\"rush purge\\" before starting the installation
  --bypass-policy  Overrides enforcement of the \\"gitPolicy\\" rules from rush.
                   json (use honorably!)
  --no-link        If \\"--no-link\\" is specified, then project symlinks will 
                   NOT be created after the installation completes. You will 
                   need to run \\"rush link\\" manually. This flag is useful for 
                   automated builds that want to report stages individually 
                   or perform extra operations in between the two stages.
  --full           Normally \\"rush update\\" tries to preserve your existing 
                   installed versions and only makes the minimum updates 
                   needed to satisfy the package.json files. This 
                   conservative approach prevents your PR from getting 
                   involved with package updates that are unrelated to your 
                   work. Use \\"--full\\" when you really want to update all 
                   dependencies to the latest SemVer-compatible version. This 
                   should be done periodically by a person or robot whose 
                   role is to deal with potential upgrade regressions.
  --recheck        If the shrinkwrap file appears to already satisfy the 
                   package.json files, then \\"rush update\\" will skip invoking 
                   the package manager at all. In certain situations this 
                   heuristic may be inaccurate. Use the \\"--recheck\\" flag to 
                   force the package manager to process the shrinkwrap file. 
                   This will also update your shrinkwrap file with Rush's 
                   fixups. (To minimize shrinkwrap churn, these fixups are 
                   normally performed only in the temporary folder.)
"
`;

exports[`CommandLineHelp prints the help for "rush version" 1`] = `
"usage: rush version [-h] [-b BRANCH] [--ensure-version-policy]
                    [--override-version NEW_VERSION] [--bump]
                    [--bypass-policy] [--version-policy POLICY]
                    [--override-bump BUMPTYPE] [--override-prerelease-id ID]
                    

(EXPERIMENTAL) use this \\"rush version\\" command to ensure version policies and 
bump versions.

Optional arguments:
  -h, --help            Show this help message and exit.
  -b BRANCH, --target-branch BRANCH
                        If this flag is specified, changes will be committed 
                        and merged into the target branch.
  --ensure-version-policy
                        Updates package versions if needed to satisfy version 
                        policies.
  --override-version NEW_VERSION
                        Override the version in the specified 
                        --version-policy. This setting only works for 
                        lock-step version policy and when 
                        --ensure-version-policy is specified.
  --bump                Bumps package version based on version policies.
  --bypass-policy       Overrides \\"gitPolicy\\" enforcement (use honorably!)
  --version-policy POLICY
                        The name of the version policy
  --override-bump BUMPTYPE
                        Overrides the bump type in the version-policy.json 
                        for the specified version policy.Valid BUMPTYPE 
                        values include: prerelease, patch, preminor, minor, 
                        major. This setting only works for lock-step version 
                        policy in bump action.
  --override-prerelease-id ID
                        Overrides the prerelease identifier in the version 
                        value of version-policy.json for the specified 
                        version policy. This setting only works for lock-step 
                        version policy. This setting increases to new 
                        prerelease id when \\"--bump\\" is provided but only 
                        replaces the prerelease name when 
                        \\"--ensure-version-policy\\" is provided.
"
`;
