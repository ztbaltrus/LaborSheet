{"version":3,"sources":["cli/actions/CheckAction.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,iCAAiC;AAGjC,uDAAoD;AACpD,4EAAyE;AAEzE,qDAAkD;AAElD,iBAAyB,SAAQ,+BAAc;IAC7C,YAAY,MAA6B;QACvC,KAAK,CAAC;YACJ,UAAU,EAAE,OAAO;YACnB,OAAO,EAAE,8FAA8F;gBACrG,oCAAoC;YACtC,aAAa,EAAE,yFAAyF;gBACtG,yCAAyC;YAC3C,gCAAgC,EAAE,IAAI;YACtC,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAES,kBAAkB;QAC1B,WAAW;IACb,CAAC;IAES,GAAG;QACX,yDAAyD;QACzD,MAAM,oBAAoB,GAAqC,EAAE,CAAC;QAElE,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,uBAAuB,EAAE,CAAC,OAAO,CAAC,CAAC,OAAe,EAAE,UAAkB;YAC1G,oBAAoB,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,uFAAuF;QACvF,wDAAwD;QACxD,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,IAAI,CAAC;YACnC,WAAW,EAAE,0BAA0B,GAAG,6BAAa,CAAC,sBAAsB;YAC9E,WAAW,EAAE,EAAE,YAAY,EAAE,oBAAoB,EAAE;SACxB,CAAC,CAAC;QAE/B,MAAM,cAAc,GAA0B,IAAI,6CAAqB,CACrE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAC/B,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,0BAA0B,CACjE,CAAC;QAEF,0FAA0F;QAC1F,cAAc,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,CAAC,UAAkB;YACxD,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;YACvC,cAAc,CAAC,qBAAqB,CAAC,UAAU,CAAE,CAAC,OAAO,CAAC,CAAC,OAAe;gBACxE,OAAO,CAAC,GAAG,CAAC,KAAK,OAAO,EAAE,CAAC,CAAC;gBAC5B,cAAc,CAAC,sBAAsB,CAAC,UAAU,EAAE,OAAO,CAAE,CAAC,OAAO,CAAC,CAAC,OAAe;oBAClF,OAAO,CAAC,GAAG,CAAC,QAAQ,OAAO,EAAE,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,EAAE,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,CAAC;YACtC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,cAAc,CAAC,kBAAkB,6BAA6B,CAAC,CAAC,CAAC;YACjG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;QACnE,CAAC;QACD,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CACF;AAzDD,kCAyDC","file":"CheckAction.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\n\r\nimport { RushConfigurationProject } from '../../data/RushConfigurationProject';\r\nimport { RushConstants } from '../../RushConstants';\r\nimport { VersionMismatchFinder } from '../../data/VersionMismatchFinder';\r\nimport { RushCommandLineParser } from './RushCommandLineParser';\r\nimport { BaseRushAction } from './BaseRushAction';\r\n\r\nexport class CheckAction extends BaseRushAction {\r\n  constructor(parser: RushCommandLineParser) {\r\n    super({\r\n      actionName: 'check',\r\n      summary: 'Checks each project\\'s package.json files and ensures that all dependencies are of the same ' +\r\n        'version throughout the repository.',\r\n      documentation: 'Checks each project\\'s package.json files and ensures that all dependencies are of the ' +\r\n        'same version throughout the repository.',\r\n      safeForSimultaneousRushProcesses: true,\r\n      parser\r\n    });\r\n  }\r\n\r\n  protected onDefineParameters(): void {\r\n    // abstract\r\n  }\r\n\r\n  protected run(): Promise<void> {\r\n    // Collect all the preferred versions into a single table\r\n    const allPreferredVersions: { [dependency: string]: string } = {};\r\n\r\n    this.rushConfiguration.commonVersions.getAllPreferredVersions().forEach((version: string, dependency: string) => {\r\n      allPreferredVersions[dependency] = version;\r\n    });\r\n\r\n    // Create a fake project for the purposes of reporting conflicts with preferredVersions\r\n    // or xstitchPreferredVersions from common-versions.json\r\n    this.rushConfiguration.projects.push({\r\n      packageName: 'preferred versions from ' + RushConstants.commonVersionsFilename,\r\n      packageJson: { dependencies: allPreferredVersions }\r\n    } as RushConfigurationProject);\r\n\r\n    const mismatchFinder: VersionMismatchFinder = new VersionMismatchFinder(\r\n      this.rushConfiguration.projects,\r\n      this.rushConfiguration.commonVersions.allowedAlternativeVersions\r\n    );\r\n\r\n    // Iterate over the list. For any dependency with mismatching versions, print the projects\r\n    mismatchFinder.getMismatches().forEach((dependency: string) => {\r\n      console.log(colors.yellow(dependency));\r\n      mismatchFinder.getVersionsOfMismatch(dependency)!.forEach((version: string) => {\r\n        console.log(`  ${version}`);\r\n        mismatchFinder.getConsumersOfMismatch(dependency, version)!.forEach((project: string) => {\r\n          console.log(`   - ${project}`);\r\n        });\r\n      });\r\n      console.log();\r\n    });\r\n\r\n    if (mismatchFinder.numberOfMismatches) {\r\n      console.log(colors.red(`Found ${mismatchFinder.numberOfMismatches} mis-matching dependencies!`));\r\n      process.exit(1);\r\n    } else {\r\n      console.log(colors.green(`Found no mis-matching dependencies!`));\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}