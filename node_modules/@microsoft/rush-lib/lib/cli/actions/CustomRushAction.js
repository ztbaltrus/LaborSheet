"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const fsx = require("fs-extra");
const os = require("os");
const colors = require("colors");
const index_1 = require("../../index");
const BaseRushAction_1 = require("./BaseRushAction");
const TaskSelector_1 = require("../logic/TaskSelector");
const Stopwatch_1 = require("../../utilities/Stopwatch");
const AlreadyReportedError_1 = require("../../utilities/AlreadyReportedError");
class CustomRushAction extends BaseRushAction_1.BaseRushAction {
    constructor(parser, options, _parallelized = false, _ignoreMissingScript = false) {
        super(Object.assign({}, options, { parser }));
        this._parallelized = _parallelized;
        this._ignoreMissingScript = _ignoreMissingScript;
        this.customOptions = new Map();
    }
    /**
     * Registers a custom option to a task. This custom option is then registered during onDefineParameters()
     * @param longName the long name of the option, e.g. "--verbose"
     * @param option the Custom Option definition
     */
    addCustomOption(longName, option) {
        if (this.customOptions.get(longName)) {
            throw new Error(`Cannot define two custom options with the same name: "${longName}"`);
        }
        this.customOptions.set(longName, {
            optionDefinition: option
        });
    }
    run() {
        if (!fsx.existsSync(this.rushConfiguration.rushLinkJsonFilename)) {
            throw new Error(`File not found: ${this.rushConfiguration.rushLinkJsonFilename}` +
                `${os.EOL}Did you run "rush link"?`);
        }
        this._doBeforeTask();
        const stopwatch = Stopwatch_1.Stopwatch.start();
        const isQuietMode = !(this._verboseParameter.value);
        // if this is parallizable, then use the value from the flag (undefined or a number),
        // if this is not parallelized, then use 1 core
        const parallelism = this._isParallelized()
            ? this._parallelismParameter.value
            : '1';
        // collect all custom flags here
        const customFlags = [];
        this.customOptions.forEach((customOption, longName) => {
            if (customOption.parameterValue.value) {
                if (customOption.optionDefinition.optionType === 'flag') {
                    customFlags.push(longName);
                }
                else if (customOption.optionDefinition.optionType === 'enum') {
                    customFlags.push(`${longName} ${customOption.parameterValue.value}`);
                }
            }
        });
        const changedProjectsOnly = this.actionName === 'build' && this._changedProjectsOnly.value;
        const tasks = new TaskSelector_1.TaskSelector({
            rushConfiguration: this.parser.rushConfiguration,
            toFlags: this._mergeToProjects(),
            fromFlags: this._fromFlag.values,
            commandToRun: this.actionName,
            customFlags,
            isQuietMode,
            parallelism,
            isIncrementalBuildAllowed: this.actionName === 'build',
            changedProjectsOnly,
            ignoreMissingScript: this._ignoreMissingScript
        });
        return tasks.execute().then(() => {
            stopwatch.stop();
            console.log(colors.green(`rush ${this.actionName} (${stopwatch.toString()})`));
            this._doAfterTask(stopwatch, true);
        })
            .catch((error) => {
            if (error && error.message) {
                console.log('Error: ' + error.message);
            }
            stopwatch.stop();
            console.log(colors.red(`rush ${this.actionName} - Errors! (${stopwatch.toString()})`));
            this._doAfterTask(stopwatch, false);
            throw new AlreadyReportedError_1.AlreadyReportedError();
        });
    }
    onDefineParameters() {
        if (this._isParallelized()) {
            this._parallelismParameter = this.defineStringParameter({
                parameterLongName: '--parallelism',
                parameterShortName: '-p',
                argumentName: 'COUNT',
                description: 'Specify the number of concurrent build processes'
                    + ' The value "max" can be specified to indicate the number of CPU cores.'
                    + ' If this parameter omitted, the default value depends on the operating system and number of CPU cores.'
            });
        }
        this._toFlag = this.defineStringListParameter({
            parameterLongName: '--to',
            parameterShortName: '-t',
            argumentName: 'PROJECT1',
            description: 'Run command in the specified project and all of its dependencies'
        });
        this._toVersionPolicy = this.defineStringListParameter({
            parameterLongName: '--to-version-policy',
            argumentName: 'VERSION_POLICY_NAME',
            description: 'Run command in all projects with the specified version policy and all of their dependencies'
        });
        this._fromFlag = this.defineStringListParameter({
            parameterLongName: '--from',
            parameterShortName: '-f',
            argumentName: 'PROJECT2',
            description: 'Run command in all projects that directly or indirectly depend on the specified project'
        });
        this._verboseParameter = this.defineFlagParameter({
            parameterLongName: '--verbose',
            parameterShortName: '-v',
            description: 'Display the logs during the build, rather than just displaying the build status summary'
        });
        if (this.actionName === 'build') {
            this._changedProjectsOnly = this.defineFlagParameter({
                parameterLongName: '--changed-projects-only',
                parameterShortName: '-o',
                description: 'If specified, the incremental build will only rebuild projects that have changed, '
                    + 'but not any projects that directly or indirectly depend on the changed package.'
            });
        }
        // @TODO we should throw if they are trying to overwrite built in flags
        this.customOptions.forEach((customOption, longName) => {
            if (customOption.optionDefinition.optionType === 'flag') {
                customOption.parameterValue = this.defineFlagParameter({
                    parameterShortName: customOption.optionDefinition.shortName,
                    parameterLongName: longName,
                    description: customOption.optionDefinition.description
                });
            }
            else if (customOption.optionDefinition.optionType === 'enum') {
                customOption.parameterValue = this.defineChoiceParameter({
                    parameterShortName: customOption.optionDefinition.shortName,
                    parameterLongName: longName,
                    description: customOption.optionDefinition.description,
                    defaultValue: customOption.optionDefinition.defaultValue,
                    alternatives: customOption.optionDefinition.enumValues.map((enumValue) => {
                        return enumValue.name;
                    })
                });
            }
        });
    }
    _mergeToProjects() {
        const projects = [...this._toFlag.values];
        if (this._toVersionPolicy.values && this._toVersionPolicy.values.length) {
            this.rushConfiguration.projects.forEach(project => {
                const matches = this._toVersionPolicy.values.some(policyName => {
                    return project.versionPolicyName === policyName;
                });
                if (matches) {
                    projects.push(project.packageName);
                }
            });
        }
        return projects;
    }
    _isParallelized() {
        return this.actionName === 'build'
            || this.actionName === 'rebuild'
            || this._parallelized;
    }
    _doBeforeTask() {
        if (this.actionName !== 'build' && this.actionName !== 'rebuild') {
            // Only collects information for built-in tasks like build or rebuild.
            return;
        }
        this.eventHooksManager.handle(index_1.Event.preRushBuild, this.parser.isDebug);
    }
    _doAfterTask(stopwatch, success) {
        if (this.actionName !== 'build' && this.actionName !== 'rebuild') {
            // Only collects information for built-in tasks like build or rebuild.
            return;
        }
        this._collectTelemetry(stopwatch, success);
        this.parser.flushTelemetry();
        this.eventHooksManager.handle(index_1.Event.postRushBuild, this.parser.isDebug);
    }
    _collectTelemetry(stopwatch, success) {
        const extraData = {
            command_to: (this._toFlag.values.length > 0).toString(),
            command_from: (this._fromFlag.values.length > 0).toString()
        };
        this.customOptions.forEach((customOption, longName) => {
            if (customOption.parameterValue.value) {
                extraData[`${this.actionName}_${longName}`] =
                    customOption.parameterValue.value.toString();
            }
        });
        if (this.parser.telemetry) {
            this.parser.telemetry.log({
                name: this.actionName,
                duration: stopwatch.duration,
                result: success ? 'Succeeded' : 'Failed',
                extraData
            });
        }
    }
}
exports.CustomRushAction = CustomRushAction;

//# sourceMappingURL=CustomRushAction.js.map
