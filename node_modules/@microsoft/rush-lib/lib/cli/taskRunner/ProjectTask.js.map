{"version":3,"sources":["cli/taskRunner/ProjectTask.ts"],"names":[],"mappings":"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","file":"ProjectTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as fsx from 'fs-extra';\r\nimport * as path from 'path';\r\nimport * as process from 'process';\r\nimport { JsonFile, Text } from '@microsoft/node-core-library';\r\nimport { ITaskWriter } from '@microsoft/stream-collator';\r\nimport { IPackageDeps } from '@microsoft/package-deps-hash';\r\n\r\nimport { RushConfiguration } from '../../data/RushConfiguration';\r\nimport { RushConfigurationProject } from '../../data/RushConfigurationProject';\r\nimport { RushConstants } from '../../RushConstants';\r\nimport { Utilities } from '../../utilities/Utilities';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TaskError } from './TaskError';\r\nimport { ITaskDefinition } from '../taskRunner/ITask';\r\nimport {\r\n  PackageChangeAnalyzer\r\n} from '../logic/PackageChangeAnalyzer';\r\n\r\ninterface IPackageDependencies extends IPackageDeps {\r\n  arguments: string;\r\n}\r\n\r\nexport interface IProjectTaskOptions {\r\n  rushProject: RushConfigurationProject;\r\n  rushConfiguration: RushConfiguration;\r\n  commandToRun: string;\r\n  customFlags: string[];\r\n  isIncrementalBuildAllowed: boolean;\r\n  ignoreMissingScript: boolean;\r\n  packageChangeAnalyzer: PackageChangeAnalyzer;\r\n}\r\n\r\n/**\r\n * A TaskRunner task which cleans and builds a project\r\n */\r\nexport class ProjectTask implements ITaskDefinition {\r\n  public get name(): string {\r\n    return this._rushProject.packageName;\r\n  }\r\n\r\n  public isIncrementalBuildAllowed: boolean;\r\n\r\n  private _hasWarningOrError: boolean;\r\n  private _rushProject: RushConfigurationProject;\r\n  private _rushConfiguration: RushConfiguration;\r\n  private _commandToRun: string;\r\n  private _customFlags: string[];\r\n  private _ignoreMissingScript: boolean;\r\n  private _packageChangeAnalyzer: PackageChangeAnalyzer;\r\n\r\n  constructor(options: IProjectTaskOptions) {\r\n    this._rushProject = options.rushProject;\r\n    this._rushConfiguration = options.rushConfiguration;\r\n    this._commandToRun = options.commandToRun;\r\n    this._customFlags = options.customFlags;\r\n    this.isIncrementalBuildAllowed = options.isIncrementalBuildAllowed;\r\n    this._ignoreMissingScript = options.ignoreMissingScript;\r\n    this._packageChangeAnalyzer = options.packageChangeAnalyzer;\r\n  }\r\n\r\n  public execute(writer: ITaskWriter): Promise<TaskStatus> {\r\n    try {\r\n      const taskCommand: string = this._getScriptToRun();\r\n      const deps: IPackageDependencies | undefined = this._getPackageDependencies(taskCommand, writer);\r\n      return this._executeTask(taskCommand, writer, deps);\r\n    } catch (error) {\r\n      return Promise.reject(new TaskError('executing', error.message));\r\n    }\r\n  }\r\n\r\n  private _getPackageDependencies(taskCommand: string, writer: ITaskWriter): IPackageDependencies | undefined {\r\n    let deps: IPackageDependencies | undefined = undefined;\r\n    this._rushConfiguration = this._rushConfiguration;\r\n    try {\r\n      deps = {\r\n        files: this._packageChangeAnalyzer.getPackageDepsHash(this._rushProject.packageName)!.files,\r\n        arguments: taskCommand\r\n      };\r\n    } catch (error) {\r\n      writer.writeLine('Unable to calculate incremental build state. ' +\r\n        'Instead running full rebuild. ' + error.toString());\r\n    }\r\n\r\n    return deps;\r\n  }\r\n\r\n  private _executeTask(\r\n    taskCommand: string,\r\n    writer: ITaskWriter,\r\n    currentPackageDeps: IPackageDependencies | undefined\r\n  ): Promise<TaskStatus> {\r\n    try {\r\n      this._hasWarningOrError = false;\r\n      const projectFolder: string = this._rushProject.projectFolder;\r\n      let lastPackageDeps: IPackageDependencies | undefined = undefined;\r\n\r\n      writer.writeLine(`>>> ${this.name}`);\r\n\r\n      const currentDepsPath: string = path.join(this._rushProject.projectFolder, RushConstants.packageDepsFilename);\r\n      if (fsx.existsSync(currentDepsPath)) {\r\n        try {\r\n          lastPackageDeps = JsonFile.load(currentDepsPath) as IPackageDependencies;\r\n        } catch (e) {\r\n          // Warn and ignore - treat failing to load the file as the project being not built.\r\n          writer.writeLine(\r\n            `Warning: error parsing ${RushConstants.packageDepsFilename}: ${e}. Ignoring and ` +\r\n            'treating the project as non-built.'\r\n          );\r\n        }\r\n      }\r\n\r\n      const isPackageUnchanged: boolean = (\r\n        !!(\r\n          lastPackageDeps &&\r\n          currentPackageDeps &&\r\n          (currentPackageDeps.arguments === lastPackageDeps.arguments &&\r\n          _areShallowEqual(currentPackageDeps.files, lastPackageDeps.files, writer))\r\n        )\r\n      );\r\n\r\n      if (isPackageUnchanged && this.isIncrementalBuildAllowed) {\r\n        return Promise.resolve(TaskStatus.Skipped);\r\n      } else {\r\n        // If the deps file exists, remove it before starting a build.\r\n        if (fsx.existsSync(currentDepsPath)) {\r\n          fsx.unlinkSync(currentDepsPath);\r\n        }\r\n\r\n        if (!taskCommand) {\r\n          // tslint:disable-next-line:max-line-length\r\n          writer.writeLine(`The task command ${this._commandToRun} was registered in the package.json but is blank, so no action will be taken.`);\r\n          return Promise.resolve(TaskStatus.Skipped);\r\n        }\r\n\r\n        // Run the task\r\n\r\n        const normalizedTaskCommand: string = process.platform === 'win32'\r\n          ? convertSlashesForWindows(taskCommand)\r\n          : taskCommand;\r\n\r\n        writer.writeLine(normalizedTaskCommand);\r\n        const task: child_process.ChildProcess =\r\n          Utilities.executeLifecycleCommandAsync(normalizedTaskCommand, projectFolder,\r\n            this._rushConfiguration.commonTempFolder, true);\r\n\r\n        // Hook into events, in order to get live streaming of build log\r\n        task.stdout.on('data', (data: string) => {\r\n          writer.write(data);\r\n        });\r\n\r\n        task.stderr.on('data', (data: string) => {\r\n          writer.writeError(data);\r\n          this._hasWarningOrError = true;\r\n        });\r\n\r\n        return new Promise((resolve: (status: TaskStatus) => void, reject: (error: TaskError) => void) => {\r\n          task.on('close', (code: number) => {\r\n              this._writeLogsToDisk(writer);\r\n\r\n            if (code !== 0) {\r\n              reject(new TaskError('error', `Returned error code: ${code}`));\r\n            } else if (this._hasWarningOrError) {\r\n              resolve(TaskStatus.SuccessWithWarning);\r\n            } else {\r\n              // Write deps on success.\r\n              if (currentPackageDeps) {\r\n                JsonFile.save(currentPackageDeps, currentDepsPath);\r\n              }\r\n              resolve(TaskStatus.Success);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n\r\n      this._writeLogsToDisk(writer);\r\n      return Promise.reject(new TaskError('error', error.toString()));\r\n    }\r\n  }\r\n\r\n  private _isBuildCommand(): boolean {\r\n    return this._commandToRun === 'build' || this._commandToRun === 'rebuild';\r\n  }\r\n\r\n  private _getScriptToRun(): string {\r\n    let script: string | undefined = undefined;\r\n    if (this._isBuildCommand()) {\r\n      script = this._getScriptCommand('build');\r\n\r\n      if (script === undefined) {\r\n        // tslint:disable-next-line:max-line-length\r\n        throw new Error(`The project [${this._rushProject.packageName}] does not define a 'build' command in the 'scripts' section of its package.json`);\r\n      }\r\n\r\n    } else {\r\n      script = this._getScriptCommand(this._commandToRun);\r\n\r\n      if (script === undefined && !this._ignoreMissingScript) {\r\n        // tslint:disable-next-line:max-line-length\r\n        throw new Error(`The project [${this._rushProject.packageName}] does not define a '${this._commandToRun}' command in the 'scripts' section of its package.json`);\r\n      }\r\n    }\r\n\r\n    if (!script) {\r\n      return '';\r\n    }\r\n\r\n    return `${script} ${this._customFlags.join(' ')}`;\r\n  }\r\n\r\n  private _getScriptCommand(script: string): string | undefined {\r\n    // tslint:disable-next-line:no-string-literal\r\n    if (!this._rushProject.packageJson.scripts) {\r\n      return undefined;\r\n    }\r\n\r\n    const rawCommand: string = this._rushProject.packageJson.scripts[script];\r\n\r\n    // tslint:disable-next-line:no-null-keyword\r\n    if (rawCommand === undefined || rawCommand === null) {\r\n      return undefined;\r\n    }\r\n\r\n    return rawCommand;\r\n  }\r\n\r\n  // @todo #179371: add log files to list of things that get gulp cleaned\r\n  private _writeLogsToDisk(writer: ITaskWriter): void {\r\n    try {\r\n      const logFilename: string = path.basename(this._rushProject.projectFolder);\r\n\r\n      const stdout: string = writer.getStdOutput().replace(/\\x1B[[(?);]{0,2}(;?\\d)*./g, '');\r\n      if (stdout) {\r\n        fsx.writeFileSync(path.join(this._rushProject.projectFolder, logFilename + '.build.log'), stdout);\r\n      }\r\n\r\n      const stderr: string = writer.getStdError().replace(/\\x1B[[(?);]{0,2}(;?\\d)*./g, '');\r\n      if (stderr) {\r\n        fsx.writeFileSync(path.join(this._rushProject.projectFolder, logFilename + '.build.error.log'), stderr);\r\n      }\r\n    } catch (e) {\r\n      console.log(`Error writing logs to disk: ${e}`);\r\n    }\r\n  }\r\n}\r\n\r\nfunction _areShallowEqual(object1: Object, object2: Object, writer: ITaskWriter): boolean {\r\n  for (const n in object1) {\r\n    if (!(n in object2) || object1[n] !== object2[n]) {\r\n      writer.writeLine(`Found mismatch: \"${n}\": \"${object1[n]}\" !== \"${object2[n]}\"`);\r\n      return false;\r\n    }\r\n  }\r\n  for (const n in object2) {\r\n    if (!(n in object1)) {\r\n      writer.writeLine(`Found new prop in obj2: \"${n}\" value=\"${object2[n]}\"`);\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * When running a command from the \"scripts\" block in package.json, if the command\r\n * contains Unix-style path slashes and the OS is Windows, the package managers will\r\n * convert slashes to backslashes.  This is a complicated undertaking.  For example, they\r\n * need to convert \"node_modules/bin/this && ./scripts/that --name keep/this\"\r\n * to \"node_modules\\bin\\this && .\\scripts\\that --name keep/this\", and they don't want to\r\n * convert ANY of the slashes in \"cmd.exe /c echo a/b\".  NPM and PNPM use npm-lifecycle for this,\r\n * but it unfortunately has a dependency on the entire node-gyp kitchen sink.  Yarn has a\r\n * simplified implementation in fix-cmd-win-slashes.js, but it's not exposed as a library.\r\n *\r\n * Fundamentally NPM's whole feature seems misguided:  They start by inviting people to write\r\n * shell scripts that will be executed by wildly different shell languages (e.g. cmd.exe and Bash).\r\n * It's very tricky for a developer to guess what's safe to do without testing every OS.\r\n * Even simple path separators are not portable, so NPM added heuristics to figure out which\r\n * slashes are part of a path or not, and convert them.  These workarounds end up having tons\r\n * of special cases.  They probably could have implemented their own entire minimal cross-platform\r\n * shell language with less code and less confusion than npm-lifecycle's approach.\r\n *\r\n * We've deprecated shell operators inside package.json.  Instead, we advise people to move their\r\n * scripts into conventional script files, and put only a file path in package.json.  So, for\r\n * Rush's workaround here, we really only care about supporting the small set of cases seen in the\r\n * unit tests.  For anything that doesn't fit those patterns, we leave the string untouched\r\n * (i.e. err on the side of not breaking anything).  We could revisit this later if someone\r\n * complains about it, but so far nobody has.  :-)\r\n */\r\nexport function convertSlashesForWindows(command: string): string {\r\n  // The first group will match everything up to the first space, \"&\", \"|\", \"<\", \">\", or quote.\r\n  // The second group matches the remainder.\r\n  const commandRegExp: RegExp = /^([^\\s&|<>\"]+)(.*)$/;\r\n\r\n  const match: RegExpMatchArray | null = commandRegExp.exec(command);\r\n  if (match) {\r\n    // Example input: \"bin/blarg --path ./config/blah.json && a/b\"\r\n    // commandPart=\"bin/blarg\"\r\n    // remainder=\" --path ./config/blah.json && a/b\"\r\n    const commandPart: string = match[1];\r\n    const remainder: string = match[2];\r\n\r\n    // If the command part already contains a backslash, then leave it alone\r\n    if (commandPart.indexOf('\\\\') < 0) {\r\n      // Replace all the slashes with backslashes, e.g. to produce:\r\n      // \"bin\\blarg --path ./config/blah.json && a/b\"\r\n      //\r\n      // NOTE: we don't attempt to process the path parameter or stuff after \"&&\"\r\n      return Text.replaceAll(commandPart, '/', '\\\\') + remainder;\r\n    }\r\n  }\r\n\r\n  // Don't change anything\r\n  return command;\r\n}\r\n"],"sourceRoot":"../../../../../src"}