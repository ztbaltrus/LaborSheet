{"version":3,"sources":["cli/taskRunner/TaskRunner.ts"],"names":[],"mappings":"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","file":"TaskRunner.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as colors from 'colors';\r\nimport * as os from 'os';\r\nimport { Interleaver } from '@microsoft/stream-collator';\r\n\r\nimport { Stopwatch } from '../../utilities/Stopwatch';\r\nimport { ITask, ITaskDefinition } from './ITask';\r\nimport { TaskStatus } from './TaskStatus';\r\nimport { TaskError } from './TaskError';\r\n\r\n/**\r\n * A class which manages the execution of a set of tasks with interdependencies.\r\n * Any class of task definition may be registered, and dependencies between tasks are\r\n * easily specified. Initially, and at the end of each task execution, all unblocked tasks\r\n * are added to a ready queue which is then executed. This is done continually until all\r\n * tasks are complete, or prematurely fails if any of the tasks fail. Note that all task\r\n * definitions must\r\n * @todo #168352: add unit tests\r\n */\r\nexport class TaskRunner {\r\n  private _tasks: Map<string, ITask>;\r\n  private _changedProjectsOnly: boolean;\r\n  private _buildQueue: ITask[];\r\n  private _quietMode: boolean;\r\n  private _hasAnyFailures: boolean;\r\n  private _parallelism: number;\r\n  private _currentActiveTasks: number;\r\n  private _totalTasks: number;\r\n  private _completedTasks: number;\r\n\r\n  constructor(quietMode: boolean,\r\n    parallelism: string |undefined,\r\n    changedProjectsOnly: boolean) {\r\n    this._tasks = new Map<string, ITask>();\r\n    this._buildQueue = [];\r\n    this._quietMode = quietMode;\r\n    this._hasAnyFailures = false;\r\n    this._changedProjectsOnly = changedProjectsOnly;\r\n\r\n    const numberOfCores: number = os.cpus().length;\r\n\r\n    if (parallelism) {\r\n      if (parallelism === 'max') {\r\n        this._parallelism = numberOfCores;\r\n      } else {\r\n        const parallelismInt: number = parseInt(parallelism, 10);\r\n\r\n        if (isNaN(parallelismInt)) {\r\n          throw new Error(`Invalid parallelism value of '${parallelism}', expected a number or 'max'`);\r\n        }\r\n\r\n        this._parallelism = parallelismInt;\r\n      }\r\n\r\n    }  else {\r\n      // If an explicit parallelism number wasn't provided, then choose a sensible\r\n      // default.\r\n      if (os.platform() === 'win32') {\r\n        // On desktop Windows, some people have complained that their system becomes\r\n        // sluggish if Rush is using all the CPU cores.  Leave one thread for\r\n        // other operations. For CI environments, you can use the \"max\" argument to use all available cores.\r\n        this._parallelism = Math.max(numberOfCores - 1, 1);\r\n      } else {\r\n        // Unix-like operating systems have more balanced scheduling, so default\r\n        // to the number of CPU cores\r\n        this._parallelism = numberOfCores;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Registers a task definition to the map of defined tasks\r\n   */\r\n  public addTask(taskDefinition: ITaskDefinition): void {\r\n    if (this._tasks.has(taskDefinition.name)) {\r\n      throw new Error('A task with that name has already been registered.');\r\n    }\r\n\r\n    const task: ITask = taskDefinition as ITask;\r\n    task.dependencies = new Set<ITask>();\r\n    task.dependents = new Set<ITask>();\r\n    task.status = TaskStatus.Ready;\r\n    task.criticalPathLength = undefined;\r\n    this._tasks.set(task.name, task);\r\n\r\n    if (!this._quietMode) {\r\n      console.log(`Registered ${task.name}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns true if a task with that name has been registered\r\n   */\r\n  public hasTask(taskName: string): boolean {\r\n    return this._tasks.has(taskName);\r\n  }\r\n\r\n  /**\r\n   * Defines the list of dependencies for an individual task.\r\n   * @param taskName - the string name of the task for which we are defining dependencies. A task with this\r\n   * name must already have been registered.\r\n   * @taskDependencies\r\n   */\r\n  public addDependencies(taskName: string, taskDependencies: string[]): void {\r\n    const task: ITask | undefined = this._tasks.get(taskName);\r\n\r\n    if (!task) {\r\n      throw new Error(`The task '${taskName}' has not been registered`);\r\n    }\r\n    if (!taskDependencies) {\r\n      throw new Error('The list of dependencies must be defined');\r\n    }\r\n\r\n    for (const dependencyName of taskDependencies) {\r\n      if (!this._tasks.has(dependencyName)) {\r\n        throw new Error(`The project '${dependencyName}' has not been registered.`);\r\n      }\r\n      const dependency: ITask = this._tasks.get(dependencyName)!;\r\n      task.dependencies.add(dependency);\r\n      dependency.dependents.add(task);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes all tasks which have been registered, returning a promise which is resolved when all the\r\n   * tasks are completed successfully, or rejects when any task fails.\r\n   */\r\n  public execute(): Promise<void> {\r\n    this._currentActiveTasks = 0;\r\n    this._completedTasks = 0;\r\n    this._totalTasks = this._tasks.size;\r\n    console.log(`Executing a maximum of ${this._parallelism} simultaneous processes...${os.EOL}`);\r\n\r\n    this._checkForCyclicDependencies(this._tasks.values(), []);\r\n\r\n    // Precalculate the number of dependent packages\r\n    this._tasks.forEach((task: ITask) => {\r\n      this._calculateCriticalPaths(task);\r\n    });\r\n\r\n    // Add everything to the buildQueue\r\n    this._tasks.forEach((task: ITask) => {\r\n      this._buildQueue.push(task);\r\n    });\r\n\r\n    // Sort the queue in descending order, nothing will mess with the order\r\n    this._buildQueue.sort((taskA: ITask, taskB: ITask): number => {\r\n      return taskB.criticalPathLength! - taskA.criticalPathLength!;\r\n    });\r\n\r\n    return this._startAvailableTasks().then(() => {\r\n      this._printTaskStatus();\r\n\r\n      if (this._hasAnyFailures) {\r\n        return Promise.reject(new Error('Project(s) failed to build'));\r\n      } else {\r\n        return Promise.resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Pulls the next task with no dependencies off the build queue\r\n   * Removes any non-ready tasks from the build queue (this should only be blocked tasks)\r\n   */\r\n  private _getNextTask(): ITask | undefined {\r\n    for (let i: number = 0; i < this._buildQueue.length; i++) {\r\n      const task: ITask = this._buildQueue[i];\r\n\r\n      if (task.status !== TaskStatus.Ready) {\r\n        // It shouldn't be on the queue, remove it\r\n        this._buildQueue.splice(i, 1);\r\n        // Decrement since we modified the array\r\n        i--;\r\n      } else if (task.dependencies.size === 0 && task.status === TaskStatus.Ready) {\r\n        // this is a task which is ready to go. remove it and return it\r\n        return this._buildQueue.splice(i, 1)[0];\r\n      }\r\n      // Otherwise task is still waiting\r\n    }\r\n    return undefined; // There are no tasks ready to go at this time\r\n  }\r\n\r\n  /**\r\n   * Helper function which finds any tasks which are available to run and begins executing them.\r\n   * It calls the complete callback when all tasks are completed, or rejects if any task fails.\r\n   */\r\n  private _startAvailableTasks(): Promise<void> {\r\n    const taskPromises: Promise<void>[] = [];\r\n    let ctask: ITask | undefined;\r\n    while (this._currentActiveTasks < this._parallelism && (ctask = this._getNextTask())) {\r\n      this._currentActiveTasks++;\r\n      const task: ITask = ctask;\r\n      task.status = TaskStatus.Executing;\r\n      console.log(colors.white(`[${task.name}] started`));\r\n\r\n      task.stopwatch = Stopwatch.start();\r\n      task.writer = Interleaver.registerTask(task.name, this._quietMode);\r\n\r\n      taskPromises.push(task.execute(task.writer)\r\n        .then((result: TaskStatus) => {\r\n          task.stopwatch.stop();\r\n          task.writer.close();\r\n\r\n          this._currentActiveTasks--;\r\n          this._completedTasks++;\r\n          switch (result) {\r\n            case TaskStatus.Success:\r\n              this._markTaskAsSuccess(task);\r\n              break;\r\n            case TaskStatus.SuccessWithWarning:\r\n              this._markTaskAsSuccessWithWarning(task);\r\n              break;\r\n            case TaskStatus.Skipped:\r\n              this._markTaskAsSkipped(task);\r\n              break;\r\n            case TaskStatus.Failure:\r\n              this._hasAnyFailures = true;\r\n              this._markTaskAsFailed(task);\r\n              break;\r\n          }\r\n        }).catch((error: TaskError) => {\r\n          task.writer.close();\r\n\r\n          this._currentActiveTasks--;\r\n\r\n          this._hasAnyFailures = true;\r\n          task.error = error;\r\n          this._markTaskAsFailed(task);\r\n        }\r\n      ).then(() => this._startAvailableTasks()));\r\n    }\r\n\r\n    return Promise.all(taskPromises).then(() => { /* collapse void[] to void */ });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as having failed and marks each of its dependents as blocked\r\n   */\r\n  private _markTaskAsFailed(task: ITask): void {\r\n    console.log(colors.red(`${os.EOL}${this._getCurrentCompletedTaskString()}[${task.name}] failed to build!`));\r\n    task.status = TaskStatus.Failure;\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      this._markTaskAsBlocked(dependent, task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task and all its dependents as blocked\r\n   */\r\n  private _markTaskAsBlocked(task: ITask, failedTask: ITask): void {\r\n    if (task.status === TaskStatus.Ready) {\r\n      this._completedTasks++;\r\n      console.log(colors.red(`${this._getCurrentCompletedTaskString()}`\r\n        + `[${task.name}] blocked by [${failedTask.name}]!`));\r\n      task.status = TaskStatus.Blocked;\r\n      task.dependents.forEach((dependent: ITask) => {\r\n        this._markTaskAsBlocked(dependent, failedTask);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks a task as being completed, and removes it from the dependencies list of all its dependents\r\n   */\r\n  private _markTaskAsSuccess(task: ITask): void {\r\n    console.log(colors.green(`${this._getCurrentCompletedTaskString()}`\r\n      + `[${task.name}] completed successfully in ${task.stopwatch.toString()}`));\r\n    task.status = TaskStatus.Success;\r\n\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      if (!this._changedProjectsOnly) {\r\n        dependent.isIncrementalBuildAllowed = false;\r\n      }\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as being completed, but with warnings written to stderr, and removes it from the dependencies\r\n   * list of all its dependents\r\n   */\r\n  private _markTaskAsSuccessWithWarning(task: ITask): void {\r\n    console.log(colors.yellow(`${this._getCurrentCompletedTaskString()}`\r\n      + `[${task.name}] completed with warnings in ${task.stopwatch.toString()}`));\r\n    task.status = TaskStatus.SuccessWithWarning;\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      if (!this._changedProjectsOnly) {\r\n        dependent.isIncrementalBuildAllowed = false;\r\n      }\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Marks a task as skipped.\r\n   */\r\n  private _markTaskAsSkipped(task: ITask): void {\r\n    console.log(colors.green(`${this._getCurrentCompletedTaskString()}[${task.name}] skipped`));\r\n    task.status = TaskStatus.Skipped;\r\n    task.dependents.forEach((dependent: ITask) => {\r\n      dependent.dependencies.delete(task);\r\n    });\r\n  }\r\n\r\n  private _getCurrentCompletedTaskString(): string {\r\n    return `${this._completedTasks} of ${this._totalTasks}: `;\r\n  }\r\n\r\n  /**\r\n   * Checks for projects that indirectly depend on themselves.\r\n   */\r\n  private _checkForCyclicDependencies(tasks: Iterable<ITask>, dependencyChain: string[]): void {\r\n    for (const task of tasks) {\r\n      if (dependencyChain.indexOf(task.name) >= 0) {\r\n        throw new Error('A cyclic dependency was encountered:\\n'\r\n          + '  ' + [...dependencyChain, task.name].reverse().join('\\n  -> ')\r\n          + '\\nConsider using the cyclicDependencyProjects option for rush.json.');\r\n      }\r\n      dependencyChain.push(task.name);\r\n      this._checkForCyclicDependencies(task.dependents, dependencyChain);\r\n      dependencyChain.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the number of packages which must be built before we reach\r\n   * the furthest away \"root\" node\r\n   */\r\n  private _calculateCriticalPaths(task: ITask): number {\r\n\r\n    // Return the memoized value\r\n    if (task.criticalPathLength !== undefined) {\r\n      return task.criticalPathLength;\r\n    }\r\n\r\n    // If no dependents, we are in a \"root\"\r\n    if (task.dependents.size === 0) {\r\n      return task.criticalPathLength = 0;\r\n    } else {\r\n      // Otherwise we are as long as the longest package + 1\r\n      const depsLengths: number[] = [];\r\n      task.dependents.forEach(dep => this._calculateCriticalPaths(dep));\r\n      return task.criticalPathLength = Math.max(...depsLengths) + 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prints out a report of the status of each project\r\n   */\r\n  private _printTaskStatus(): void {\r\n    const tasksByStatus: { [status: number]: ITask[] } = {};\r\n    this._tasks.forEach((task: ITask) => {\r\n      if (tasksByStatus[task.status]) {\r\n        tasksByStatus[task.status].push(task);\r\n      } else {\r\n        tasksByStatus[task.status] = [task];\r\n      }\r\n    });\r\n\r\n    console.log('');\r\n\r\n    this._printStatus(TaskStatus.Executing, tasksByStatus, colors.yellow);\r\n    this._printStatus(TaskStatus.Ready, tasksByStatus, colors.white);\r\n    this._printStatus(TaskStatus.Skipped, tasksByStatus, colors.grey);\r\n    this._printStatus(TaskStatus.Success, tasksByStatus, colors.green);\r\n    this._printStatus(TaskStatus.SuccessWithWarning, tasksByStatus, colors.yellow.underline);\r\n    this._printStatus(TaskStatus.Blocked, tasksByStatus, colors.red);\r\n    this._printStatus(TaskStatus.Failure, tasksByStatus, colors.red);\r\n\r\n    const tasksWithErrors: ITask[] = tasksByStatus[TaskStatus.Failure];\r\n    if (tasksWithErrors) {\r\n      tasksWithErrors.forEach((task: ITask) => {\r\n        if (task.error) {\r\n          console.log(colors.red(`[${task.name}] ${task.error.message}`));\r\n        }\r\n      });\r\n    }\r\n\r\n    console.log('');\r\n  }\r\n\r\n  private _printStatus(\r\n    status: TaskStatus,\r\n    tasksByStatus: { [status: number]: ITask[] },\r\n    color: (a: string) => string\r\n  ): void {\r\n    const tasks: ITask[] = tasksByStatus[status];\r\n\r\n    if (tasks && tasks.length) {\r\n      console.log(color(`${status} (${tasks.length})`));\r\n      console.log(color('================================'));\r\n      for (let i: number = 0; i < tasks.length; i++) {\r\n        const task: ITask = tasks[i];\r\n\r\n        switch (status) {\r\n          case TaskStatus.Executing:\r\n          case TaskStatus.Ready:\r\n          case TaskStatus.Skipped:\r\n            console.log(color(task.name));\r\n            break;\r\n\r\n          case TaskStatus.Success:\r\n          case TaskStatus.SuccessWithWarning:\r\n          case TaskStatus.Blocked:\r\n          case TaskStatus.Failure:\r\n            if (task.stopwatch) {\r\n              const time: string = task.stopwatch.toString();\r\n              console.log(color(`${task.name} (${time})`));\r\n            } else {\r\n              console.log(color(`${task.name}`));\r\n            }\r\n            break;\r\n        }\r\n\r\n        if (task.writer) {\r\n          let stderr: string = task.writer.getStdError();\r\n          if (stderr && (task.status === TaskStatus.Failure || task.status === TaskStatus.SuccessWithWarning)) {\r\n            stderr = stderr.split(os.EOL)\r\n              .map(text => text.trim())\r\n              .filter(text => text)\r\n              .join(os.EOL);\r\n\r\n            console.log(stderr + (i !== tasks.length - 1 ? os.EOL : ''));\r\n          }\r\n        }\r\n      }\r\n\r\n      console.log(color('================================' + os.EOL));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"../../../../../src"}