{"version":3,"sources":["utilities/Utilities.ts"],"names":[],"mappings":"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","file":"Utilities.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as child_process from 'child_process';\r\nimport * as fsx from 'fs-extra';\r\nimport * as os from 'os';\r\nimport * as rimraf from 'rimraf';\r\nimport * as tty from 'tty';\r\nimport * as path from 'path';\r\nimport { JsonFile, IPackageJson } from '@microsoft/node-core-library';\r\n\r\nexport interface IEnvironment {\r\n  // NOTE: the process.env doesn't actually support \"undefined\" as a value.\r\n  // If you try to assign it, it will be converted to the text string \"undefined\".\r\n  // But this typing is needed for reading values from the dictionary, and for\r\n  // subsets that get combined.\r\n  [environmentVariableName: string]: string | undefined;\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport class Utilities {\r\n  /**\r\n   * Get the user's home directory. On windows this looks something like \"C:\\users\\username\\\" and on UNIX\r\n   * this looks something like \"/usr/username/\"\r\n   */\r\n  public static getHomeDirectory(): string {\r\n    const unresolvedUserFolder: string | undefined\r\n      = process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\r\n    const homeFolder: string = path.resolve(unresolvedUserFolder);\r\n    if (!fsx.existsSync(homeFolder)) {\r\n      throw new Error('Unable to determine the current user\\'s home directory');\r\n    }\r\n\r\n    return homeFolder;\r\n  }\r\n\r\n  /**\r\n   * NodeJS equivalent of performance.now().\r\n   */\r\n  public static getTimeInMs(): number {\r\n    let seconds: number;\r\n    let nanoseconds: number;\r\n    [seconds, nanoseconds] = process.hrtime();\r\n    return seconds * 1000 + nanoseconds / 1000000;\r\n  }\r\n\r\n  /**\r\n   * Returns the values from a Set<T>\r\n   */\r\n  public static getSetAsArray<T>(set: Set<T>): T[] {\r\n    // When ES6 is supported, we can use Array.from() instead.\r\n    const result: T[] = [];\r\n    set.forEach((value: T) => {\r\n      result.push(value);\r\n    });\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Retries a function until a timeout is reached. The function is expected to throw if it failed and\r\n   *  should be retried.\r\n   */\r\n  public static retryUntilTimeout<TResult>(fn: () => TResult,\r\n                                           maxWaitTimeMs: number,\r\n                                           getTimeoutError: (innerError: Error) => Error,\r\n                                           fnName: string): TResult {\r\n    const startTime: number = Utilities.getTimeInMs();\r\n    let looped: boolean = false;\r\n\r\n    let result: TResult;\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n      try {\r\n        result = fn();\r\n        break;\r\n      } catch (e) {\r\n        looped = true;\r\n        const currentTime: number = Utilities.getTimeInMs();\r\n        if (currentTime - startTime > maxWaitTimeMs) {\r\n          throw getTimeoutError(e);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (looped) {\r\n      const currentTime: number = Utilities.getTimeInMs();\r\n      const totalSeconds: string = ((currentTime - startTime) / 1000.0).toFixed(2);\r\n      console.log(`${fnName}() stalled for ${totalSeconds} seconds`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Creates the specified folder by calling fsx.mkdirsSync(), but using a\r\n   * retry loop to recover from temporary locks that may be held by other processes.\r\n   * If the folder already exists, no error occurs.\r\n   */\r\n  public static createFolderWithRetry(folderName: string): void {\r\n    // Note: If a file exists with the same name, then we fall through and report\r\n    // an error.\r\n    if (Utilities.directoryExists(folderName)) {\r\n      return;\r\n    }\r\n\r\n    // We need to do a simple \"fs.mkdirSync(localModulesFolder)\" here,\r\n    // however if the folder we deleted above happened to contain any files,\r\n    // then there seems to be some OS process (virus scanner?) that holds\r\n    // a lock on the folder for a split second, which causes mkdirSync to\r\n    // fail.  To workaround that, retry for up to 7 seconds before giving up.\r\n    const maxWaitTimeMs: number = 7 * 1000;\r\n\r\n    return Utilities.retryUntilTimeout(() => fsx.mkdirsSync(folderName),\r\n                                       maxWaitTimeMs,\r\n                                       (e) => new Error(`Error: ${e}${os.EOL}Often this is caused by a file lock ` +\r\n                                                        'from a process such as your text editor, command prompt, ' +\r\n                                                        'or \"gulp serve\"'),\r\n                                       'createFolderWithRetry');\r\n  }\r\n\r\n  /**\r\n   * Determines if the path points to a file and that it exists.\r\n   */\r\n  public static fileExists(filePath: string): boolean {\r\n    let exists: boolean = false;\r\n\r\n    try {\r\n      const lstat: fsx.Stats = fsx.lstatSync(filePath);\r\n      exists = lstat.isFile();\r\n    } catch (e) { /* no-op */ }\r\n\r\n    return exists;\r\n  }\r\n\r\n  /**\r\n   * Determines if a path points to a directory and that it exists.\r\n   */\r\n  public static directoryExists(directoryPath: string): boolean {\r\n    let exists: boolean = false;\r\n\r\n    try {\r\n      const lstat: fsx.Stats = fsx.lstatSync(directoryPath);\r\n      exists = lstat.isDirectory();\r\n    } catch (e) { /* no-op */ }\r\n\r\n    return exists;\r\n  }\r\n\r\n  /**\r\n   * BE VERY CAREFUL CALLING THIS FUNCTION!\r\n   * If you specify the wrong folderPath (e.g. \"/\"), it could potentially delete your entire\r\n   * hard disk.\r\n   */\r\n  public static dangerouslyDeletePath(folderPath: string): void {\r\n    try {\r\n      rimraf.sync(folderPath, { disableGlob: true });\r\n    } catch (e) {\r\n      throw new Error(e.message + os.EOL + 'Often this is caused by a file lock'\r\n        + ' from a process such as your text editor, command prompt, or \"gulp serve\"');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Attempts to delete a file. If it does not exist, or the path is not a file, it no-ops.\r\n   */\r\n  public static deleteFile(filePath: string): void {\r\n    if (Utilities.fileExists(filePath)) {\r\n      console.log(`Deleting: ${filePath}`);\r\n      fsx.unlinkSync(filePath);\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Returns true if outputFilename has a more recent last modified timestamp\r\n   * than all of the inputFilenames, which would imply that we don't need to rebuild it.\r\n   * Returns false if any of the files does not exist.\r\n   * NOTE: The filenames can also be paths for directories, in which case the directory\r\n   * timestamp is compared.\r\n   */\r\n  public static isFileTimestampCurrent(outputFilename: string, inputFilenames: string[]): boolean {\r\n    if (!fsx.existsSync(outputFilename)) {\r\n      return false;\r\n    }\r\n    const outputStats: fsx.Stats = fsx.statSync(outputFilename);\r\n\r\n    for (const inputFilename of inputFilenames) {\r\n      if (!fsx.existsSync(inputFilename)) {\r\n        return false;\r\n      }\r\n\r\n      const inputStats: fsx.Stats = fsx.statSync(inputFilename);\r\n      if (outputStats.mtime < inputStats.mtime) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns the width of the console, measured in columns\r\n   */\r\n  public static getConsoleWidth(): number {\r\n    const stdout: tty.WriteStream = process.stdout as tty.WriteStream;\r\n    if (stdout && stdout.columns) {\r\n      return stdout.columns;\r\n    }\r\n    return 80;\r\n  }\r\n\r\n  /**\r\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\r\n   * The current directory will be set to the specified workingDirectory.\r\n   */\r\n  public static executeCommand(command: string, args: string[], workingDirectory: string,\r\n    environment?: IEnvironment, suppressOutput: boolean = false,\r\n    keepEnvironment: boolean = false\r\n  ): void {\r\n\r\n    Utilities._executeCommandInternal(command, args, workingDirectory,\r\n      suppressOutput ? undefined : [0, 1, 2],\r\n      environment,\r\n      keepEnvironment\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\r\n   * The current directory will be set to the specified workingDirectory.\r\n   */\r\n  public static executeCommandAndCaptureOutput(command: string, args: string[], workingDirectory: string,\r\n    environment?: IEnvironment,\r\n    keepEnvironment: boolean = false\r\n  ): string {\r\n\r\n    const  result: child_process.SpawnSyncReturns<Buffer>\r\n      = Utilities._executeCommandInternal(command, args, workingDirectory,\r\n        ['pipe', 'pipe', 'pipe'], environment, keepEnvironment);\r\n\r\n    return result.stdout.toString();\r\n  }\r\n\r\n  /**\r\n   * Attempts to run Utilities.executeCommand() up to maxAttempts times before giving up.\r\n   */\r\n  public static executeCommandWithRetry(maxAttempts: number, command: string, args: string[],\r\n    workingDirectory: string,  environment?: IEnvironment, suppressOutput: boolean = false,\r\n    retryCallback?: () => void): void {\r\n\r\n    if (maxAttempts < 1) {\r\n      throw new Error('The maxAttempts parameter cannot be less than 1');\r\n    }\r\n\r\n    let attemptNumber: number = 1;\r\n\r\n    // tslint:disable-next-line:no-constant-condition\r\n    while (true) {\r\n      try {\r\n        Utilities.executeCommand(command, args, workingDirectory, environment, suppressOutput);\r\n      } catch (error) {\r\n        console.log(os.EOL + 'The command failed:');\r\n        console.log(` ${command} ` + args.join(' '));\r\n        console.log(`ERROR: ${error.toString()}`);\r\n\r\n        if (attemptNumber < maxAttempts) {\r\n          ++attemptNumber;\r\n          console.log(`Trying again (attempt #${attemptNumber})...` + os.EOL);\r\n          if (retryCallback) {\r\n            retryCallback();\r\n          }\r\n          continue;\r\n        } else {\r\n          console.error(`Giving up after ${attemptNumber} attempts` + os.EOL);\r\n          throw error;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\r\n   * The current directory will be set to the specified workingDirectory.\r\n   */\r\n  public static executeCommandAsync(command: string, args: string[], workingDirectory: string,\r\n    environment?: IEnvironment): child_process.ChildProcess {\r\n    // This is a workaround for GitHub issue #25330.  It is not as complete as the workaround above,\r\n    // but there doesn't seem to be an easy asynchronous solution.\r\n    // https://github.com/nodejs/node-v0.x-archive/issues/25330\r\n    if (fsx.existsSync(command + '.cmd')) {\r\n      command += '.cmd';\r\n    }\r\n\r\n    // This is needed since we specify shell=true below:\r\n    const escapedCommand: string = Utilities.escapeShellParameter(command);\r\n    const escapedArgs: string[] = args.map((x) => Utilities.escapeShellParameter(x));\r\n\r\n    return child_process.spawn(escapedCommand, escapedArgs, {\r\n      cwd: workingDirectory,\r\n      shell: true,\r\n      env: Utilities._createEnvironmentForRushCommand('', environment)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\r\n   * @param command - the command to run on shell\r\n   * @param workingDirectory - working directory for running this command\r\n   * @param initCwd = the folder containing a local .npmrc, which will be used\r\n   *        for the INIT_CWD environment variable\r\n   * @param environment - environment variables for running this command\r\n   * @beta\r\n   */\r\n  public static executeLifecycleCommand(\r\n    command: string,\r\n    workingDirectory: string,\r\n    initCwd: string,\r\n    captureOutput: boolean = false\r\n  ): child_process.SpawnSyncReturns<Buffer> {\r\n    let shellCommand: string = process.env.comspec || 'cmd';\r\n    let commandFlags: string = '/d /s /c';\r\n    let useShell: boolean = true;\r\n    if (process.platform !== 'win32') {\r\n      shellCommand = 'sh';\r\n      commandFlags = '-c';\r\n      useShell = false;\r\n    }\r\n\r\n    const environment: IEnvironment = Utilities._createEnvironmentForRushCommand(initCwd);\r\n\r\n    const result: child_process.SpawnSyncReturns<Buffer> = child_process.spawnSync(\r\n      shellCommand,\r\n      [commandFlags, command],\r\n      {\r\n        cwd: workingDirectory,\r\n        shell: useShell,\r\n        env: environment,\r\n        stdio: captureOutput ? ['pipe', 'pipe', 'pipe'] : [0, 1, 2]\r\n      });\r\n\r\n    Utilities._processResult(result);\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Executes the command using cmd if running on windows, or using sh if running on a non-windows OS.\r\n   * @param command - the command to run on shell\r\n   * @param workingDirectory - working directory for running this command\r\n   * @param initCwd = the folder containing a local .npmrc, which will be used\r\n   *        for the INIT_CWD environment variable\r\n   * @param environment - environment variables for running this command\r\n   * @beta\r\n   */\r\n  public static executeLifecycleCommandAsync(\r\n    command: string,\r\n    workingDirectory: string,\r\n    initCwd: string,\r\n    captureOutput: boolean = false\r\n  ): child_process.ChildProcess {\r\n    let shellCommand: string = process.env.comspec || 'cmd';\r\n    let commandFlags: string = '/d /s /c';\r\n    let useShell: boolean = true;\r\n    if (process.platform !== 'win32') {\r\n      shellCommand = 'sh';\r\n      commandFlags = '-c';\r\n      useShell = false;\r\n    }\r\n\r\n    const environment: IEnvironment = Utilities._createEnvironmentForRushCommand(initCwd);\r\n\r\n    return child_process.spawn(\r\n      shellCommand,\r\n      [commandFlags, command],\r\n      {\r\n        cwd: workingDirectory,\r\n        shell: useShell,\r\n        env: environment,\r\n        stdio: captureOutput ? ['pipe', 'pipe', 'pipe'] : [0, 1, 2]\r\n      });\r\n  }\r\n\r\n  /**\r\n   * For strings passed to a shell command, this adds appropriate escaping\r\n   * to avoid misinterpretation of spaces or special characters.\r\n   *\r\n   * Example: 'hello there' --> '\"hello there\"'\r\n   */\r\n  public static escapeShellParameter(parameter: string): string {\r\n    return '\"' + parameter + '\"';\r\n  }\r\n\r\n  /**\r\n   * Installs a package by name and version in the specified directory.\r\n   */\r\n  public static installPackageInDirectory(\r\n    directory: string,\r\n    packageName: string,\r\n    version: string,\r\n    tempPackageTitle: string,\r\n    maxInstallAttempts: number,\r\n    suppressOutput: boolean = false\r\n  ): void {\r\n    if (fsx.existsSync(directory)) {\r\n      console.log('Deleting old files from ' + directory);\r\n    }\r\n    fsx.emptyDirSync(directory);\r\n\r\n    const npmPackageJson: IPackageJson = {\r\n      dependencies: {\r\n        [packageName]: version\r\n      },\r\n      description: 'Temporary file generated by the Rush tool',\r\n      name: tempPackageTitle,\r\n      private: true,\r\n      version: '0.0.0'\r\n    };\r\n    JsonFile.save(npmPackageJson, path.join(directory, 'package.json'));\r\n\r\n    console.log(os.EOL + 'Running \"npm install\" in ' + directory);\r\n\r\n    // NOTE: Here we use whatever version of NPM we happen to find in the PATH\r\n    Utilities.executeCommandWithRetry(maxInstallAttempts, 'npm', ['install'], directory,\r\n      Utilities._createEnvironmentForRushCommand(''),\r\n      suppressOutput);\r\n  }\r\n\r\n  public static withFinally<T>(options: { promise: Promise<T>, finally: () => void }): Promise<T> {\r\n    return options.promise\r\n      .then<T>((result: T) => {\r\n        try {\r\n          options.finally();\r\n        } catch (error) {\r\n          return Promise.reject(error);\r\n        }\r\n        return result;\r\n      })\r\n      .catch<T>((error: Error) => {\r\n        try {\r\n          options.finally();\r\n        } catch (innerError) {\r\n          return Promise.reject(innerError);\r\n        }\r\n        return Promise.reject(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returns a process.env environment suitable for executing lifecycle scripts.\r\n   * @param initCwd - The INIT_CWD environment variable\r\n   * @param initialEnvironment - an existing environment to copy instead of process.env\r\n   */\r\n  private static _createEnvironmentForRushCommand(initCwd: string,\r\n    initialEnvironment?: IEnvironment): { } {\r\n    if (initialEnvironment === undefined) {\r\n      initialEnvironment = process.env;\r\n    }\r\n    const environment: {} = {};\r\n    for (const key of Object.getOwnPropertyNames(initialEnvironment)) {\r\n      const normalizedKey: string = os.platform() === 'win32'\r\n        ? key.toUpperCase() : key;\r\n\r\n      // If Rush itself was invoked inside a lifecycle script, this may be set and would interfere\r\n      // with Rush's installations.  If we actually want it, we will set it explicitly below.\r\n      if (normalizedKey === 'INIT_CWD') {\r\n        continue;\r\n      }\r\n\r\n      // When NPM invokes a lifecycle event, it copies its entire configuration into environment\r\n      // variables.  Rush is supposed to be a deterministic controlled environment, so don't bring\r\n      // this along.\r\n      //\r\n      // NOTE: Longer term we should clean out the entire environment and use rush.json to bring\r\n      // back specific environment variables that the repo maintainer has determined to be safe.\r\n      if (normalizedKey.match(/^NPM_CONFIG_/)) {\r\n        continue;\r\n      }\r\n\r\n      environment[key] = initialEnvironment[key];\r\n    }\r\n\r\n     // When NPM invokes a lifecycle script, it sets an environment variable INIT_CWD that remembers\r\n     // the directory that NPM started in.  This allows naive scripts to change their current working directory\r\n     // and invoke NPM operations, while still be able to find a local .npmrc file.  Although Rush recommends\r\n     // for toolchain scripts to be professionally written (versus brittle stuff like\r\n     // \"cd ./lib && npm run tsc && cd ..\"), we support INIT_CWD for compatibility.\r\n     //\r\n     // More about this feature: https://github.com/npm/npm/pull/12356\r\n     if (initCwd) {\r\n       environment['INIT_CWD'] = initCwd; // tslint:disable-line:no-string-literal\r\n     }\r\n\r\n    return environment;\r\n  }\r\n\r\n  /**\r\n   * Executes the command with the specified command-line parameters, and waits for it to complete.\r\n   * The current directory will be set to the specified workingDirectory.\r\n   */\r\n  private static _executeCommandInternal(\r\n    command: string, args: string[], workingDirectory: string,\r\n    stdio: (string|number)[] | undefined,\r\n    environment?: IEnvironment,\r\n    keepEnvironment: boolean = false\r\n  ): child_process.SpawnSyncReturns<Buffer> {\r\n\r\n    const options: child_process.SpawnSyncOptions = {\r\n      cwd: workingDirectory,\r\n      shell: true,\r\n      stdio: stdio,\r\n      env: keepEnvironment ? environment : Utilities._createEnvironmentForRushCommand('', environment)\r\n    };\r\n\r\n    // This is needed since we specify shell=true below.\r\n    // NOTE: On Windows if we escape \"NPM\", the spawnSync() function runs something like this:\r\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"\"NPM\" \"install\"\"' ]\r\n    //\r\n    // Due to a bug with Windows cmd.exe, the npm.cmd batch file's \"%~dp0\" variable will\r\n    // return the current working directory instead of the batch file's directory.\r\n    // The workaround is to not escape, npm, i.e. do this instead:\r\n    //   [ 'C:\\\\Windows\\\\system32\\\\cmd.exe', '/s', '/c', '\"npm \"install\"\"' ]\r\n    //\r\n    // We will come up with a better solution for this when we promote executeCommand()\r\n    // into node-core-library, but for now this hack will unblock people:\r\n\r\n    // Only escape the command if it actually contains spaces:\r\n    const escapedCommand: string = command.indexOf(' ') < 0 ? command\r\n      : Utilities.escapeShellParameter(command);\r\n\r\n    const escapedArgs: string[] = args.map((x) => Utilities.escapeShellParameter(x));\r\n\r\n    let result: child_process.SpawnSyncReturns<Buffer> = child_process.spawnSync(escapedCommand,\r\n      escapedArgs, options);\r\n\r\n    /* tslint:disable:no-any */\r\n    if (result.error && (result.error as any).errno === 'ENOENT') {\r\n      // This is a workaround for GitHub issue #25330\r\n      // https://github.com/nodejs/node-v0.x-archive/issues/25330\r\n      result = child_process.spawnSync(command + '.cmd', args, options);\r\n    }\r\n    /* tslint:enable:no-any */\r\n\r\n    Utilities._processResult(result);\r\n    return result;\r\n  }\r\n\r\n  private static _processResult(result: child_process.SpawnSyncReturns<Buffer>): void {\r\n    if (result.error) {\r\n      result.error.message += os.EOL + (result.stderr ? result.stderr.toString() + os.EOL : '');\r\n      throw result.error;\r\n    }\r\n\r\n    if (result.status) {\r\n      throw new Error('The command failed with exit code ' + result.status + os.EOL +\r\n        (result.stderr ? result.stderr.toString() : ''));\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}