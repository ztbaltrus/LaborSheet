{
  "kind": "package",
  "name": "@microsoft/sp-component-base",
  "summary": [
    {
      "kind": "text",
      "text": "SharePoint Framework support for building client-side components"
    }
  ],
  "remarks": [
    {
      "kind": "text",
      "text": "This package supports development of client-side components (e.g. web parts, client-side extensions, and applications) built using the SharePoint Framework. It defines the base classes and interfaces for functionality that is common across all client-side component types."
    }
  ],
  "exports": {
    "BaseComponent": {
      "kind": "class",
      "extends": "",
      "implements": "ISPEventObserver",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The base class for client-side components such as BaseClientSideWebPart or BaseExtension."
        }
      ],
      "remarks": [
        {
          "kind": "text",
          "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the BaseComponent class."
        },
        {
          "kind": "paragraph"
        }
      ],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentId": {
          "kind": "property",
          "signature": "readonly componentId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the component identifier as defined in the componentâ€™s associated manifest."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Each client-side component has an associated manifest that is used by the sp-loader to load its scripts, and which may include additional metadata about the component. The manifest is uniquely identified using a text string containing a lower case GUID value."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "context": {
          "kind": "property",
          "signature": "protected context: BaseComponentContext;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "BaseComponentContext",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Use the context object to access common services and state associated with the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Child classes are expected to override this field by redeclaring it with a specialized type. It is meant to be a read-only property; the type cannot be declared as read-only in the base class (because it is initialized outside the constructor), but child classes should redeclare it as readonly."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Third-party code generally does not need to call this method; it's invoked automatically when the lifecycle ends for a web part or extension. To perform custom cleanup when your component is disposed, override the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BaseComponent.onDispose"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-component-base",
                "exportName": "BaseComponent",
                "memberName": "onDispose"
              }
            },
            {
              "kind": "text",
              "text": " method."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "instanceId": {
          "kind": "property",
          "signature": "readonly instanceId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A unique identifier for the instance of the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "A component implementation can be loaded multiple times on the page. For example, if the component is a charting web part, multiple instances of this web part could be added to the SharePoint canvas. The instanceId uniquely identifies each of these instances."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the component has been already disposed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "manifest": {
          "kind": "property",
          "signature": "readonly manifest: IClientSideComponentManifest;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "IClientSideComponentManifest",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Provides access to the manifest for the client-side component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "Child classes can override this with more specialized manifest types."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDispose": {
          "kind": "method",
          "signature": "protected onDispose(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This event method is called at the end of the component's lifecycle. It provides an opportunity to release any associated resources, cancel any outstanding requests, etc."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BaseComponentContext": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The base class for context objects for client-side components."
        }
      ],
      "remarks": [
        {
          "kind": "text",
          "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the BaseComponentContext class."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "A \"context\" object is a collection of well-known services and other objects that are likely to be needed by business logic that interacts with a associated component. Each component type has its own specialized subclass of BaseComponentContext, e.g. WebPartContext for web parts, ExtensionContext for client-side extensions, and so on."
        }
      ],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "aadHttpClientFactory": {
          "kind": "property",
          "signature": "readonly aadHttpClientFactory: AadHttpClientFactory;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "AadHttpClientFactory",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of AadHttpClientFactory created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "aadTokenProviderFactory": {
          "kind": "property",
          "signature": "readonly aadTokenProviderFactory: AadTokenProviderFactory;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "AadTokenProviderFactory",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of AadTokenProviderFactory created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the base component context."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "dynamicDataProvider": {
          "kind": "property",
          "signature": "readonly dynamicDataProvider: DynamicDataProvider;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "DynamicDataProvider",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Dynamic Data Provider associated with the component."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dynamicDataSourceManager": {
          "kind": "property",
          "signature": "readonly dynamicDataSourceManager: DynamicDataSourceManager;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "DynamicDataSourceManager",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Dynamic Data Source Manager associated with the component."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "graphHttpClient": {
          "kind": "property",
          "signature": "readonly graphHttpClient: GraphHttpClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "GraphHttpClient",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": ""
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of GraphHttpClient created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "httpClient": {
          "kind": "property",
          "signature": "readonly httpClient: HttpClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HttpClient",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of HttpClient created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "instanceId": {
          "kind": "property",
          "signature": "readonly instanceId: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A unique identifier for the instance of the component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "A component implementation can be loaded multiple times on the page. For example, if the component is a charting web part, multiple instances of this web part could be added to the SharePoint canvas. The instanceId uniquely identifies each of these instances."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the context is disposed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "manifest": {
          "kind": "property",
          "signature": "readonly manifest: IClientSideComponentManifest;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "IClientSideComponentManifest",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Manifest for the client side component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "msGraphClientFactory": {
          "kind": "property",
          "signature": "readonly msGraphClientFactory: MSGraphClientFactory;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "MSGraphClientFactory",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of MSGraphClientFactory created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pageContext": {
          "kind": "property",
          "signature": "readonly pageContext: PageContext;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "PageContext",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The page context provides standard definitions for common SharePoint objects that need to be shared between the client-side application, web parts, and other components."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "serviceScope": {
          "kind": "property",
          "signature": "readonly serviceScope: ServiceScope;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "ServiceScope",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The associated "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "@microsoft/sp-core-library:ServiceScope"
                }
              ],
              "target": {
                "scopeName": "@microsoft",
                "packageName": "sp-core-library",
                "exportName": "ServiceScope",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " for this component."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "A child service scope is created for each client-side component."
            }
          ],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spHttpClient": {
          "kind": "property",
          "signature": "readonly spHttpClient: SPHttpClient;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "SPHttpClient",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The instance of SpHttpClient created for this instance of component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "DynamicDataProvider": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The Dynamic Data Provider allows components to consume Dynamic Data. It allows components to request Dynamic Data sources and register/unregister to those."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the Dynamic Data Provider."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getAvailableSources": {
          "kind": "method",
          "signature": "getAvailableSources(): ReadonlyArray<IDynamicDataSource>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ReadonlyArray<IDynamicDataSource>",
            "description": [
              {
                "kind": "text",
                "text": "Read-only array with all available sources."
              }
            ]
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a list with all available Dynamic Data Sources."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the Dynamic Data Provider is disposed."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "registerAvailableSourcesChanged": {
          "kind": "method",
          "signature": "registerAvailableSourcesChanged(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to execute when the sources are updated."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback to an event that raises when the list of available Dynamic Data Sources is updated."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "registerPropertyChanged": {
          "kind": "method",
          "signature": "registerPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "propertyId": {
              "name": "propertyId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the property of the source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to execute when the source updates its data."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback for updates when a property is changed in a Dynamic Data source."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "registerSourceChanged": {
          "kind": "method",
          "signature": "registerSourceChanged(sourceId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to execute when the source updates its data."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback for updates when a Dynamic Data source is changed. This happens when any property is updated within the source."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryGetSource": {
          "kind": "method",
          "signature": "tryGetSource(id: string): IDynamicDataSource | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IDynamicDataSource | undefined",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns a Dynamic Data Source, by its id. If the source is not present, it returns undefined."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregisterAvailableSourcesChanged": {
          "kind": "method",
          "signature": "unregisterAvailableSourcesChanged(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to remove from the registration. Must be the same it was registered with."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback to an event that raises when the list of available Dynamic Data Sources is updated."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregisterPropertyChanged": {
          "kind": "method",
          "signature": "unregisterPropertyChanged(sourceId: string, propertyId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "propertyId": {
              "name": "propertyId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the property of the source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to remove from the registration. Must be the same it was registered with."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback for updates when a property is changed in a Dynamic Data source."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregisterSourceChanged": {
          "kind": "method",
          "signature": "unregisterSourceChanged(sourceId: string, callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "sourceId": {
              "name": "sourceId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data Source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Function to remove from the registration. Must be the same it was registered with."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback for updates when a Dynamic Data source is changed."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DynamicDataSourceManager": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The Dynamic Data Source Manager is responsible for: - Constructing the dynamic data source - Allowing initialization of the dynamic data source by a component - Allowing data source to update its metadata and notify when data has been updated."
        }
      ],
      "remarks": [],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disposes the resources held by the Dynamic Data source."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "initializeSource": {
          "kind": "method",
          "signature": "initializeSource(callableFunctions: IDynamicDataCallables): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callableFunctions": {
              "name": "callableFunctions",
              "description": [
                {
                  "kind": "text",
                  "text": "Set of methods exposed by the Dynamic Data Source to get the data. These apis are called by the consumer to retrieve properties, their values etc.,"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "IDynamicDataCallables"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initializes the Dynamic Data Source for the component."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the DynamicDataSourceManager is disposed."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "notifyPropertyChanged": {
          "kind": "method",
          "signature": "notifyPropertyChanged(propertyId: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "propertyId": {
              "name": "propertyId",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the updated property in the source."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Notifies that this source has updated a specific property."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "When invoked, it enables to broadcast the notification to all the consumers who have registered to this notification from this source."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "notifySourceChanged": {
          "kind": "method",
          "signature": "notifySourceChanged(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Notifies that this source has updated its data."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "When invoked, it enables to broadcast the notification to all the consumers who have registered to this notification from this source."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateMetadata": {
          "kind": "method",
          "signature": "updateMetadata(metadata: Partial<IDynamicDataSourceMetadata>): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "metadata": {
              "name": "metadata",
              "description": [
                {
                  "kind": "text",
                  "text": "Partial of the metadata."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "Partial<IDynamicDataSourceMetadata>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the metadata of the Dynamic Data Source. It allows to update fields like title or description. Auto-generated fields like alias, componentId or instanceId cannot be updated."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DynamicProperty": {
      "kind": "class",
      "extends": "",
      "implements": "IDisposable",
      "typeParameters": [
        "TValue"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Serializable object that simplifies usage of Dynamic Data."
        }
      ],
      "remarks": [
        {
          "kind": "text",
          "text": "This is built for usage in Web Part properties, and modified through the property pane. Can be initialized with a default callback. Web parts initialize with the render method so if the 3rd party developer does nothing, a change in the dynamic data will re-render the web part automatically."
        }
      ],
      "isBeta": true,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(provider: DynamicDataProvider, callback?: () => void);",
          "parameters": {
            "provider": {
              "name": "provider",
              "description": [
                {
                  "kind": "text",
                  "text": "Dynamic Data Provider."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "DynamicDataProvider"
            },
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Optional. Default callback to be registered for updates in the Dynamic Data source."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Create a new Dynamic Property object."
            }
          ],
          "remarks": []
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This method is called to permanently dispose the object."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "After the object has been disposed, do not call its methods or access its properties."
            }
          ],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasDefaultCallback": {
          "kind": "method",
          "signature": "hasDefaultCallback(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the object has a default callback."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isDisposed": {
          "kind": "property",
          "signature": "readonly isDisposed: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the dispose() method has been called. Once an object is disposed, it remains in this state permanently."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "After the object has been disposed, do not call its methods or access its properties."
            }
          ],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "reference": {
          "kind": "property",
          "signature": "readonly reference: string | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DynamicDataReference string that the Dynamic Data object points to. The reference is of the form <source>:<property>:<path>."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "If the Dynamic Data object is set up with static data, this returns undefined."
            }
          ],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "register": {
          "kind": "method",
          "signature": "register(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Callback function to register."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Registers a callback function for updates on the associated Dynamic Data Source."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeDefaultCallback": {
          "kind": "method",
          "signature": "removeDefaultCallback(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Removes the registration for the default callback."
            }
          ],
          "remarks": [
            {
              "kind": "text",
              "text": "This can be useful for advanced users who only want their custom callbacks."
            }
          ],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setReference": {
          "kind": "method",
          "signature": "setReference(reference: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "reference": {
              "name": "reference",
              "description": [
                {
                  "kind": "text",
                  "text": "Id of the Dynamic Data."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets a Dynamic data id in the Dynamic Data object."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setValue": {
          "kind": "method",
          "signature": "setValue(value: TValue): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [
                {
                  "kind": "text",
                  "text": "Value for the Dynamic Data."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "TValue"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets a static value in the Dynamic Data object."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryGetSource": {
          "kind": "method",
          "signature": "tryGetSource(): IDynamicDataSource | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IDynamicDataSource | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the Dynamic Data Source that the Dynamic Data object refers to. Returns undefined if the source doesn't exist."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryGetValue": {
          "kind": "method",
          "signature": "tryGetValue(): TValue | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "TValue | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns the value of the Dynamic Data object. Returns undefined if the source or the data doesn't exist."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unregister": {
          "kind": "method",
          "signature": "unregister(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Callback function to unregister."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unregisters a callback function for updates on the associated Dynamic Data Source. The callback function must be the same it was registered with."
            }
          ],
          "remarks": [],
          "isBeta": true,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    }
  }
}
