import { Validate, _SPFlight } from '@microsoft/sp-core-library';
import { isEqual } from '@microsoft/sp-lodash-subset';
import { _DynamicDataManager } from '@microsoft/sp-dynamic-data';
var DynamicDataProvider = (function () {
    function DynamicDataProvider() {
        this._isDisposed = false;
        this._isInitialized = false;
        this._isSourcesChangedEventListenerAdded = false;
    }
    DynamicDataProvider._isDynamicDataEnabled = function () {
        return _SPFlight.isEnabled(210 );
    };
    DynamicDataProvider.prototype._initialize = function (component, serviceScope) {
        Validate.isNotNullOrUndefined(component, 'component');
        Validate.isNotNullOrUndefined(serviceScope, 'serviceScope');
        this._component = component;
        this._pendingRegistrations = new Set();
        this._dynamicDataManager = serviceScope.consume(_DynamicDataManager.serviceKey);
        this._isInitialized = true;
        this._onSourcesChanged = this._onSourcesChanged.bind(this);
    };
    DynamicDataProvider.prototype.dispose = function () {
        if (!this._isDisposed) {
            delete this._pendingRegistrations;
            this._dynamicDataManager.sourcesChangedEvent.remove(this._component, this._onSourcesChanged);
            delete this._dynamicDataManager;
            delete this._component;
            this._isInitialized = false;
            this._isDisposed = true;
        }
    };
    Object.defineProperty(DynamicDataProvider.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    DynamicDataProvider.prototype.registerSourceChanged = function (sourceId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        var availableSourceIds = this.getAvailableSources().map(function (source) { return source.id; });
        if (availableSourceIds.indexOf(sourceId) !== -1) {
            this._dynamicDataManager.registerSourceChanged(sourceId, this._component, callback);
        }
        else {
            this._addPendingRegistration({ id: sourceId, callback: callback });
        }
    };
    DynamicDataProvider.prototype.unregisterSourceChanged = function (sourceId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        var registration = { id: sourceId, callback: callback };
        if (!this._pendingRegistrations.has(registration)) {
            this._dynamicDataManager.unregisterSourceChanged(sourceId, this._component, callback);
        }
        else {
            this._removePendingRegistration(registration);
        }
    };
    DynamicDataProvider.prototype.registerPropertyChanged = function (sourceId, propertyId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNonemptyString(propertyId, 'propertyId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        var availableSourceIds = this.getAvailableSources().map(function (source) { return source.id; });
        if (availableSourceIds.indexOf(sourceId) !== -1) {
            this._dynamicDataManager.registerPropertyChanged(sourceId, propertyId, this._component, callback);
        }
        else {
            this._addPendingRegistration({ id: sourceId, propertyId: propertyId, callback: callback });
        }
    };
    DynamicDataProvider.prototype.unregisterPropertyChanged = function (sourceId, propertyId, callback) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNonemptyString(propertyId, 'propertyId');
        Validate.isNotNullOrUndefined(callback, 'callback');
        var registration = { id: sourceId, callback: callback, propertyId: propertyId };
        if (!this._pendingRegistrations.has(registration)) {
            this._dynamicDataManager.unregisterPropertyChanged(sourceId, propertyId, this._component, callback);
        }
        else {
            this._removePendingRegistration(registration);
        }
    };
    DynamicDataProvider.prototype.registerAvailableSourcesChanged = function (callback) {
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._assertNotDisposed();
        this._assertInitialized();
        this._dynamicDataManager.sourcesChangedEvent.add(this._component, callback);
    };
    DynamicDataProvider.prototype.unregisterAvailableSourcesChanged = function (callback) {
        Validate.isNotNullOrUndefined(callback, 'callback');
        this._assertNotDisposed();
        this._assertInitialized();
        this._dynamicDataManager.sourcesChangedEvent.remove(this._component, callback);
    };
    DynamicDataProvider.prototype.getAvailableSources = function () {
        this._assertNotDisposed();
        this._assertInitialized();
        return this._dynamicDataManager.getSources();
    };
    DynamicDataProvider.prototype.tryGetSource = function (id) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNonemptyString(id, 'id');
        return this._dynamicDataManager.tryGetSource(id);
    };
    DynamicDataProvider.prototype._getData = function (dataReference) {
        this._assertNotDisposed();
        this._assertInitialized();
        Validate.isNotNullOrUndefined(dataReference, 'dataReference');
        var dataSource = this._dynamicDataManager.tryGetSource(dataReference.sourceId);
        if (!dataSource) {
            return undefined;
        }
        var data = dataSource.getPropertyValue(dataReference.property); 
        if (dataReference.propertyPath) {
            var subpaths = dataReference.propertyPath.split('.');
            subpaths.forEach(function (subpath) {
                var sps = subpath.split(/\[|\]/);
                sps.forEach(function (sp) {
                    if (!!sp) {
                        data = data[sp];
                    }
                });
            });
        }
        return data;
    };
    DynamicDataProvider.prototype._onSourcesChanged = function () {
        var _this = this;
        var availableSourceIds = this.getAvailableSources().map(function (source) { return source.id; });
        this._pendingRegistrations.forEach(function (src) {
            if (availableSourceIds.indexOf(src.id) !== -1 && !src.propertyId) {
                if (!src.propertyId) {
                    _this._dynamicDataManager.registerSourceChanged(src.id, _this._component, src.callback);
                }
                else {
                    _this._dynamicDataManager.registerPropertyChanged(src.id, src.propertyId, _this._component, src.callback);
                }
                _this._pendingRegistrations.delete(src);
            }
        });
    };
    DynamicDataProvider.prototype._assertNotDisposed = function () {
        if (this.isDisposed) {
            throw new Error('Dynamic Data Provider has been disposed');
        }
    };
    DynamicDataProvider.prototype._assertInitialized = function () {
        if (!this._isInitialized) {
            throw new Error('Dynamic Data Provider has not been initialized.');
        }
    };
    DynamicDataProvider.prototype._addPendingRegistration = function (registration) {
        if (!this.isRegistrationPending(registration)) {
            this._pendingRegistrations.add({
                id: registration.id,
                propertyId: registration.propertyId,
                callback: registration.callback
            });
        }
        if (!this._isSourcesChangedEventListenerAdded) {
            this._dynamicDataManager.sourcesChangedEvent.add(this._component, this._onSourcesChanged);
            this._isSourcesChangedEventListenerAdded = true;
        }
    };
    DynamicDataProvider.prototype._removePendingRegistration = function (registration) {
        this._pendingRegistrations.delete(registration);
        if (this._pendingRegistrations.size === 0) {
            this._dynamicDataManager.sourcesChangedEvent.remove(this._component, this._onSourcesChanged);
            this._isSourcesChangedEventListenerAdded = false;
        }
    };
    DynamicDataProvider.prototype.isRegistrationPending = function (incomingRegistration) {
        var found = false;
        this._pendingRegistrations.forEach(function (existingRegistration) {
            if (isEqual(existingRegistration, incomingRegistration)) {
                found = true;
            }
        });
        return found;
    };
    return DynamicDataProvider;
}());
export default DynamicDataProvider;
