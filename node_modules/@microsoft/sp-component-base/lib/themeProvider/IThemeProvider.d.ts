import { ITheme } from './themeInterfaces/ITheme';
import { SPEvent, SPEventArgs } from '@microsoft/sp-core-library';
/**
 * The object passed when the IThemeProvider.themeChangedEvent is raised.
 *
 * @internal
 */
export declare class ThemeChangedEventArgs extends SPEventArgs {
    /**
     * The new theme. If the value is undefined, then the theme was cleared.
     */
    readonly theme: ITheme | undefined;
}
/**
 * IThemeProvider enables theme variations for the scope it is created at. Consumers
 * can get the currently set theme, if any, and be notified of changes to the set theme.
 *
 * @internal
 */
export interface IThemeProvider {
    /**
     * Raised when the theme changes with the new theme as an argument.
     * @eventproperty
     */
    readonly themeChangedEvent: SPEvent<ThemeChangedEventArgs>;
    /**
     * Clear the currently set theme and raise the themeChangedEvent.
     *
     * @internal
     */
    _clearTheme(): void;
    /**
     * Change the theme and raise the themeChangedEvent.
     *
     * @param theme - The new theme.
     *
     * @internal
     */
    _setTheme(theme: ITheme): void;
    /**
     * If set, get the current theme.
     *
     * @returns The current theme or undefined.
     */
    tryGetTheme(): ITheme | undefined;
}
