import { ServiceKey, SPEvent, _SPEventManager, Validate } from '@microsoft/sp-core-library';
var FabricThemeProvider = (function () {
    function FabricThemeProvider(serviceScope, theme) {
        this._id = FabricThemeProvider._instanceCount++;
        this._theme = theme;
        this.themeChangedEvent = new SPEvent(this._themeChangedEventName);
    }
    Object.defineProperty(FabricThemeProvider.prototype, "_themeChangedEventName", {
        get: function () {
            return FabricThemeProvider._themeChangedEventNameLiteral + this._id;
        },
        enumerable: true,
        configurable: true
    });
    FabricThemeProvider.prototype._clearTheme = function () {
        this._theme = undefined;
        this._raiseEvent();
    };
    FabricThemeProvider.prototype._setTheme = function (theme) {
        Validate.isNotNullOrUndefined(theme, 'theme');
        this._theme = theme;
        this._raiseEvent();
    };
    FabricThemeProvider.prototype.tryGetTheme = function () {
        return this._theme;
    };
    FabricThemeProvider.prototype._raiseEvent = function () {
        _SPEventManager.instance.raiseEvent(this._themeChangedEventName, { theme: this._theme });
    };
    FabricThemeProvider.serviceKey = ServiceKey.create('sp-component-base.FabricThemeProvider', FabricThemeProvider);
    FabricThemeProvider._themeChangedEventNameLiteral = 'FabricThemeProvider.themeChangedEvent';
    FabricThemeProvider._instanceCount = 0;
    return FabricThemeProvider;
}());
export { FabricThemeProvider };
