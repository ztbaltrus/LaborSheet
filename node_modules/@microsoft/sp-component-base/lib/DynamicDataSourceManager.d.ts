import { IDisposable, ServiceScope } from '@microsoft/sp-core-library';
import { IDynamicDataCallables, IDynamicDataSourceMetadata } from '@microsoft/sp-dynamic-data';
import BaseComponent from './BaseComponent';
/**
 * The Dynamic Data Source Manager is responsible for:
 *  - Constructing the dynamic data source
 *  - Allowing initialization of the dynamic data source by a component
 *  - Allowing data source to update its metadata and notify when data has been updated.
 *
 * @beta
 */
export default class DynamicDataSourceManager implements IDisposable {
    private _dynamicDataManager;
    private _component;
    private _callableFunctions;
    private _source;
    private _isDisposed;
    private _isInitialized;
    /**
     * Initializes the Dynamic Data source manager for a specific component.
     *
     * @param component - Component on which the source is being constructed.
     *
     * @internal
     */
    _initialize(component: BaseComponent, serviceScope: ServiceScope): void;
    /**
     * Disposes the resources held by the Dynamic Data source.
     */
    dispose(): void;
    /**
     * Returns true if the DynamicDataSourceManager is disposed.
     */
    readonly isDisposed: boolean;
    /**
     * Initializes the Dynamic Data Source for the component.
     *
     * @param callableFunctions - Set of methods exposed by the Dynamic Data Source to get the data.
     *  These apis are called by the consumer to retrieve properties, their values etc.,
     */
    initializeSource(callableFunctions: IDynamicDataCallables): void;
    /**
     * Notifies that this source has updated its data.
     *
     * When invoked, it enables to broadcast the notification to all the consumers who have
     * registered to this notification from this source.
     */
    notifySourceChanged(): void;
    /**
     * Notifies that this source has updated a specific property.
     *
     * When invoked, it enables to broadcast the notification to all the consumers who have
     * registered to this notification from this source.
     *
     * @param propertyId - Id of the updated property in the source.
     */
    notifyPropertyChanged(propertyId: string): void;
    /**
     * Updates the metadata of the Dynamic Data Source.
     * It allows to update fields like title or description.
     * Auto-generated fields like alias, componentId or instanceId cannot be updated.
     *
     * @param metadata - Partial of the metadata.
     */
    updateMetadata(metadata: Partial<IDynamicDataSourceMetadata>): void;
    /**
     * Returns the auto generated dynamic data source id.
     *
     * This can be used by the source component, to know it's dynamic data source id.
     *
     * @alpha
     */
    readonly sourceId: string;
    private _buildSource(component);
    /**
     * This is the allowedEvents() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     */
    private _allowedEvents();
    /**
     * This is the sendEvent() that the consumer invokes to send an event to the source, with data.
     * @param eventName - Name of the event
     * @param data - Associated data
     */
    private _sendEvent(eventName, data);
    /**
     * This is the getPropertyDefinitions() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     * This assumes that the component has dynamic data and has a controller.
     */
    private _getPropertyDefinitions();
    /**
     * This is the getPropertyValue() that the DynamicDataSource actually exposes.
     * It does a copy of the data to ensure the consumer doesn't modify the source.
     * This assumes that the component has the source initialized.
     *
     * If there is no value returned, it checks whether the propertyId is incorrect or the value is actually undefined.
     */
    private _getPropertyValue(propertyId);
    private _buildId(component);
    private _buildMetadata(component);
    /**
     * Asserts if the event is a valid event on the source.
     *
     * Its an invalid event in two cases:
     *  1. When '_allowedEvent()' api returns undefined
     *  2. When the event name is not one of the allowed events on the source.
     *
     * @param eventName - Name of the event.
     */
    private _assertValidEvent(eventName);
    private _assertNotDisposed();
    private _assertInitialized();
    private _assertSourceExists();
}
