import * as lodash from '@microsoft/sp-lodash-subset';
import { Validate } from '@microsoft/sp-core-library';
import { DynamicDataReference } from '@microsoft/sp-dynamic-data';
import DynamicDataProvider from './DynamicDataProvider';
var DynamicProperty = (function () {
    function DynamicProperty(provider, callback) {
        this._hasValue = false;
        Validate.isNotNullOrUndefined(provider, 'provider');
        this['__type'] = DynamicProperty._TYPE_NAME;
        this._provider = provider;
        this._callbacks = new Set();
        this._pendingCallbacks = new Set();
        if (callback) {
            this._pendingCallbacks.add(callback);
            this._defaultCallback = callback;
        }
        else {
            this._defaultCallback = undefined;
        }
        this._onSourcesChanged = this._onSourcesChangedCallback.bind(this);
        this._cloneDeep = this._cloneDeep.bind(this);
        this._provider.registerAvailableSourcesChanged(this._onSourcesChanged);
    }
    DynamicProperty.prototype.setReference = function (reference) {
        var _this = this;
        Validate.isNonemptyString(reference, 'id');
        this._value = undefined;
        this._hasValue = false;
        var callbacks = this._callbacks;
        callbacks.forEach(function (callback) { return _this.unregister(callback); });
        this._reference = new DynamicDataReference(reference);
        this._sourceId = this._getSourceId();
        callbacks.forEach(function (callback) { return _this.register(callback); });
        this._onSourcesChangedCallback();
    };
    DynamicProperty.prototype.setValue = function (value) {
        var _this = this;
        var callbacks = this._callbacks;
        callbacks.forEach(function (callback) { return _this.unregister(callback); });
        this._value = value;
        this._reference = undefined;
        this._sourceId = undefined;
        this._hasValue = true;
        callbacks.forEach(function (callback) { return _this.register(callback); });
    };
    Object.defineProperty(DynamicProperty.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    DynamicProperty.prototype.dispose = function () {
        var _this = this;
        if (!this._isDisposed) {
            this._provider.unregisterAvailableSourcesChanged(this._onSourcesChanged);
            if (this._defaultCallback) {
                this.unregister(this._defaultCallback);
                delete this._defaultCallback;
            }
            this._callbacks.forEach(function (callback) { return _this.unregister(callback); });
            delete this._callbacks;
            delete this._onSourcesChanged;
            delete this._pendingCallbacks;
            delete this._provider;
            delete this._reference;
            delete this._sourceId;
            this._isDisposed = true;
        }
    };
    DynamicProperty.prototype.toJSON = function () {
        if (this._hasValue) {
            return {
                __type: DynamicProperty._TYPE_NAME,
                value: this._value
            };
        }
        else {
            return {
                __type: DynamicProperty._TYPE_NAME,
                reference: this._reference
            };
        }
    };
    Object.defineProperty(DynamicProperty.prototype, "reference", {
        get: function () {
            return this._hasValue ? undefined : this._reference.reference;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicProperty.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    DynamicProperty.prototype.tryGetValue = function () {
        Validate.isNotDisposed(this, 'DynamicData');
        return this._hasValue ? this._value : this._provider._getData(this._reference);
    };
    DynamicProperty.prototype.tryGetSource = function () {
        Validate.isNotDisposed(this, 'DynamicData');
        return this._hasValue ? undefined : this._provider.tryGetSource(this._sourceId);
    };
    DynamicProperty.prototype.register = function (callback) {
        Validate.isNotDisposed(this, 'DynamicData');
        if (!this._hasValue && this._sourceId && !!this._provider.tryGetSource(this._sourceId)) {
            this._provider.registerPropertyChanged(this._sourceId, this._getProperty(), callback);
            this._callbacks.add(callback);
        }
        else {
            this._pendingCallbacks.add(callback);
        }
    };
    DynamicProperty.prototype.unregister = function (callback) {
        Validate.isNotDisposed(this, 'DynamicData');
        if (!this._hasValue && this._sourceId && !!this._provider.tryGetSource(this._sourceId)) {
            this._provider.unregisterPropertyChanged(this._sourceId, this._getProperty(), callback);
        }
        this._pendingCallbacks.delete(callback);
        this._callbacks.delete(callback);
    };
    DynamicProperty.prototype.hasDefaultCallback = function () {
        return !!this._defaultCallback;
    };
    DynamicProperty.prototype.removeDefaultCallback = function () {
        if (this._defaultCallback) {
            this.unregister(this._defaultCallback);
            this._defaultCallback = undefined;
        }
    };
    DynamicProperty.prototype._getSourceId = function () {
        Validate.isNotDisposed(this, 'DynamicData');
        return this._hasValue ? '' : this._reference.sourceId;
    };
    DynamicProperty.prototype._getProperty = function () {
        Validate.isNotDisposed(this, 'DynamicData');
        return this._hasValue ? '' : this._reference.property;
    };
    DynamicProperty.prototype._getPropertyPath = function () {
        Validate.isNotDisposed(this, 'DynamicData');
        return this._hasValue ? '' : this._reference.propertyPath || '';
    };
    DynamicProperty.prototype._cloneDeep = function (instance) {
        return lodash.cloneDeepWith(instance, function (prop) {
            if (prop instanceof DynamicDataProvider) {
                return prop;
            }
        });
    };
    DynamicProperty.prototype._onSourcesChangedCallback = function () {
        var _this = this;
        if (!this._hasValue && this._sourceId && !!this._provider.tryGetSource(this._sourceId)) {
            var callbacksToAdd = this._pendingCallbacks;
            this._pendingCallbacks = new Set();
            callbacksToAdd.forEach(function (callback) {
                _this.register(callback);
                callback();
            });
        }
    };
    DynamicProperty._TYPE_NAME = 'DynamicProperty';
    return DynamicProperty;
}());
export default DynamicProperty;
