import Validate from './Validate';
import Text from './Text';
import strings from './SPCoreLibraryStrings.resx';
var Guid = (function () {
    function Guid(guid) {
        this._guid = guid;
    }
    Guid.newGuid = function (randomNumberGenerator) {
        return new Guid(Guid._generateGuid(randomNumberGenerator));
    };
    Guid.parse = function (guidString) {
        var guid = Guid.tryParse(guidString);
        if (!guid) {
            throw new Error(Text.format(strings.invalidGuidStringError, guidString));
        }
        return guid;
    };
    Guid.tryParse = function (guid) {
        if (guid) {
            guid = Guid._normalize(guid);
            if (Guid._guidRegEx.test(guid)) {
                return new Guid(guid);
            }
        }
        return undefined;
    };
    Guid.isValid = function (guid) {
        if (guid) {
            guid = Guid._normalize(guid);
            if (Guid._guidRegEx.test(guid)) {
                return true;
            }
        }
        return false;
    };
    Guid._normalize = function (guid) {
        Validate.isNonemptyString(guid, 'guid');
        var result = /^Guid\((.*)\)/i.exec(guid); 
        if (result) {
            guid = result[1];
        }
        if (guid.length === 38) {
            guid = guid.substr(1, 36);
        }
        return guid.toLowerCase();
    };
    Guid._generateGuid = function (randomNumberGenerator) {
        return 'AAAAAAAA-AAAA-4AAA-BAAA-AAAAAAAAAAAA'.replace(/[AB]/g, 
        function (character) {
            var randomNumber = randomNumberGenerator ? randomNumberGenerator.generate() : Math.random();
            var num = randomNumber * 16 | 0;
            var masked = character === 'A' ? num : (num & 0x3 | 0x8);
            return masked.toString(16);
        });
    };
    Guid.prototype.equals = function (guid) {
        Validate.isNotNullOrUndefined(guid, 'guid');
        return guid && this._guid.toString() === guid.toString();
    };
    Guid.prototype.toString = function () {
        return this._guid;
    };
    Guid.empty = new Guid('00000000-0000-0000-0000-000000000000');
    Guid._guidRegEx = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    return Guid;
}());
export default Guid;
