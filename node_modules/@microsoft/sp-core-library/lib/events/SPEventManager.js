import Validate from '../Validate';
import Text from '../Text';
import Log from '../log/Log';
var SPEventManager = (function () {
    function SPEventManager() {
        this._listeners = new Map();
        this._raisedEvents = new Map();
    }
    Object.defineProperty(SPEventManager, "instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new SPEventManager();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    SPEventManager.prototype.raiseEvent = function (eventName, eventArgs) {
        Validate.isNonemptyString(eventName, 'eventName');
        Validate.isNotNullOrUndefined(eventArgs, 'eventArgs');
        return this._raiseEventInternal(eventName, eventArgs);
    };
    SPEventManager.prototype.raiseStickyEvent = function (eventName, eventArgs) {
        Validate.isNonemptyString(eventName, 'eventName');
        Validate.isNotNullOrUndefined(eventArgs, 'eventArgs');
        this._raisedEvents.set(eventName, eventArgs);
        return this._raiseEventInternal(eventName, eventArgs);
    };
    SPEventManager.prototype.registerEvent = function (eventName, observer, eventHandler) {
        Validate.isNonemptyString(eventName, 'eventName');
        Validate.isNotNullOrUndefined(observer, 'component');
        Validate.isNotNullOrUndefined(eventHandler, 'eventHandler');
        if (!this._listeners.has(eventName)) {
            this._listeners.set(eventName, []);
        }
        this._listeners.get(eventName).push({ observer: observer, eventHandler: eventHandler });
        if (this._raisedEvents.has(eventName)) {
            eventHandler.call(observer, this._raisedEvents.get(eventName));
        }
    };
    SPEventManager.prototype.unregisterEvent = function (eventName, observer, eventHandler) {
        Validate.isNonemptyString(eventName, 'eventName');
        Validate.isNotNullOrUndefined(observer, 'component');
        Validate.isNotNullOrUndefined(eventHandler, 'eventHandler');
        if (!this._listeners.has(eventName)) {
            return;
        }
        var listeners = this._listeners.get(eventName);
        var filteredListeners = listeners.filter(function (el) { return el.observer !== observer || el.eventHandler !== eventHandler; });
        if (filteredListeners.length === listeners.length) {
            var errorMessage = Text.format(
            'Failed to remove event handler for component "{0}". Event handler was not registered.', observer.componentId);
            Log.error(SPEventManager._logSource, new Error(errorMessage));
        }
        this._listeners.set(eventName, filteredListeners);
    };
    SPEventManager.prototype.removeEvent = function (eventName) {
        Validate.isNonemptyString(eventName, 'eventName');
        this._listeners.delete(eventName);
    };
    SPEventManager.prototype.removeEventsByPrefix = function (eventNamePrefix) {
        var _this = this;
        Validate.isNonemptyString(eventNamePrefix, 'eventNamePrefix');
        var matchedKeys = [];
        this._listeners.forEach(function (value, key) {
            if (key.indexOf(eventNamePrefix) === 0) {
                matchedKeys.push(key);
            }
        });
        matchedKeys.forEach(function (key) { return _this._listeners.delete(key); });
    };
    SPEventManager.prototype._raiseEventInternal = function (eventName, eventArgs) {
        var _this = this;
        if (!this._listeners.has(eventName)) {
            return;
        }
        this._listeners.get(eventName).forEach(function (listener) {
            if (listener.observer.isDisposed) {
                _this.unregisterEvent(eventName, listener.observer, listener.eventHandler);
            }
            else {
                try {
                    listener.eventHandler.call(listener.observer, eventArgs);
                }
                catch (e) {
                    var errorMessage = Text.format(
                    'Failed to execute event handler for component "{0}"', listener.observer.componentId);
                    Log.error(SPEventManager._logSource, new Error(errorMessage));
                }
            }
        });
    };
    SPEventManager._logSource = 'SPEventManager';
    return SPEventManager;
}());
export default SPEventManager;
