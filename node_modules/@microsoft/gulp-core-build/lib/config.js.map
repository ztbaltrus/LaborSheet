{"version":3,"sources":["config.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,mCAA+B;AAC/B,mCAAoC;AAEpC,MAAM,2BAA2B,GAAW,MAAM,CAAC;AAEnD,wBAA+B,IAAY,EAAE,YAA+B;IAE1E,qDAAqD;IACrD,MAAM,WAAW,GAAW,2BAA2B,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;IAC7E,MAAM,QAAQ,GAAuB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC9D,MAAM,SAAS,GAAqB,YAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAE7D,iHAAiH;IACjH,wFAAwF;IACxF,MAAM,WAAW,GAAqB,CAAC,CAAC,iBAAS,GAAG,iBAAS,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;IAEnF,MAAM,CAAC,kBAAkB,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;AAC5E,CAAC;AAZD,wCAYC;AAED,sBAA6B,IAAY,EAAE,YAAsB;IAC/D,MAAM,WAAW,GAAqB,cAAc,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;IAEzE,MAAM,CAAC,WAAW,KAAK,MAAM,IAAI,WAAW,KAAK,IAAI,CAAC;AACxD,CAAC;AAJD,oCAIC;AAED,2BAA2B;AAC3B,4BAA4B,GAAG,MAAwC;IACvE,0BAA0B;IACxB,GAAG,CAAC,CAAC,MAAM,KAAK,IAAI,MAAM,CAAC,CAAC,CAAC;QAC3B,EAAE,CAAC,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAED,MAAM,CAAC,SAAS,CAAC;AACnB,CAAC","file":"config.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport { args } from './State';\r\nimport { getConfig } from './index';\r\n\r\nconst ENVIRONMENT_VARIABLE_PREFIX: string = 'GCB_';\r\n\r\nexport function getConfigValue(name: string, defaultValue?: string | boolean): string | boolean {\r\n\r\n  // Try to get config value from environment variable.\r\n  const envVariable: string = ENVIRONMENT_VARIABLE_PREFIX + name.toUpperCase();\r\n  const envValue: string | undefined = process.env[envVariable];\r\n  const argsValue: string | boolean = args[name.toLowerCase()];\r\n\r\n  // getConfig can be undefined during the first few calls to this function because the build config is initialized\r\n  // before the getConfig function is defined. In those cases, a defaultValue is provided.\r\n  const configValue: string | boolean = ((getConfig ? getConfig() : {}) || {})[name];\r\n\r\n  return _firstDefinedValue(argsValue, envValue, defaultValue, configValue);\r\n}\r\n\r\nexport function getFlagValue(name: string, defaultValue?: boolean): boolean {\r\n  const configValue: string | boolean = getConfigValue(name, defaultValue);\r\n\r\n  return configValue === 'true' || configValue === true;\r\n}\r\n\r\n/* tslint:disable:no-any */\r\nfunction _firstDefinedValue(...values: (string | boolean | undefined)[]): any {\r\n/* tslint:enable:no-any */\r\n  for (const value of values) {\r\n    if (value !== undefined) {\r\n      return value;\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}"],"sourceRoot":"../src"}