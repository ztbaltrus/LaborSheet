/// <reference types="node" />
import { GulpTask } from '@microsoft/gulp-core-build';
export interface IBaseCmdTaskConfig {
    /**
     * Optional list of custom args to pass to the tool
     */
    customArgs?: string[];
    /**
     * The path to the package if the task should override the version of the package.
     */
    overridePackagePath?: string;
    /**
     * The directory in which the tool should be invoked.
     */
    buildDirectory?: string;
}
/**
 * Options for a CmdTask.
 * @public
 */
export interface IBaseTaskOptions<TTaskConfig> {
    /**
     * The initial config of the task.
     */
    initialTaskConfig?: TTaskConfig;
    /**
     * The name of the package to resolve.
     */
    packageName: string;
    /**
     * The path to the binary to invoke inside the package.
     */
    packageBinPath: string;
}
/**
 * This base task provides support for finding and then executing a binary in a node package.
 *
 * @alpha
 */
export declare abstract class BaseCmdTask<TTaskConfig extends IBaseCmdTaskConfig> extends GulpTask<TTaskConfig> {
    private static __nodePath;
    private static readonly _nodePath;
    protected _packageName: string;
    protected _packageBinPath: string;
    protected _errorHasBeenLogged: boolean;
    constructor(name: string, options: IBaseTaskOptions<TTaskConfig>);
    executeTask(gulp: Object, completeCallback: (error?: string) => void): Promise<void> | undefined;
    protected readonly _buildDirectory: string;
    protected _onData(data: Buffer): void;
    protected _onError(data: Buffer): void;
    protected _onClose(code: number, hasErrors: boolean, resolve: () => void, reject: (error: Error) => void): void;
    protected _getArgs(): string[];
}
