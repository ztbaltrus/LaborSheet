{"version":3,"sources":["miniTasks/TslintCmdTask.ts"],"names":[],"mappings":"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","file":"TslintCmdTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport { JsonFile } from '@microsoft/node-core-library';\r\nimport * as TSLint from 'tslint';\r\n\r\nimport {\r\n  BaseCmdTask,\r\n  IBaseCmdTaskConfig\r\n} from './BaseCmdTask';\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface ITslintCmdTaskConfig extends IBaseCmdTaskConfig {\r\n  /**\r\n   * Optional list of custom args to pass to the tool\r\n   *\r\n   * @remarks\r\n   * Specifying a custom formatter will disable the standard error/warning reporting.\r\n   */\r\n  customArgs?: string[];\r\n\r\n  /**\r\n   * If true, displays warnings as errors. Defaults to false.\r\n   */\r\n  displayAsError?: boolean;\r\n}\r\n\r\n/**\r\n * @alpha\r\n */\r\nexport class TslintCmdTask extends BaseCmdTask<ITslintCmdTaskConfig> {\r\n  constructor() {\r\n    super(\r\n      'tslint',\r\n      {\r\n        initialTaskConfig: {\r\n          displayAsError: false\r\n        },\r\n        packageName: 'tslint',\r\n        packageBinPath: path.join('bin', 'tslint')\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return JsonFile.load(path.resolve(__dirname, '..', 'schemas', 'tslint-cmd.schema.json'));\r\n  }\r\n\r\n  public executeTask(gulp: Object, completeCallback: (error?: string) => void): Promise<void> | undefined {\r\n    if (this._customFormatterSpecified) {\r\n      this.logVerbose(\r\n        'A custom formatter has been specified in customArgs, so the default TSLint error logging ' +\r\n        'has been disabled.'\r\n      );\r\n    }\r\n\r\n    return super.executeTask(gulp, completeCallback);\r\n  }\r\n\r\n  protected _getArgs(): string[] {\r\n    const args: string[] = super._getArgs();\r\n\r\n    if (!this._customFormatterSpecified) {\r\n      // IFF no custom formatter options are specified by the rig/consumer, use the JSON formatter and\r\n      // log errors using the GCB API\r\n      args.push(...[\r\n        '--format', 'json'\r\n      ]);\r\n    }\r\n\r\n    args.push(...[\r\n      '--project', this._buildDirectory\r\n    ]);\r\n\r\n    return args;\r\n  }\r\n\r\n  protected _onClose(code: number, hasErrors: boolean, resolve: () => void, reject: (error: Error) => void): void {\r\n    if (this.taskConfig.displayAsError) {\r\n      super._onClose(code, hasErrors, resolve, reject);\r\n    } else {\r\n      resolve();\r\n    }\r\n  }\r\n\r\n  protected _onData(data: Buffer): void {\r\n    if (!this._customFormatterSpecified) {\r\n      const dataStr: string = data.toString().trim();\r\n      const tslintErrorLogFn: (\r\n        filePath: string,\r\n        line: number,\r\n        column: number,\r\n        errorCode: string,\r\n        message: string\r\n      ) => void = this.taskConfig.displayAsError ? this.fileError.bind(this) : this.fileWarning.bind(this);\r\n\r\n      // TSLint errors are logged to stdout\r\n      try {\r\n        const errors: TSLint.IRuleFailureJson[] = JSON.parse(dataStr);\r\n        for (const error of errors) {\r\n          const pathFromRoot: string = path.relative(this.buildConfig.rootPath, error.name);\r\n          tslintErrorLogFn(\r\n            pathFromRoot,\r\n            error.startPosition.line + 1,\r\n            error.startPosition.character + 1,\r\n            error.ruleName,\r\n            error.failure\r\n          );\r\n        }\r\n      } catch (e) {\r\n        // If we fail to parse the JSON, it's likely TSLint encountered an error parsing the config file,\r\n        // or it experienced an inner error. In this case, log the output as an error regardless of the\r\n        // displayAsError value\r\n        this.logError(dataStr);\r\n      }\r\n    }\r\n  }\r\n\r\n  private get _customFormatterSpecified(): boolean {\r\n    const customArgs: string[] = super._getArgs();\r\n    return (\r\n      customArgs.indexOf('--formatters-dir') !== -1 ||\r\n      customArgs.indexOf('-s') !== -1 || // Shorthand for \"--formatters-dir\"\r\n      customArgs.indexOf('--format') !== -1 ||\r\n      customArgs.indexOf('-t') !== -1 // Shorthand for \"--format\"\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}