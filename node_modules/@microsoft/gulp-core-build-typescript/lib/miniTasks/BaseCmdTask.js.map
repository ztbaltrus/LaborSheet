{"version":3,"sources":["miniTasks/BaseCmdTask.ts"],"names":[],"mappings":"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","file":"BaseCmdTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as childProcess from 'child_process';\r\nimport * as path from 'path';\r\nimport * as os from 'os';\r\n\r\nimport {\r\n  JsonFile,\r\n  IPackageJson,\r\n  FileSystem\r\n} from '@microsoft/node-core-library';\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\n\r\nexport interface IBaseCmdTaskConfig {\r\n  /**\r\n   * Optional list of custom args to pass to the tool\r\n   */\r\n  customArgs?: string[];\r\n\r\n  /**\r\n   * The path to the package if the task should override the version of the package.\r\n   */\r\n  overridePackagePath?: string;\r\n\r\n  /**\r\n   * The directory in which the tool should be invoked.\r\n   */\r\n  buildDirectory?: string;\r\n}\r\n\r\n/**\r\n * Options for a CmdTask.\r\n * @public\r\n */\r\nexport interface IBaseTaskOptions<TTaskConfig> {\r\n  /**\r\n   * The initial config of the task.\r\n   */\r\n  initialTaskConfig?: TTaskConfig;\r\n\r\n  /**\r\n   * The name of the package to resolve.\r\n   */\r\n  packageName: string;\r\n\r\n  /**\r\n   * The path to the binary to invoke inside the package.\r\n   */\r\n  packageBinPath: string;\r\n}\r\n\r\n/**\r\n * This base task provides support for finding and then executing a binary in a node package.\r\n *\r\n * @alpha\r\n */\r\nexport abstract class BaseCmdTask<TTaskConfig extends IBaseCmdTaskConfig> extends GulpTask<TTaskConfig> {\r\n  private static __nodePath: string | undefined; // tslint:disable-line:variable-name\r\n  private static get _nodePath(): string | undefined {\r\n    if (!BaseCmdTask.__nodePath) {\r\n      try {\r\n        if (os.platform() === 'win32') {\r\n          // We're on Windows\r\n          const whereOutput: string = childProcess.execSync('where node', { stdio: [] }).toString();\r\n          const lines: string[] = whereOutput.split(os.EOL).filter((line) => !!line);\r\n\r\n          // take the first result, see https://github.com/Microsoft/web-build-tools/issues/759\r\n          BaseCmdTask.__nodePath = lines[0];\r\n        } else {\r\n          // We aren't on Windows - assume we're on *NIX or Darwin\r\n          BaseCmdTask.__nodePath = childProcess.execSync('which node', { stdio: [] }).toString();\r\n        }\r\n      } catch (e) {\r\n        return undefined;\r\n      }\r\n\r\n      BaseCmdTask.__nodePath = BaseCmdTask.__nodePath.trim();\r\n      if (!FileSystem.exists(BaseCmdTask.__nodePath)) {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    return BaseCmdTask.__nodePath;\r\n  }\r\n\r\n  protected _packageName: string;\r\n  protected _packageBinPath: string;\r\n  protected _errorHasBeenLogged: boolean;\r\n\r\n  constructor(name: string, options: IBaseTaskOptions<TTaskConfig>) {\r\n    super(name, options.initialTaskConfig);\r\n\r\n    this._packageName = options.packageName;\r\n    this._packageBinPath = options.packageBinPath;\r\n  }\r\n\r\n  public executeTask(gulp: Object, completeCallback: (error?: string) => void): Promise<void> | undefined {\r\n    let binaryPackagePath: string = require.resolve(this._packageName);\r\n    let packageJsonPath: string;\r\n    while (!FileSystem.exists(packageJsonPath = path.join(binaryPackagePath, 'package.json'))) {\r\n      const tempBinaryPackagePath: string = path.dirname(binaryPackagePath);\r\n      if (binaryPackagePath === tempBinaryPackagePath) {\r\n        // We've hit the disk root\r\n        completeCallback(`Unable to find the package.json file for ${this._packageName}.`);\r\n        return;\r\n      }\r\n\r\n      binaryPackagePath = tempBinaryPackagePath;\r\n    }\r\n\r\n    if (this.taskConfig.overridePackagePath) {\r\n      // The package version is being overridden\r\n      if (!FileSystem.exists(this.taskConfig.overridePackagePath)) {\r\n        completeCallback(\r\n          `The specified ${this._packageName} path (${this.taskConfig.overridePackagePath}) does not ` +\r\n          'exist'\r\n        );\r\n        return;\r\n      }\r\n\r\n      binaryPackagePath = this.taskConfig.overridePackagePath;\r\n    }\r\n\r\n    // Print the version\r\n    const packageJson: IPackageJson = JsonFile.load(packageJsonPath);\r\n    this.log(`${this._packageName} version: ${packageJson.version}`);\r\n\r\n    const binaryPath: string = path.resolve(binaryPackagePath, this._packageBinPath);\r\n    if (!FileSystem.exists(binaryPath)) {\r\n      completeCallback(\r\n        `The binary is missing. This indicates that ${this._packageName} is not ` +\r\n        'installed correctly.'\r\n      );\r\n      return;\r\n    }\r\n\r\n    return new Promise((resolve: () => void, reject: (error: Error) => void) => {\r\n      const nodePath: string | undefined = BaseCmdTask._nodePath;\r\n      if (!nodePath) {\r\n        reject(new Error('Unable to find node executable'));\r\n        return;\r\n      }\r\n\r\n      // Invoke the tool and watch for log messages\r\n      const spawnResult: childProcess.ChildProcess = childProcess.spawn(\r\n        nodePath,\r\n        [binaryPath, ...this._getArgs()],\r\n        {\r\n          cwd: this._buildDirectory,\r\n          env: process.env,\r\n          stdio: 'pipe'\r\n        }\r\n      );\r\n\r\n      spawnResult.stdout.on('data', this._onData.bind(this));\r\n      spawnResult.stderr.on('data', (data: Buffer) => {\r\n        this._errorHasBeenLogged = true;\r\n        this._onError(data);\r\n      });\r\n\r\n      spawnResult.on('close', (code) => this._onClose(code, this._errorHasBeenLogged, resolve, reject));\r\n    });\r\n  }\r\n\r\n  protected get _buildDirectory(): string {\r\n    return this.taskConfig.buildDirectory || this.buildConfig.rootPath;\r\n  }\r\n\r\n  protected _onData(data: Buffer): void {\r\n    this.log(data.toString().trim());\r\n  }\r\n\r\n  protected _onError(data: Buffer): void {\r\n    this.logError(data.toString().trim());\r\n  }\r\n\r\n  protected _onClose(code: number, hasErrors: boolean, resolve: () => void, reject: (error: Error) => void): void {\r\n    if (code !== 0 || hasErrors) {\r\n      reject(new Error(`exited with code ${code}`));\r\n    } else {\r\n      resolve();\r\n    }\r\n  }\r\n\r\n  protected _getArgs(): string[] {\r\n    return this.taskConfig.customArgs || [];\r\n  }\r\n}\r\n"],"sourceRoot":"../../../src"}