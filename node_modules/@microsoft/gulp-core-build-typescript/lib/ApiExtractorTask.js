"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.
// See LICENSE in the project root for license information.
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const ts = require("typescript");
const api_extractor_1 = require("@microsoft/api-extractor");
const gulpTypeScript = require("gulp-typescript");
const node_core_library_1 = require("@microsoft/node-core-library");
const TypeScriptConfiguration_1 = require("./TypeScriptConfiguration");
const ApiExtractorBaseTask_1 = require("./ApiExtractorBaseTask");
/**
 * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect
 * common problems and generate a report of the exported public API. The task uses the entry point of a project to
 * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.
 * @public
 */
class ApiExtractorTask extends ApiExtractorBaseTask_1.ApiExtractorBaseTask {
    updateExtractorOptions(extractorOptions, entryPointFile) {
        const typingsFilePath = path.join(this.buildConfig.rootPath, 'typings/tsd.d.ts');
        const otherFiles = node_core_library_1.FileSystem.exists(typingsFilePath) ? [typingsFilePath] : [];
        // tslint:disable-next-line:no-any
        const gulpTypeScriptSettings = TypeScriptConfiguration_1.TypeScriptConfiguration.getGulpTypescriptOptions(this.buildConfig).compilerOptions;
        TypeScriptConfiguration_1.TypeScriptConfiguration.fixupSettings(gulpTypeScriptSettings, this.logWarning, { mustBeCommonJsOrEsnext: true });
        const compilerOptions = gulpTypeScript.createProject(gulpTypeScriptSettings).options;
        const analysisFileList = api_extractor_1.Extractor.generateFilePathsForAnalysis(otherFiles.concat(entryPointFile));
        const compilerProgram = ts.createProgram(analysisFileList, compilerOptions);
        extractorOptions.compilerProgram = compilerProgram;
    }
    updateExtractorConfig(extractorConfig) {
        // Set the compiler to get the config at runtime
        extractorConfig.compiler = { configType: 'runtime' };
    }
}
exports.ApiExtractorTask = ApiExtractorTask;

//# sourceMappingURL=ApiExtractorTask.js.map
