{"version":3,"sources":["ApiExtractorBaseTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,6BAA6B;AAC7B,gEAAsD;AACtD,oEAA0D;AAC1D,4DAIkC;AA0FlC;;;;;GAKG;AACH,0BAA2C,SAAQ,0BAAiC;IAClF;QACE,KAAK,CACH,eAAe,EACf;YACE,OAAO,EAAE,KAAK;YACd,KAAK,EAAE,SAAS;YAChB,eAAe,EAAE,SAAS;YAC1B,aAAa,EAAE,SAAS;SACzB,CACF,CAAC;IACJ,CAAC;IAEM,UAAU;QACf,MAAM,CAAC,OAAO,CAAC,qCAAqC,CAAC,CAAC;IACxD,CAAC;IAEM,WAAW,CAAC,IAAiB,EAAE,gBAA0C;QAC9E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;YAC/D,gBAAgB,EAAE,CAAC;YACnB,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3B,gBAAgB,CAAC,kCAAkC,CAAC,CAAC;YACrD,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;YACnC,gBAAgB,CAAC,0CAA0C,CAAC,CAAC;YAC7D,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;YACrC,gBAAgB,CAAC,4CAA4C,CAAC,CAAC;YAC/D,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC;YACH,IAAI,cAAsB,CAAC;YAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,KAAK,cAAc,CAAC,CAAC,CAAC;gBAC7C,wFAAwF;gBACxF,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAC1E,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/E,CAAC;YAED,MAAM,eAAe,GAAqB;gBACxC,OAAO,EAAE;oBACP,oBAAoB,EAAE,cAAc;oBACpC,uBAAuB,EAAE,CAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAmB,CAAC,CAAE;iBACvE;gBACD,aAAa,EAAE;oBACb,OAAO,EAAE,IAAI;oBACb,eAAe,EAAE,IAAI,CAAC,UAAU,CAAC,eAAe;oBAChD,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU;iBACxC;gBACD,WAAW,EAAE;oBACX,OAAO,EAAE,IAAI;oBACb,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,aAAa;iBAC5C;aACkB,CAAC;YAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC;gBACtC,eAAe,CAAC,SAAS,GAAG;oBAC1B,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,iBAAiB;oBAC7C,wBAAwB,EAAE,IAAI,CAAC,UAAU,CAAC,wBAAwB;oBAClE,oBAAoB,EAAE,IAAI,CAAC,UAAU,CAAC,oBAAoB;oBAC1D,sBAAsB,EAAE,IAAI,CAAC,UAAU,CAAC,sBAAsB;iBAC/D,CAAC;YACJ,CAAC;YAED,MAAM,gBAAgB,GAAsB;gBAC1C,UAAU,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU;gBACxC,YAAY,EAAE;oBACZ,UAAU,EAAE,CAAC,OAAe,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;oBACzD,OAAO,EAAE,CAAC,OAAe,KAAK,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;oBAC/C,UAAU,EAAE,CAAC,OAAe,KAAK,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC;oBACzD,QAAQ,EAAE,CAAC,OAAe,KAAK,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;iBACtD;aACF,CAAC;YAEF,IAAI,CAAC,sBAAsB,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC;YAC9D,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;YAE5C,MAAM,SAAS,GAAc,IAAI,yBAAS,CAAC,eAAe,EAAE,gBAAgB,CAAC,CAAC;YAE9E,kFAAkF;YAClF,iDAAiD;YACjD,SAAS,CAAC,cAAc,EAAE,CAAC;QAC7B,CAAC;QAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;YAC5B,MAAM,CAAC;QACT,CAAC;QAED,gBAAgB,EAAE,CAAC;IACrB,CAAC;IAKO,sBAAsB;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,sDAAsD,CAAC,CAAC;YACtE,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,QAAQ,CAAC,gEAAgE,CAAC,CAAC;YAChF,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,8BAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,CAAC,cAAc,IAAI,CAAC,UAAU,CAAC,KAAK,kBAAkB,CAAC,CAAC;YACrE,MAAM,CAAC,KAAK,CAAC;QACf,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;CACF;AAxHD,oDAwHC","file":"ApiExtractorBaseTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as Gulp from 'gulp';\r\nimport * as path from 'path';\r\nimport { GulpTask } from '@microsoft/gulp-core-build';\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\nimport {\r\n  Extractor,\r\n  IExtractorOptions,\r\n  IExtractorConfig\r\n} from '@microsoft/api-extractor';\r\n\r\n/** @public */\r\nexport interface IApiExtractorTaskConfig {\r\n  /**\r\n   * Indicates whether the task should be run.\r\n   */\r\n  enabled: boolean;\r\n\r\n  /**\r\n   * The file path of the exported entry point, relative to the project folder.\r\n   *\r\n   * Example: \"lib/index.d.ts\"\r\n   */\r\n  entry?: string;\r\n\r\n  /**\r\n   * The file path of the folder containing API files to be reviewed, relative to\r\n   * the project folder.  This is part of an API review workflow:  During a build,\r\n   * the ApiExtractorTask will output an API file, e.g. \"my-project/temp/my-project.api.ts\".\r\n   * It will then compare this file against the last reviewed file,\r\n   * e.g. \"../api-review/my-project.api.ts\" (assuming that apiReviewFolder is \"../api-review\").\r\n   * If the files are different, the build will fail with an error message that instructs\r\n   * the developer to update the approved file, and then commit it to Git.  When they\r\n   * create a Pull Request, a VSO branch policy will look for changes under \"api-review/*\"\r\n   * and require signoff from the appropriate reviewers.\r\n   *\r\n   * Example: \"config\" (for a standalone project)\r\n   * Example: \"../../common/api-review\"  (for a Git repository with Rush)\r\n   */\r\n  apiReviewFolder?: string;\r\n\r\n  /**\r\n   * The file path of the folder containing the *.api.json output file containing\r\n   * API information. The default location is in the “dist” folder,\r\n   * e.g. my-project/dist/my-project.api.json. This file should be published as part\r\n   * of the NPM package. When building other projects that depend on this package,\r\n   * api-extractor will look for this file in the node_modules folder and use it as an input.\r\n   * The *.api.json file is also consumed by a tool at\r\n   * https://github.com/SharePoint/ts-spec-gen that generates an online API documentation.\r\n   */\r\n  apiJsonFolder?: string;\r\n\r\n  /**\r\n   * If true, then API Extractor will generate *.d.ts rollup files for this project.\r\n   * @beta\r\n   */\r\n  generateDtsRollup?: boolean;\r\n\r\n  /**\r\n   * Only used if generateDtsRollup=true.  If dtsRollupTrimming=true, then API Extractor will\r\n   * generate separate *.d.ts rollup files for internal, beta, and public release types;\r\n   * otherwise a single *.d.ts file will be generated with no trimming.\r\n   * @beta\r\n   */\r\n  dtsRollupTrimming: boolean;\r\n\r\n  /**\r\n   * This setting is only used if dtsRollupTrimming is true.\r\n   * It indicates the folder where \"npm publish\" will be run for an internal release.\r\n   * The default value is \"./dist/internal\".\r\n   *\r\n   * @beta\r\n   * An internal release will contain all definitions that are reachable from the entry point.\r\n   */\r\n  publishFolderForInternal?: string;\r\n\r\n  /**\r\n   * This setting is only used if dtsRollupTrimming is true.\r\n   * It indicates the folder where \"npm publish\" will be run for a beta release.\r\n   * The default value is \"./dist/beta\".\r\n   *\r\n   * @beta\r\n   * A beta release will contain all definitions that are reachable from the entry point,\r\n   * except definitions marked as \\@alpha or \\@internal.\r\n   */\r\n  publishFolderForBeta?: string;\r\n\r\n  /**\r\n   * This setting is only used if dtsRollupTrimming is true.\r\n   * It indicates the folder where \"npm publish\" will be run for a public release.\r\n   * The default value is \"./dist/public\".\r\n   *\r\n   * @beta\r\n   * A public release will contain all definitions that are reachable from the entry point,\r\n   * except definitions marked as \\@beta, \\@alpha, or \\@internal.\r\n   */\r\n  publishFolderForPublic?: string;\r\n}\r\n\r\n/**\r\n * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect\r\n * common problems and generate a report of the exported public API. The task uses the entry point of a project to\r\n * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.\r\n * @internal\r\n */\r\nexport abstract class ApiExtractorBaseTask extends GulpTask<IApiExtractorTaskConfig>  {\r\n  constructor() {\r\n    super(\r\n      'api-extractor',\r\n      {\r\n        enabled: false,\r\n        entry: undefined,\r\n        apiReviewFolder: undefined,\r\n        apiJsonFolder: undefined\r\n      }\r\n    );\r\n  }\r\n\r\n  public loadSchema(): Object {\r\n    return require('./schemas/api-extractor.schema.json');\r\n  }\r\n\r\n  public executeTask(gulp: typeof Gulp, completeCallback: (error?: string) => void): NodeJS.ReadWriteStream | void {\r\n    if (!this.taskConfig.enabled || !this._validateConfiguration()) {\r\n      completeCallback();\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.entry) {\r\n      completeCallback('taskConfig.entry must be defined');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.apiJsonFolder) {\r\n      completeCallback('taskConfig.apiJsonFolder must be defined');\r\n      return;\r\n    }\r\n\r\n    if (!this.taskConfig.apiReviewFolder) {\r\n      completeCallback('taskConfig.apiReviewFolder must be defined');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let entryPointFile: string;\r\n\r\n      if (this.taskConfig.entry === 'src/index.ts') {\r\n        // backwards compatibility for legacy projects that used *.ts files as their entry point\r\n        entryPointFile = path.join(this.buildConfig.rootPath, 'lib/index.d.ts');\r\n      } else {\r\n        entryPointFile = path.join(this.buildConfig.rootPath, this.taskConfig.entry);\r\n      }\r\n\r\n      const extractorConfig: IExtractorConfig = {\r\n        project: {\r\n          entryPointSourceFile: entryPointFile,\r\n          externalJsonFileFolders: [ path.join(__dirname, 'external-api-json') ]\r\n        },\r\n        apiReviewFile: {\r\n          enabled: true,\r\n          apiReviewFolder: this.taskConfig.apiReviewFolder,\r\n          tempFolder: this.buildConfig.tempFolder\r\n        },\r\n        apiJsonFile: {\r\n          enabled: true,\r\n          outputFolder: this.taskConfig.apiJsonFolder\r\n        }\r\n      } as IExtractorConfig;\r\n\r\n      if (this.taskConfig.generateDtsRollup) {\r\n        extractorConfig.dtsRollup = {\r\n          enabled: true,\r\n          trimming: !!this.taskConfig.dtsRollupTrimming,\r\n          publishFolderForInternal: this.taskConfig.publishFolderForInternal,\r\n          publishFolderForBeta: this.taskConfig.publishFolderForBeta,\r\n          publishFolderForPublic: this.taskConfig.publishFolderForPublic\r\n        };\r\n      }\r\n\r\n      const extractorOptions: IExtractorOptions = {\r\n        localBuild: !this.buildConfig.production,\r\n        customLogger: {\r\n          logVerbose: (message: string) => this.logVerbose(message),\r\n          logInfo: (message: string) => this.log(message),\r\n          logWarning: (message: string) => this.logWarning(message),\r\n          logError: (message: string) => this.logError(message)\r\n        }\r\n      };\r\n\r\n      this.updateExtractorOptions(extractorOptions, entryPointFile);\r\n      this.updateExtractorConfig(extractorConfig);\r\n\r\n      const extractor: Extractor = new Extractor(extractorConfig, extractorOptions);\r\n\r\n      // NOTE: processProject() returns false if errors or warnings occurred, however we\r\n      // already handle this above via our customLogger\r\n      extractor.processProject();\r\n    } catch (e) {\r\n      completeCallback(e.message);\r\n      return;\r\n    }\r\n\r\n    completeCallback();\r\n  }\r\n\r\n  protected abstract updateExtractorOptions(extractorOptions: IExtractorOptions, entryPointFile: string): void;\r\n  protected abstract updateExtractorConfig(extractorConfig: IExtractorConfig): void;\r\n\r\n  private _validateConfiguration(): boolean {\r\n    if (!this.taskConfig.entry) {\r\n      this.logError('Missing or empty \"entry\" field in api-extractor.json');\r\n      return false;\r\n    }\r\n    if (!this.taskConfig.apiReviewFolder) {\r\n      this.logError('Missing or empty \"apiReviewFolder\" field in api-extractor.json');\r\n      return false;\r\n    }\r\n\r\n    if (!FileSystem.exists(this.taskConfig.entry)) {\r\n      this.logError(`Entry file ${this.taskConfig.entry} does not exist.`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}