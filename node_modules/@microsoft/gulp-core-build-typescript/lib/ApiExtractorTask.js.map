{"version":3,"sources":["ApiExtractorTask.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAE3D,6BAA6B;AAC7B,iCAAiC;AACjC,4DAIkC;AAClC,kDAAmD;AACnD,oEAA0D;AAE1D,uEAAoE;AACpE,iEAA8D;AAE9D;;;;;GAKG;AACH,sBAA8B,SAAQ,2CAAoB;IAC9C,sBAAsB,CAAC,gBAAmC,EAAE,cAAsB;QAC1F,MAAM,eAAe,GAAW,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;QACzF,MAAM,UAAU,GAAa,8BAAU,CAAC,MAAM,CAAC,eAAe,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;QAEzF,kCAAkC;QAClC,MAAM,sBAAsB,GAC1B,iDAAuB,CAAC,wBAAwB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,eAAe,CAAC;QAErF,iDAAuB,CAAC,aAAa,CAAC,sBAAsB,EAAE,IAAI,CAAC,UAAU,EAAE,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC,CAAC;QAEjH,MAAM,eAAe,GAAuB,cAAc,CAAC,aAAa,CAAC,sBAAsB,CAAC,CAAC,OAAO,CAAC;QAEzG,MAAM,gBAAgB,GAAa,yBAAS,CAAC,4BAA4B,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;QAE7G,MAAM,eAAe,GAAe,EAAE,CAAC,aAAa,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC;QAExF,gBAAgB,CAAC,eAAe,GAAG,eAAe,CAAC;IACrD,CAAC;IAES,qBAAqB,CAAC,eAAiC;QAC/D,gDAAgD;QAChD,eAAe,CAAC,QAAQ,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC;IACvD,CAAC;CACF;AAxBD,4CAwBC","file":"ApiExtractorTask.js","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as path from 'path';\r\nimport * as ts from 'typescript';\r\nimport {\r\n  Extractor,\r\n  IExtractorOptions,\r\n  IExtractorConfig\r\n} from '@microsoft/api-extractor';\r\nimport gulpTypeScript = require('gulp-typescript');\r\nimport { FileSystem } from '@microsoft/node-core-library';\r\n\r\nimport { TypeScriptConfiguration } from './TypeScriptConfiguration';\r\nimport { ApiExtractorBaseTask } from './ApiExtractorBaseTask';\r\n\r\n/**\r\n * The ApiExtractorTask uses the api-extractor tool to analyze a project for public APIs. api-extractor will detect\r\n * common problems and generate a report of the exported public API. The task uses the entry point of a project to\r\n * find the aliased exports of the project. An api-extractor.ts file is generated for the project in the temp folder.\r\n * @public\r\n */\r\nexport class ApiExtractorTask extends ApiExtractorBaseTask  {\r\n  protected updateExtractorOptions(extractorOptions: IExtractorOptions, entryPointFile: string): void {\r\n    const typingsFilePath: string = path.join(this.buildConfig.rootPath, 'typings/tsd.d.ts');\r\n    const otherFiles: string[] = FileSystem.exists(typingsFilePath) ? [typingsFilePath] : [];\r\n\r\n    // tslint:disable-next-line:no-any\r\n    const gulpTypeScriptSettings: gulpTypeScript.Settings =\r\n      TypeScriptConfiguration.getGulpTypescriptOptions(this.buildConfig).compilerOptions;\r\n\r\n    TypeScriptConfiguration.fixupSettings(gulpTypeScriptSettings, this.logWarning, { mustBeCommonJsOrEsnext: true });\r\n\r\n    const compilerOptions: ts.CompilerOptions = gulpTypeScript.createProject(gulpTypeScriptSettings).options;\r\n\r\n    const analysisFileList: string[] = Extractor.generateFilePathsForAnalysis(otherFiles.concat(entryPointFile));\r\n\r\n    const compilerProgram: ts.Program = ts.createProgram(analysisFileList, compilerOptions);\r\n\r\n    extractorOptions.compilerProgram = compilerProgram;\r\n  }\r\n\r\n  protected updateExtractorConfig(extractorConfig: IExtractorConfig): void {\r\n    // Set the compiler to get the config at runtime\r\n    extractorConfig.compiler = { configType: 'runtime' };\r\n  }\r\n}\r\n"],"sourceRoot":"../src"}