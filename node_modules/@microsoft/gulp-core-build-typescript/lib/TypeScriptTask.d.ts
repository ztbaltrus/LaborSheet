import gulpType = require('gulp');
import ts = require('gulp-typescript');
import { GulpTask, IBuildConfig } from '@microsoft/gulp-core-build';
/**
 * Includes the experimental stripInternal feature
 * @public
 */
export interface ICompilerOptions extends ts.Settings {
    stripInternal?: boolean;
}
/**
 * @public
 */
export interface ITypeScriptTaskConfig {
    /**
     * Fails the build when errors occur.
     * @default true
     */
    failBuildOnErrors?: boolean;
    /**
     * Glob matches for files to be included in the build.
     */
    sourceMatch?: string[];
    /**
     * Glob matches for files to be passed through the build.
     */
    staticMatch?: string[];
    /**
     * Optional override for a custom reporter object to be passed into the TypeScript compiler.
     */
    reporter?: ts.reporter.Reporter;
    /**
     * Removes comments from all generated `.js` files. Will **not** remove comments from generated `.d.ts` files.
     * Defaults to false.
     */
    removeCommentsFromJavaScript?: boolean;
    /**
     * If true, creates sourcemap files which are useful for debugging. Defaults to true.
     */
    emitSourceMaps?: boolean;
    /**
     * The directory to write the compiled javascript and typings files to. Defaults to buildConfig.libFolder
     */
    libDir?: string;
    /**
     * If defined, emit compiled typescript modules here using `module: 'amd'`. Defaults to buildConfig.libAMDFolder
     */
    libAMDDir?: string;
    /**
     * If defined, emit compiled typescript modules here using `module: 'es6'`. Defaults to buildConfig.libES6Folder
     */
    libES6Dir?: string;
    /**
     * If defined, emit compiled typescript modules here using `module: 'esnext'`. Defaults to buildConfig.libESNextFolder
     */
    libESNextDir?: string;
    /**
     * If defined, apply these settings on top of the standardized project TypeScript compiler configuration.
     */
    configurationAddons?: ts.Settings;
}
/**
 * @public
 */
export declare class TypeScriptTask extends GulpTask<ITypeScriptTaskConfig> {
    private _tsProject;
    private _tsAMDProject;
    private _tsES6Project;
    private _tsESNextProject;
    constructor();
    loadSchema(): Object;
    executeTask(gulp: gulpType.Gulp, completeCallback: (error?: string) => void): void;
    getCleanMatch(buildConfig: IBuildConfig, taskConfig?: ITypeScriptTaskConfig): string[];
    /** Override the new mergeConfig API */
    mergeConfig(config: ITypeScriptTaskConfig): void;
    private _normalizeConfig(buildConfig?);
    private _compileProject(gulp, tsProject, destDir, allStreams, result);
    private _resolveSourceMapRoot(file);
}
