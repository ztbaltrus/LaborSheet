"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const node_core_library_1 = require("@microsoft/node-core-library");
const ServeTask_1 = require("@microsoft/gulp-core-build-serve/lib/ServeTask");
// NodeJS currently lacks an implementation of the URL class, so we should use our polyfill until NodeJS gets one
const URL_complete_1 = require("@microsoft/sp-polyfills/lib/url/experimental/URL-complete");
const CONFIG_CLI_PARAMETER = 'config';
exports.DEBUG_MANIFESTS_QUERY_PARAMETER = 'debugManifestsFile';
const LOAD_SPFX_QUERY_PARAMETER = 'loadSPFX';
const CUSTOM_ACTIONS_QUERY_PARAMETER = 'customActions';
const FIELD_CUSTOMIZERS_QUERY_PARAMETER = 'fieldCustomizers';
class SpfxServeTask extends ServeTask_1.ServeTask {
    constructor() {
        super('spfx-serve', {});
        this._defaultInitialPage = this.taskConfig.initialPage;
    }
    executeTask(gulp, completeCallback) {
        const selectedServeConfiguration = this.buildConfig.args[CONFIG_CLI_PARAMETER];
        let serveConfiguration;
        if (selectedServeConfiguration) {
            this.logVerbose(`Attempting to use serve configuration: "${selectedServeConfiguration}"`);
            serveConfiguration = this.taskConfig.serveConfigurations[selectedServeConfiguration];
            if (!serveConfiguration) {
                this.logWarning(`Selected serve configuration "${selectedServeConfiguration}" is not present in the ` +
                    'task configuration. Falling back to default configuration.');
            }
        }
        if (!serveConfiguration && this.taskConfig.serveConfigurations) {
            serveConfiguration = this.taskConfig.serveConfigurations.default;
            if (serveConfiguration && this.taskConfig.initialPage !== this._defaultInitialPage) {
                this.logWarning('Both a default serve configuration and an initialPage are specified. In this task, ' +
                    'the default configuration takes precedence. Consider removing the initialPage property.');
            }
        }
        if (serveConfiguration) {
            this.taskConfig.initialPage = this._convertServeConfigurationToPageUrl(serveConfiguration);
        }
        return super.executeTask(gulp, completeCallback);
    }
    loadSchema() {
        return node_core_library_1.JsonFile.load(path.join(__dirname, 'spfx-serve.schema.json'));
    }
    _getConfigFilePath() {
        // Make sure this task uses the "serve.json" config file, not "spfx-serve.json"
        return path.join(path.dirname(super._getConfigFilePath()), 'serve.json');
    }
    _convertServeConfigurationToPageUrl(serveConfiguration) {
        if (!serveConfiguration.pageUrl) {
            this.logError('The pageUrl property of the selected serve configuration must be set.');
            return undefined;
        }
        const url = new URL_complete_1.default(serveConfiguration.pageUrl);
        if (!url.searchParams.has(exports.DEBUG_MANIFESTS_QUERY_PARAMETER)) {
            const manifestsJsUrl = this._getBaseServeUrl();
            manifestsJsUrl.pathname = 'temp/manifests.js';
            url.searchParams.set(exports.DEBUG_MANIFESTS_QUERY_PARAMETER, manifestsJsUrl.href);
        }
        if (serveConfiguration.customActions || serveConfiguration.fieldCustomizers) {
            if (!url.searchParams.has(LOAD_SPFX_QUERY_PARAMETER)) {
                url.searchParams.set(LOAD_SPFX_QUERY_PARAMETER, 'true');
            }
        }
        if (serveConfiguration.customActions) {
            url.searchParams.set(CUSTOM_ACTIONS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.customActions));
        }
        if (serveConfiguration.fieldCustomizers) {
            url.searchParams.set(FIELD_CUSTOMIZERS_QUERY_PARAMETER, JSON.stringify(serveConfiguration.fieldCustomizers));
        }
        return url.href;
    }
    _getBaseServeUrl() {
        const taskConfig = this.taskConfig;
        return new URL_complete_1.default(`${taskConfig.https ? 'https' : 'http'}://${taskConfig.hostname}:${taskConfig.port}/`);
    }
}
exports.SpfxServeTask = SpfxServeTask;
//# sourceMappingURL=SpfxServeTask.js.map