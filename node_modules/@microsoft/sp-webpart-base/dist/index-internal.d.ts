/**
 * SharePoint Framework support for building web parts.
 * 
 * @remarks
 * This package defines the APIs used by developers to create a custom web part.
 * A web part is a reusable visual object that a page author can add to their content,
 * and customize using a property pane.  Examples of web parts include an embedded
 * video player, a map, a group calendar, a chart, etc.
 * 
 * @packagedocumentation
 */

/// <reference types="react" />
import { BaseComponent } from '@microsoft/sp-component-base';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { DisplayMode } from '@microsoft/sp-core-library';
import { HttpClient } from '@microsoft/sp-http';
import { IClientSideWebPartManifest } from '@microsoft/sp-module-interfaces';
import { IClientSideWebPartManifestInstance } from '@microsoft/sp-module-interfaces';
import { PageContext } from '@microsoft/sp-page-context';
import * as React from 'react';
import { ServiceKey } from '@microsoft/sp-core-library';
import { ServiceScope } from '@microsoft/sp-core-library';
import { SPEvent } from '@microsoft/sp-core-library';
import { SPEventArgs } from '@microsoft/sp-core-library';
import { SPHttpClient } from '@microsoft/sp-http';
import { Version } from '@microsoft/sp-core-library';

/**
 * This abstract class implements the the base functionality for a client side web part. Every client side web part
 * needs to inherit from this class.
 *
 * @remarks
 * Along with the base functionality, this class provides some APIs that can be
 * used by the web part. These APIs fall in two catagories.
 *
 * The first category of APIs provide data and functionality. Example, the web part context (i.e. this.context). This
 * API should be used to access contextual data relevant to this web part instance.
 *
 * The second category of APIs provide a base implementation for the web part lifecycle and can be overridden for an
 * updated implementation. The render() API is the only API that is mandatory to be implemented/overridden by a web
 * part. All other life cycle APIs have a base implementation and can be overridden based on the needs of the web part.
 * Please refer to the documentation of the individual APIs to make the right decision.
 *
 * @public
 */
export declare abstract class BaseClientSideWebPart<TProperties> extends BaseWebPart<TProperties> {
    /**
     * {@inheritdoc @microsoft/sp-component-base:BaseComponent.context}
     */
    protected readonly context: WebPartContext;
    private _firstTimeRenderPromises;
    private _renderedOnce;
    private _logSource;
    /**
     * Container width aloted to the web part
     */
    private _width;
    /**
     * True value reflects that web part is loaded as it was perceived in viewport.
     *
     * NOTE: Don't update it. This flag should be only read to know the lazy loading status.
     * NOTE: Don't use this flag to track position of the web part in viewport. Use this
     * flag only to track if web part rendering has been delayed or not.
     */
    private _internalIsInViewport;
    /**
     * A timer guard, QOS monitor and resolver delegate for the Async render scenarios. An async render scenario
     * is one in which the web part is rendering an IFRAME OR fetching async data outside of the onInit API
     * OR rendering an image tag. In these cases much of the web part rendering lifecycle is controlled by external
     * factors once the IFRAME is created or the data fetch request is sent OR the image tag is set. The web part
     * needs to call the renderCompleted API once the final rendering is complete and data is displayed.
     */
    private _asyncRenderGuardTimer;
    private _asyncRenderQosMonitor;
    private _renderPromiseResolver;
    private _renderPromiseRejecter;
    /**
     * Constructor for the BaseClientSideWebPart class.
     *
     * @remarks
     * If a sub class overrides the constructor, it needs to call super() as the first line of its constructor.
     * It is highly recommended that the web part use the OnInit API to perform any web part specific initialization.
     * Most of the web part features like this.context and this.properties are not available to be used before the
     * the onInit part of the web part loading lifecycle.
     *
     * e.g.
     *   constructor() {
     *     super();
     *     .
     *     . class specific constructor code ..
     *   }
     */
    constructor();
    /**
     * This property is a pointer to the root DOM element of the web part. This is a DIV element and contains the whole
     * DOM subtree of the web part.
     *
     * @readonly
     */
    protected readonly domElement: HTMLElement;
    /* Excluded from this release type: width */
    /**
     * This property indicates whether the web part has been rendered once or not. After the first time rendering,
     * the value of this property is always true. Till a full re-render of the web part happens.
     *
     * @readonly
     */
    protected readonly renderedOnce: boolean;
    /**
     * This property indicates whether the web part was rendered from the persisted data (serialized state from the
     * last time that the web part was saved) or not.
     *
     * @remarks
     * Example: When web part is added for the first time using toolbox then the value is false.
     *
     * @readonly
     */
    protected readonly renderedFromPersistedData: boolean;
    /**
     * This property indicates whether a web part can open a popup on initial render.
     *
     * @remarks
     * In some environments the host
     * re-renders the web parts frequently, and therefor, opening popups during render will cause popups to open
     * repeatedly and hence poor user experience. As an example, the classic SharePoint pages perform postbacks
     * and hence page re-render on all button clicks. If a web part needs to open a popup on render, it should use
     * this API before opening the popup. If this API returns false, the web part should not open popup on initial
     * render. Some web parts that open popups during render are the document embed web part
     * that pops up the file picker on initial render, embedded video web part that pops up the PropertyPane on initial
     * render.
     *
     * @readonly
     */
    protected readonly canOpenPopupOnRender: boolean;
    /**
     * Indicates whether the web part is rendering in Async mode. Default value is false.
     * If the web part overrides this field to return true, then it needs to call renderCompleted API
     * after the web part rendering is complete.
     */
    protected readonly isRenderAsync: boolean;
    /* Excluded from this release type: _internalOnAfterResize */
    /* Excluded from this release type: _calculateMinimumHeight */
    /**
     * This API is called to render the web part. There is no base implementation of this API and the web part is
     * required to override this API.
     */
    protected abstract render(): void;
    /**
     * This API should be called by web parts that perform Async rendering. Those web part are required to override
     * the isRenderAsync API and return true. One such example is web parts that render content in an IFrame. The
     * web part initiates the IFrame rendering in the render() API but the actual rendering is complete only after
     * the iframe loading completes.
     */
    protected renderCompleted(): void;
    /**
     * This event method is called when the display mode of a web part is changed.
     *
     * @remarks
     * The default implementation of this API calls
     * the web part render method to re-render the web part with the new display mode. If a web part developer does not
     * want a full re-render to happen on display mode change, they can override this API and perform specific updates
     * to the web part DOM to switch its display mode.
     *
     * @param oldDisplayMode - The old display mode.
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * This API should be used to refresh the contents of the PropertyPane.
     *
     * @remarks
     * This API is called at the end of the web part lifecycle on a page. It should be used to dispose any local
     * resources (i.e. DOM elements) that the web part is holding onto. This API is expected to be called in scenarios
     * like page navigation i.e. the host is transitioning from one page to another and disposes the page that is being
     * transitioned out.
     */
    protected onDispose(): void;
    /* Excluded from this release type: onAfterResize */
    /**
     * This API should be used to render an error message in the web part display area. Also logs the error message
     * using the trace logger.
     *
     * @param error - An error object containing the error message to render.
     */
    protected renderError(error: Error): void;
    /**
     * This API should be used to clear the error message from the web part display area.
     */
    protected clearError(): void;
    /* Excluded from this release type: _refresh */
    /* Excluded from this release type: _dynamicPropertyRefresh */
    /* Excluded from this release type: _internalSetDisplayMode */
    /* Excluded from this release type: _internalInitialize */
    /**
     * Internal API for the first time render of the web part. The purpose of this API is to enforce intialization steps
     * before the actual render is called. This API is called only once during the web part loading lifecycle.
     *
     * @returns {Promise<void>} The promise indicates the render loop is finished (success or fail).
     */
    private _internalFirstTimeRender(scrollableParent?, qosMonitor?);
    /* Excluded from this release type: _internalDelayedRender */
    /**
     * The actual initialization and rendering of the Web part starts when it is close enough
     * to the Viewport
     */
    private _internalRenderInViewPort();
    /**
     * Wraps render to ensure any type of rendering has access to the latest context
     * to provide the most accurate accessible info to screen readers.
     */
    private _renderWithAccessibleTitle();
    /**
     * Start async guard timer. This timer is to help avoid losing performance markers for a web part
     * that renders asynchronously but does not call the `renderCompleted` API;
     */
    private _startAsyncRenderGuardTimer();
    /**
     * Render completed.
     */
    private _renderCompleted();
    /**
     * Async render timed out. Log error information and
     */
    private _asyncRenderTimeout();
    private _clearAsyncRenderGuardTimer();
    /**
     * This is called for every web part whether sync or async once rendering is completed.
     */
    private _resolveOnRenderPromise();
    private _clearRenderPromises();
}

/* Excluded from this release type: BasePropertyPaneConsumer */

/**
 * This abstract class implements the UI-agnostic base functionality for a client side web part.
 * The purpose is to allow a common core between 2D and MR WebParts.
 *
 * @internalremarks
 * The _refresh() and _dynamicPropertyRefresh() API are the only API that are
 * mandatory to be implemented by our base WebPart classes.
 *
 * @public
 */
export declare abstract class BaseWebPart<TProperties> extends BaseComponent implements IPropertyPaneConsumer {
    /**
     * {@inheritdoc @microsoft/sp-component-base:BaseComponent.context}
     */
    protected readonly context: BaseWebPartContext;
    /* Excluded from this release type: _renderedFromPersistedData */
    private _displayMode;
    private _properties;
    private _initialized;
    /**
     * Keep a copy of the properties to be used for discard in non-reactive mode and this new set
     * of properties('_backUpProperties') is what will be persisted until the apply button is clicked.
     */
    private _backupProperties;
    private _previousState;
    private _baseLogSource;
    private _title;
    private _description;
    /**
     * It makes sure we only log edit events once during one editing session.
     */
    private _hasEditLogged;
    /**
     * Cache init properties value, it would be used to check whether web part has been changed or not.
     */
    private _initPropertiesSnapshot;
    private _loadPropertyPaneResourcesPromise;
    private _emptyResolvedPromise;
    /**
     * The value of this property is stored in the serialized data of the web part to allow developers to manage
     * versioning of their web part. The default version is 1.0
     */
    protected readonly dataVersion: Version;
    /**
     * This property is the current display mode of the web part.
     *
     * @readonly
     */
    protected readonly displayMode: DisplayMode;
    /**
     * This property is the pointer to the custom property bag of the web part.
     *
     * @readonly
     */
    protected readonly properties: TProperties;
    /**
     * This property defines metadata for the web part property bag. The metadata can help SharePoint understand
     * the content of the properties better and perform relevant services on the data.
     *
     * @remarks
     * See IWebPartPropertiesMetadata for more information about how to define metadata
     */
    protected readonly propertiesMetadata: IWebPartPropertiesMetadata | undefined;
    /**
     * This property is used to change the web part's PropertyPane interaction from Reactive to NonReactive.
     *
     * @remarks
     * The default behavior is Reactive.
     *
     * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
     * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
     * configuration changes or not.
     *
     * NonReactive implies that the configuration changes are transmitted to the web part only after "Apply" PropertyPane
     * button is clicked.
     */
    protected readonly disableReactivePropertyChanges: boolean;
    /**
     * This property points to the preview image for the web part. The base implementation returns undefined. Web parts
     * that want to provide a valid preview image url need to override this API. The preview image url can be used to
     * create a preview of the web part or of the page on which the web part is present.
     */
    protected readonly previewImageUrl: string | undefined;
    /**
     * This property points to the accessible title of web part made available to screen readers. The base implementation
     * returns that default title in the manifest. Web parts that want to provide more descriptive title containing
     * contextual information need to override this API.
     */
    protected readonly accessibleTitle: string;
    /**
     * Title of the WebPart
     *
     * @readonly
     */
    protected readonly title: string;
    /**
     * Description of the WebPart
     *
     * @readonly
     */
    protected readonly description: string;
    /**
     * This property is a pointer to the current set of properties which are already or needs to be persisted.
     *
     * @readonly
     */
    private readonly persistedProperties;
    /**
     * Constructor for the BaseWebPart class.
     *
     * @remarks
     * If a sub class overrides the constructor, it needs to call super() as the first line of its constructor.
     * It is highly recommended that the web part use the OnInit API to perform any web part specific initialization.
     * Most of the web part features like this.context and this.properties are not available to be used before the
     * the onInit part of the web part loading lifecycle.
     *
     * e.g.
     *   constructor() {
     *     super();
     *     .
     *     . class specific constructor code ..
     *   }
     */
    constructor();
    /* Excluded from this release type: _getPropertyPaneData */
    /* Excluded from this release type: _loadPropertyPaneResources */
    /* Excluded from this release type: _onPropertyPaneFieldChanged */
    /* Excluded from this release type: _onPropertyPaneLifeCycleEvent */
    /* Excluded from this release type: _isPropertyPaneReactive */
    /* Excluded from this release type: _internalSerialize */
    /* Excluded from this release type: _internalDispose */
    /* Excluded from this release type: _internalOnAfterResize */
    /**
     * This API should be overridden to perform long running operations e.g. data fetching from a remote service before
     * the initial rendering of the web part. The loading indicator is displayed during the lifetime of this method.
     * This API is called only once during the lifecycle of a web part.
     */
    protected onInit(): Promise<void>;
    /**
     * This event method is called when the display mode of a web part is changed.
     *
     * @remarks
     * The default implementation of this API calls
     * the web part render method to re-render the web part with the new display mode. If a web part developer does not
     * want a full re-render to happen on display mode change, they can override this API and perform specific updates
     * to the web part DOM to switch its display mode.
     *
     * @param oldDisplayMode - The old display mode.
     */
    protected onDisplayModeChanged(oldDisplayMode: DisplayMode): void;
    /**
     * This event method is called before the web part is serialized.
     *
     * @remarks
     * The default implementation is a no-op. The serialization
     * process serializes the web part property bag i.e. this.properties. This API gives the web part a chance to
     * update it's property bag before the serialization happens. Some web part's may keep their state other objects
     * or even in the DOM. If a web part needs to persist some of that state, it needs to override this API and update
     * the web part property bag to the latest state. If a web part updates the property bag with invalid property
     * values, those will get persisted. So that should be avoided. The web part property bag should always contain
     * valid property values.
     */
    protected onBeforeSerialize(): void;
    /**
     * This API is called after the web part is deserialized to an object, right before the property bag is populated.
     *
     * @remarks
     * The default implementation is a no-op. A web part developer can override this API if the deserialized object
     * does not fully reflect the initial state of the property bag. This gives the web part developer a chance to
     * populate the property bag right after the data is deserialized to an object.
     *
     * An important scenario to use deserialize is upgrading. An upgraded web part may load the data
     * that was serialized by an older version of the web part that supported a different schema of the property bag,
     * resulting the deserialized object to be incosistent with the current schema of the property bag. The developer
     * can use onAfterDeserialize to check the dataVersion and fix the property bag.
     *
     * @param deserializedObject - The object deserialized from the stored data. Note that the schema of  this object
     * is not necessarily consistent with the current property bag, because the serialization could have been done by
     * an older version of the web part
     * @param dataVersion - The data version of the stored data being deserialized. You can use this value to determine
     * if the data was serialized by an older web part. Web parts can define their data version by overriding the
     * dataVersion property.
     *
     * @returns The property bag of the web part
     */
    protected onAfterDeserialize(deserializedObject: any, dataVersion: Version): TProperties;
    /* Excluded from this release type: onEvent */
    /* Excluded from this release type: loadPropertyPaneResources */
    /**
     * This API is used to ger the configuration to build the property pane for the web part. If the web part wants
     * to use the PropertyPane for configuration, this API needs to be overridden and the web part needs to return
     * the configuration for the PropertyPane.
     *
     * This API is not invoked until the 'loadPropertyPaneResources' promise is resolved.
     *
     * See IPropertyPane and other PropertyPane integration wiki documentation for more details.
     */
    protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration;
    /**
     * This API should be used to refresh the contents of the PropertyPane.
     *
     * @remarks
     * This API is called at the end of the web part lifecycle on a page. It should be used to dispose any local
     * resources (i.e. DOM elements) that the web part is holding onto. This API is expected to be called in scenarios
     * like page navigation i.e. the host is transitioning from one page to another and disposes the page that is being
     * transitioned out.
     */
    protected onDispose(): void;
    /**
     * This API is invoked after updating the new value of the property in the property bag when the PropertyPane
     * is being used in Reactive mode.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     *  In the case of custom field, if no target property is provided then a custom value is assigned,
     *  which will be in the form of '__CustomField_<key provided when the custom field is created>'.
     * @param oldValue - Old value of the property.
     *  This value could be undefined/empty in the case of custom field.
     * @param newValue - New value of the property.
     *  This value could be undefined/empty in the case of custom field.
     */
    protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void;
    /**
     * This event method is invoked when the configuration starts on the PropertyPane.
     *
     * @remarks
     * This event method is invoked in the following cases:
     *
     *  - When the PropertyPane is opened.
     *
     *  - When the user switches web parts then the new web part gets this event.
     */
    protected onPropertyPaneConfigurationStart(): void;
    /**
     * This API is invoked when the configuration is completed on the PropertyPane.
     *
     * @remarks
     * This event method is invoked in the following cases:
     *
     *  - When the CONFIGURATION_COMPLETE_TIMEOUT((currently the value is 5 secs) elapses after the last change.
     *
     *  - When user clicks 'x'(close) button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *
     *  - When user clciks 'Apply' button before the CONFIGURATION_COMPLETE_TIMEOUT elapses.
     *
     *  - When the user switches web parts then the current web part gets this event.
     */
    protected onPropertyPaneConfigurationComplete(): void;
    /**
     * This API is invoked after the changes made on the PropertyPane are applied when the PropertyPane is used in
     * Non-Reactive mode. This API is not invoked when the PropertyPane is used in Reactive mode.
     */
    protected onAfterPropertyPaneChangesApplied(): void;
    /**
     * This API is invoked when the PropertyPane is rendered.
     *
     * @internalremarks
     * From framework standpoint, we do not want to allow this event handler to be passed in, and trigger it.
     * This api should be deprecated and then removed as part of refactoring.
     */
    protected onPropertyPaneRendered(): void;
    /* Excluded from this release type: _internalInitialize */
    /* Excluded from this release type: _internalGetData */
    /* Excluded from this release type: _refresh */
    /* Excluded from this release type: _dynamicPropertyRefresh */
    /* Excluded from this release type: _internalSetDisplayMode */
    /* Excluded from this release type: _internalSetDirtyBit */
    /* Excluded from this release type: _getDefaultAccessibleTitle */
    /**
     * This method consumes the properties object from the serialized data and re-applies
     * the field values from the serverProcessedContent. This process will result in the
     * properties bag as it was when the serialization happened.
     */
    private _reInstateServerProcessedData(deserializedProperties, serverProcessedContent);
    /**
     * Iterates and validates each metadata property before calling metadata processor.
     *
     * @param metadataProcessor - Callback handler to to process validated metadata.
     * @param properties - Optional Properies to process instead of default this.properties
     * @param iteration - Current iteration in case path is being iterated based on wildcard *
     */
    private _forEachPropertyWithMetaData(metadataProcessor, properties?);
    /**
     * Validates path and iterate over one or multiple wildcard paths
     *
     * @param propPath - Original property path provided in metadata
     * @param properties - Properties to look for the given path.
     * @param propertyPathHandler - Handler to process validated and fixed path
     */
    private _validateAndIteratePath(propPath, properties, propertyPathHandler);
    /**
     * Iterates and validates each custom property path before calling custom metadata processor.
     *
     * @param metadata - Web part property metadata containing.
     * @param iteration - Current iteration in case path is being iterated based on wildcard *
     * @param customMetadataProcessor - Responsible for processing custom metadata properties.
     */
    private _foreachCustomMetadata(metadata, iteration, customMetadataProcessor, properties?);
    /**
     * Internal base implemenation of the web part data deserialization.
     *
     * @param data - web part data
     */
    private _internalDeserialize(data);
    /**
     * Operations to be done after the property bag is updated.
     *
     * @param shouldRefresh - Indicating whether web part needs to be shouldRefresh or not.
     */
    private _afterPropertyUpdated(shouldRefresh);
    /**
     * Internal API to update the web part data.
     *
     * !!!WARNING!!! updating the web part data can be risky. If you end up updating the web part properties
     *  to an invalid format, this could cause the web part to persist invalid data format.
     */
    private _internalSetWebPartData(webPartData);
    /**
     * Fixes up a property pane configuration to use dynamic data. This happens in-place.
     * The fix-up consists on adding the necessary hooks to the web part that are required,
     * like the dynamic data provider, the render function and the object it refers to.
     *
     * @param configuration - Property pane configuration to fix up.
     */
    private _fixUpDynamicDataConfiguration(configuration);
    /**
     * The serializer for the exposed part of the web part data
     *
     * @internalremarks This serialize API is a public candidate for post-GA (after removing the input parameter)
     */
    private _serialize();
    /**
     * Serialize custom metadata as specified by web part
     *
     * @param propertyPath - Property path used as key of the serialized custom metadata
     * @param metadata - Web part property metadata
     * @param properties - Web part persisted properties
     * @param serverProcessedContent - Server processed data's custom medata is updated
     * @param iteration - Current iteration in case path is being iterated based on wildcard *
     */
    private _internalSerializeCustomMetadata(propertyPath, metadata, properties, serverProcessedContent, iteration);
    /**
     * This function serializes the Dynamic Data objects from the web part properties into the serialized web part data.
     *
     * If there is a property "myDynamicProperty" in the property bag that points to "PageContext:user",
     * the serialized data is updated as the following:
     * serializedData = {
     *   dynamicDataPaths: {
     *     "myDynamicProperty": "PageContext:user"
     *   }
     * }
     */
    private _serializeDynamicData(serializedData);
    /**
     * This function deserializes the Dynamic Data objects from serialized web part data into web part properties.
     *
     * If the serializedData has a "dynamicDataPaths" or "dynamicDataValues" property,
     * it creates DynamicData objects for it.
     *
     * Example:
     * serializedData = {
     *   dynamicDataPaths: {
     *     "myDynamicProperty": "PageContext:user"
     *   }
     * }
     *
     * This will create a property "myDynamicProperty" in the web parts properties, with a new DynamicData object that
     * points at "PageContext:user"
     */
    private _deserializeDynamicData(data);
    /**
     * Update the web part property if it is in the property bag.
     *
     * @param propertyPath - property path as expected by lodash update (https://lodash.com/docs#update).
     *   (e.g. 'o.a.b', 'o[0].a.b[1].c'). These paths are similar to those in the JSONPath spec described by
     *   Stefan Goessner at (http://goessner.net/articles/JsonPath/). Currently we plan to use lodash.get, has
     *   and update APIs which support paths. Some day we may migrate to using actual JSONPath.js. But that
     *   should not be an issue because the path formatting conventions are same in lodash and JSONPath.
     * @param newValue - new value entered by the user for the associated target property
     *
     */
    private _updateProperty(propertyPath, newValue);
    /**
     * Using 'cloneDeepWith' because the web part properties bag will now serialize the
     * dynamic properties as well. One of the building blocks of these properties are dataProviders,
     * which when serialized will result in 'Maximum call stack size exceeded' based on what kind of
     * sources they hold references to.
     * Hence using cloneDeepWith, which lets us handle the special cases and in this case if the property
     * in question is a 'DynamicProperty' and we call '_cloneDeep' api on the dynamicProperty.
     */
    private _cloneProperties(propertiesToClone);
}

/**
 * Web part context object. This object contains the contextual services available to a web part. e.g.
 * a contextual instance to the http client.
 *
 * This base is to be extended by UI-specific WebPart's base.
 *
 * @public
 */
export declare class BaseWebPartContext extends BaseComponentContext {
    /**
     * {@inheritdoc @microsoft/sp-component-base:BaseComponentContext.manifest}
     */
    readonly manifest: IClientSideWebPartManifestInstance<any>;
    private _webPartTag;
    private _eventAggregator;
    private _requestPropertyPaneAction;
    private _isPropertyPaneRenderedByWebPart;
    private _isPropertyPaneOpen;
    private _host;
    private _propertyPaneAccessor;
    private _logSource;
    private _privateDataUpdatedEvent;
    /* Excluded from this release type: __constructor */
    /**
     * Web part tag to be used for logging and telemetry.
     */
    readonly webPartTag: string;
    /* Excluded from this release type: eventAggregator */
    /**
     * Accessor for common web part property pane operations.
     */
    readonly propertyPane: IPropertyPaneAccessor;
    /* Excluded from this release type: host */
    /* Excluded from this release type: _dataUpdatedEvent */
}

/* Excluded from this release type: ClientSideWebPartManager */

/* Excluded from this release type: ClientSideWebPartManagerFactory */

/* Excluded from this release type: _DeferredComponent */

/* Excluded from this release type: EventAggregator */

/* Excluded from this release type: _IBaseWebPartContextParameters */

/**
 * Interface to be implemented by a component that should display the loading indicator and
 * error messages for a web part.
 *
 * @public
 */
export declare interface IClientSideWebPartStatusRenderer {
    /**
     * Display a loading spinner.
     * @param domElement - the webpart container div.
     * @param loadingMessage - the message to be displayed when the loading spinner id displayed.
     * @param timeout - timeout to render the loading indicator. Default is 900ms.
     */
    displayLoadingIndicator(domElement: Element, loadingMessage: string, timeout?: number): void;
    /**
     * Clear the loading indicator.
     * @param domElement - the web part container div.
     */
    clearLoadingIndicator(domElement: Element): void;
    /**
     * Render the provided error message in the webpart container div.
     * @param domElement - the web part container div.
     * @param error - the error message.
     */
    renderError(domElement: HTMLElement, error: Error | string): void;
    /**
     * Clear the webpart error message.
     * @param domElement - the web part container div.
     */
    clearError(domElement: HTMLElement): void;
}

/* Excluded from this release type: _IDeferredComponentProps */

/* Excluded from this release type: _IDeferredComponentState */

/* Excluded from this release type: _IDynamicConfiguration */

/* Excluded from this release type: IEvent */

/* Excluded from this release type: IEventAggregator */

/* Excluded from this release type: IEventCallback */

/* Excluded from this release type: IInternalWebPartData */

/* Excluded from this release type: ILifeCycleEventCallback */

/**
 * Interface for properties used to display the loading spinner in the web part display area.
 *
 * @public
 */
export declare interface IPlaceholderSpinnerProps {
    /**
     * Label associated with the spinner.
     */
    label: string;
    /**
     * Hide spinner at start if set to true.
     * In such case, use state showSpinner to true when to show the spinner
     */
    hideSpinner?: boolean;
}

/* Excluded from this release type: _IPlaceholderSpinnerState */

/**
 * Popup window props.
 *
 * @public
 */
declare interface IPopupWindowProps {
    /**
     * Title of pop up window.
     */
    title: string;
    /**
     * Width of pop up window.
     */
    width: number;
    /**
     * Height of pop up window.
     */
    height: number;
    /**
     * The position of pop up window.
     */
    positionWindowPosition: PopupWindowPosition;
}

/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file interfaces to access web part property pane APIs.
 */
/**
 * Web part context property pane accessor interface. Provides some most commonly used operations
 * to access the property pane.
 *
 * @public
 */
export declare interface IPropertyPaneAccessor {
    /**
     * This API should be used to open the PropertyPane to help configure the web part.
     */
    open(): void;
    /**
     * This API should be used to invoke the PropertyPane to help configure the web part.
     *
     * @remarks
     * This operation only works when the PropertyPane is already open for the currently active web part.
     * If the PropertyPane is opened for another web part, calling the refresh API will have no impact.
     */
    refresh(): void;
    /**
     * Indicates whether the PropertyPane was initially opened by the web part.
     * @remarks
     * For example, if the web part calls this.context.propertyPane.open() then the property would be true,
     * whereas if the property pane was opened by the host, then the value will be false.
     */
    isRenderedByWebPart(): boolean;
    /**
     * Returns true if the PropertyPane is open.
     */
    isPropertyPaneOpen(): boolean;
}

/**
 * PropertyPane button props.
 *
 * @public
 */
export declare interface IPropertyPaneButtonProps {
    /**
     * Display text of the element.
     */
    text: string;
    /**
     * The type of button to render.
     * Default value is ButtonType.normal.
     */
    buttonType?: PropertyPaneButtonType;
    /**
     * The button icon shown in command or hero type.
     */
    icon?: string;
    /**
     * Description of the action this button takes.
     * Only used for compound buttons.
     */
    description?: string;
    /**
     * Whether the button is disabled.
     */
    disabled?: boolean;
    /**
     * The aria label of the button for the benefit of screen readers.
     */
    ariaLabel?: string;
    /**
     * Detailed description of the button for the benefit of screen readers.
     *
     * Besides the compound button, other button types will need more information provided to screen reader.
     */
    ariaDescription?: string;
    /**
     * A callback which is invoked on the button click, which takes in the existing value for the bound property
     * and returns the new value and which is then used to update the properties bag. This update will result in
     * the re-render of the PropertyPane with the new props.
     *
     * @param {value} - Value associated with element's target property in the properties bag.
     * @returns - New value for the target property, which will eventually be updated in the properties bag.
     *
     * @internalremarks: This is the only place where the web part developer's is allowed to pass in the callback
     * for an individual element. This is because, button click does not result in any property change, and hence
     * cannot fire the 'onChange'' event for a property, and ends up becoming a no-op. To avoid this, giving the
     * control back to the web part, so that web part can make act acordingly.
     *
     * todo: VSO# 233578:PropertyPane Button OnClick event api.
     */
    onClick: (value: any) => any;
}

/**
 * PropertyPane CheckBox component props.
 *
 * @public
 */
export declare interface IPropertyPaneCheckboxProps {
    /**
     * Label to display next to the checkbox.
     */
    text?: string;
    /**
     * Whether the property pane checkbox is checked or not.
     *
     * @remarks
     * The default value is false.
     */
    checked?: boolean;
    /**
     * Whether the property pane checkbox is disabled or not.
     */
    disabled?: boolean;
}

/**
 * PropertyPane ChoiceGroup option props.
 *
 * @public
 */
export declare interface IPropertyPaneChoiceGroupOption {
    /**
     * A required key to uniquely identify the option.
     */
    key: string | number;
    /**
     * The text string for the option.
     */
    text: string;
    /**
     * The Icon component props for choice field.
     */
    iconProps?: IPropertyPaneChoiceGroupOptionIconProps;
    /**
     * The src of image for choice field.
     */
    imageSrc?: string;
    /**
     * The src of image for choice field which is selected.
     */
    selectedImageSrc?: string;
    /**
     * The width and height of the image in px for choice field.
     */
    imageSize?: {
        width: number;
        height: number;
    };
    /**
     * Whether the property pane choice group option is disabled or not.
     */
    disabled?: boolean;
    /**
     * Whether the property pane choice group option is checked or not.
     *
     * Default value is false.
     */
    checked?: boolean;
}

/**
 * PropertyPane ChoiceGroup icon props.
 *
 * @public
 */
export declare interface IPropertyPaneChoiceGroupOptionIconProps {
    /**
     * The name of the icon to use from the Office Fabric icon set.
     */
    officeFabricIconFontName?: string | null;
}

/* Excluded from this release type: _IPropertyPaneChoiceGroupOptionInternal */

/**
 * PropertyPane ChoiceGroup props.
 *
 * @public
 */
export declare interface IPropertyPaneChoiceGroupProps {
    /**
     * The options for the choice group.
     */
    options: IPropertyPaneChoiceGroupOption[];
    /**
     * Descriptive label for the choice group.
     */
    label?: string;
}

/**
 * Web part configuration settings
 *
 * @public
 */
export declare interface IPropertyPaneConfiguration {
    /**
     * Page to be displayed on the PropertyPane.
     */
    currentPage?: number;
    /**
     * Indicates whether the loading indicator should be displayed on top of the property pane or not.
     *
     * @remarks
     * This feature is intended to be used when the user is waiting on a promise to resolve.
     * If set to true, overlay loading indicator appears after 500ms (web part author can override this behavior by
     * using overlayLoadingIndicator property).
     *
     * The reason why we are not showing it immediately is that our intent is to never show the loading
     * indicator. But in real life async requests could take long and it becomes necessary to display a
     * loading indicator to the end user.
     */
    showLoadingIndicator?: boolean;
    /**
     * Number of milliseconds to be delayed before the loading indicator is shown on the property pane.
     * @remarks
     * The default value is 500.
     */
    loadingIndicatorDelayTime?: number;
    /**
     * Total number of pages on the PropertyPane.
     */
    pages: IPropertyPanePage[];
}

/* Excluded from this release type: IPropertyPaneConsumer */

/**
 * PropertyPane CustomPropertyField props.
 *
 * @public
 */
export declare interface IPropertyPaneCustomFieldProps {
    /**
     * This API will be called once the custom field is mounted on the host element.
     *
     * @param domElement - DOM element on which the custom control needs to be mounted.
     * @param context (optional) - Instance specific context. This context was passed in the constructor.
     * @param changeCallback (optional) - Callback called when a field changes within the custom field.
     *  This will allow the property pane to be aware of the change and act accordingly.
     *  @param targetProperty (optional) - associated target property from the properties bag.
     *    if not provided then a custom value which is unique at the custom field level is assigned,
     *    which will be in the form of '__CustomField_<key provided when the custom field is created>'.
     *  @param newValue (optional) - new value of the property.
     *    newValue is ignored if targetProperty is not specified.
     */
    onRender: (domElement: HTMLElement, context?: any, changeCallback?: (targetProperty?: string, newValue?: any) => void) => void;
    /**
     * An UNIQUE key indicates the identity of this contorl.
     *
     * The PropertyPane uses ReactJS to render its components. ReactJS uses keys to identify a component and if it should
     * be re-rendered or not. This is a performance feature in ReactJS. Please read the following link to understand how
     * to pick the value of the key.
     *
     * For more information, see the {@link https://facebook.github.io/react/docs/lists-and-keys.html#keys
     * | React documentation}.
     */
    key: string;
    /**
     * This API is called when the component is unmounted from the host element.
     *
     * @param domElement - DOM element on which the custom control is mounted.
     * @param context (optional) - Instance specific context. This context was passed in the constructor.
     */
    onDispose?: (domElement: HTMLElement, context?: any) => void;
    /**
     * Instance specific context. This context is passed back to the web part in the
     * onRender and onDispose APIs. The web part can use this context to manage state
     * information.
     */
    context?: any;
}

/* Excluded from this release type: IPropertyPaneData */

/**
 * PropertyPane dropdown callout properties.
 *
 * @public
 */
export declare interface IPropertyPaneDropdownCalloutProps {
    /**
     * Set max height of callout
     * When not set the callout will expand with contents up to the bottom of the screen
     */
    calloutMaxHeight?: number;
}

/**
 * PropertyPane drop down options.
 *
 * @public
 */
export declare interface IPropertyPaneDropdownOption {
    /**
     * A key to uniquely identify this option.
     */
    key: string | number;
    /**
     * Text to render for this option.
     */
    text: string;
    /**
     * Index for this option.
     */
    index?: number;
    /**
     * The type of option. If omitted, the default is PropertyPaneDropdownMenuItemType.Normal
     */
    type?: PropertyPaneDropdownOptionType;
}

/**
 * PropertyPane drop down component props.
 *
 * @public
 */
export declare interface IPropertyPaneDropdownProps {
    /**
     * Descriptive label for the Dropdown.
     */
    label: string;
    /**
     * The key of the initially selected option.
     */
    selectedKey?: string | number;
    /**
     * Collection of options for this Dropdown.
     */
    options?: IPropertyPaneDropdownOption[];
    /**
     * Whether the property pane dropdown option is disabled or not.
     */
    disabled?: boolean;
    /**
     * A description of the dropdown for the benefit of screen reader users.
     */
    ariaLabel?: string;
    /**
     * Defines an element's number or position in the current set of controls.
     * Maps to native aria-posinset attribute. It starts from 1.
     */
    ariaPositionInSet?: number;
    /**
     * Defines the number of items in the current set of controls. Maps to native aria-setsize attribute.
     */
    ariaSetSize?: number;
    /**
     * Custom properties for Dropdown's Callout used to render options.
     */
    calloutProps?: IPropertyPaneDropdownCalloutProps;
}

/* Excluded from this release type: IPropertyPaneDynamicFieldProps */

/* Excluded from this release type: IPropertyPaneDynamicFieldSetProps */

/* Excluded from this release type: IPropertyPaneDynamicTextFieldProps */

/**
 * PropertyPane field.
 *
 * @public
 */
export declare interface IPropertyPaneField<TProperties> {
    /**
     * Type of the PropertyPane field.
     */
    type: PropertyPaneFieldType;
    /**
     * Target property from the web part's property bag.
     */
    targetProperty: string;
    /**
     * Whether this control should be focused.
     *
     * @remarks
     * The default value is false.
     */
    shouldFocus?: boolean;
    /**
     * Strongly typed properties object. Specific to each field type.
     *
     * @remarks
     * Example: Checkbox has ICheckboxProps, TextField has ITextField props.
     *
     * @internalremarks - These props are from the office-ui-fabric-react.
     *   These props may not be extensive as the fabric-react ones. This is intentional.
     *     - We are not including any callbacks as part of the props, as this might end up breaking
     *       the internal flow and cause unwanted problems.
     *     - Currently discussions are going on whether to include styling elements or not. Based on
     *       the output of the discussions, changes to the styling related props will take place.
     *
     *   We are including only those which are supported by the web part framework.
     */
    properties: TProperties;
}

/**
 * PropertyPane group. Group is part of the PropertyPanePage.
 *
 * @public
 */
export declare interface IPropertyPaneGroup {
    /**
     * Display name for the group.
     *
     * @remarks
     * For performance reasons, it's highly recommended to keep this name unique within the property pane page.
     */
    groupName?: string;
    /**
     * Indicates whether the PropertyPane group is collapsed or not.
     *
     * @remarks
     * The default value is false.
     */
    isCollapsed?: boolean;
    /**
     * List of PropertyPane fields.
     */
    groupFields: IPropertyPaneField<any>[];
}

/**
 * PropertyPaneLabel component props.
 *
 * @public
 */
export declare interface IPropertyPaneLabelProps {
    /**
     * Display text fot the label.
     */
    text: string;
    /**
     * Whether the associated form field is required or not.
     *
     * @remarks
     * If true, a red asterisk is displayed to the right of the label.
     * Default value is false.
     */
    required?: boolean;
}

/* Excluded from this release type: IPropertyPaneLifeCycleEventCallback */

/**
 * PropertyPaneLink component props.
 *
 * @public
 */
export declare interface IPropertyPaneLinkProps {
    /**
     * Display text for the link.
     */
    text: string;
    /**
     * Location to which the link is targeted to.
     */
    href: string;
    /**
     * This attribute specifies where to display the linked resource.
     *
     * @remarks
     * Following values can be used:
     *
     * _self - (default) Load the response in the current page.
     *
     * _blank - Load the response into a new unnamed tab.
     *
     * _parent - Load the response in the parent of the current page.
     *           If no parent exists, then this option behaves same as "_self"
     *
     * _top - Load the response into the original window.
     */
    target?: string;
    /**
     *  The props of pop up window.
     */
    popupWindowProps?: IPopupWindowProps;
    /**
     * Whether the property pane link is disabled or not.
     */
    disabled?: boolean;
}

/**
 * PropertyPanePage interface.
 *
 * @public
 */
export declare interface IPropertyPanePage {
    /**
     * Indicates whether the groups on the PropertyPanePage are displayed as accordion or not.
     */
    displayGroupsAsAccordion?: boolean;
    /**
     * PropertyPane page header.
     */
    header?: IPropertyPanePageHeader;
    /**
     * List of groups to be displayed on the PropertyPane page.
     */
    groups: IPropertyPaneGroup[];
}

/**
 * PropertyPane header.
 * This header remains same for all the pages.
 *
 * @public
 */
export declare interface IPropertyPanePageHeader {
    /**
     * Header to display.
     */
    description: string;
    /**
     * Image url for the background image.
     */
    image?: string;
}

/**
 * PropertyPaneSliderProps component props.
 *
 * @public
 */
export declare interface IPropertyPaneSliderProps {
    /**
     * Description label of the Slider.
     */
    label?: string;
    /**
     * The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events.
     *
     * Defaults to min.
     */
    value?: number;
    /**
     * The min value of the Slider.
     */
    min: number;
    /**
     * The max value of the Slider.
     */
    max: number;
    /**
     * The difference between the two adjacent values of the Slider.
     * Defaults to 1.
     */
    step?: number;
    /**
     * Whether to show the value on the right of the Slider.
     *
     * @remarks
     * If you want to show the value by yourself, you may want to set this value to false.
     */
    showValue?: boolean;
    /**
     * A description of the Slider for the benefit of screen readers.
     */
    ariaLabel?: string;
    /**
     * Whether or not the Slider is disabled.
     */
    disabled?: boolean;
}

/**
 * PropertyPaneTextField component props.
 *
 * @public
 */
export declare interface IPropertyPaneTextFieldProps {
    /**
     * Whether or not the text field is a multiline text field.
     *
     * @remarks
     * The default value is false.
     */
    multiline?: boolean;
    /**
     * Whether or not the multiline text field is resizable.
     *
     * @remarks
     * The default value is true.
     */
    resizable?: boolean;
    /**
     * Whether or not the text field is underlined.
     *
     * @remarks
     * The default value is false.
     */
    underlined?: boolean;
    /**
     * Label for the text field.
     */
    label?: string;
    /**
     * The text field input description.
     */
    description?: string;
    /**
     * Value to be displayed in the text field when the value of the targetProperty
     * in the manifest's property bag is empty or contains null value.
     */
    value?: string;
    /**
     * If set, this will be displayed as an error message.
     *
     * @remarks
     * When onGetErrorMessage returns empty string, if this property has a value set then this will
     * be displayed as the error message.
     *
     * So, make sure to set this only if you want to see an error message displayed for the text field.
     */
    errorMessage?: string;
    /**
     * The method is used to get the validation error message and determine whether the input value is valid or not.
     *
     * @remarks
     * When it returns string:
     *
     *   - If valid, it returns empty string.
     *
     *   - If invalid, it returns the error message string and an error message is displayed below the text field.
     *
     * When it returns Promise\<string>:
     *
     *   - The resolved value is display as error message.
     *
     *   - The rejected, the value is thrown away.
     *
     */
    onGetErrorMessage?: (value: string) => string | Promise<string>;
    /**
     * Text field will start to validate after users stop typing for `deferredValidationTime` milliseconds.
     *
     * @remarks
     * The default value is 200.
     */
    deferredValidationTime?: number;
    /**
     * Aria Label for text field, if any.
     */
    ariaLabel?: string;
    /**
     * placeholder text to be displayed in the text field.
     */
    placeholder?: string;
    /**
     * Whether the property pane text field is enabled or not.
     */
    disabled?: boolean;
    /**
     * Specifies the visible height of a text area(multiline text TextField), in lines.
     *
     * @remarks
     * This prop is used only when the multiline prop is set to true.
     */
    rows?: number;
    /**
     * Maximum number of characters that the PropertyPaneTextField can have.
     *
     * @remarks
     * If the value is set to a negative number, an exception will be thrown.
     */
    maxLength?: number;
    /**
     * Run validation when the PropertyPaneTextField is focused.
     *
     * @remarks
     * The default value is false.
     */
    validateOnFocusIn?: boolean;
    /**
     * Run validation when the PropertyPaneTextField is out of focus or on blur.
     *
     * @remarks
     * The default value is false.
     */
    validateOnFocusOut?: boolean;
    /**
     * Engagement name to log PropertyPaneTextField value change.
     *
     * @remarks
     * It will be logged format as \<moduleName>.\<controlName>.
     * E.g. {moduleName: 'ImageWebPart', controlName: 'OverlayText'}, it will log:
     * 1. action type, including 'Add', 'Clear' and 'Edit'.
     * Clear: reset the content of caption element to initial/unset state.
     * Add: change from initial/unset state to customized content. (first edit)
     * Edit: any edition that changes the content apart from add and clear
     * 2. text length after each edit.
     *
     * @internalremarks
     * Above, the "\" before the "<" characters is an AEDoc escape, not part of the documentation itself.
     */
    logName?: {
        moduleName: string;
        controlName: string;
    };
}

/**
 * PropertyPaneToggle component props.
 *
 * @public
 */
export declare interface IPropertyPaneToggleProps {
    /**
     * A key to uniquely identify the field.
     */
    key?: string | number;
    /**
     * A label for the toggle.
     */
    label: string;
    /**
     * Text to display when toggle is ON.
     */
    onText?: string;
    /**
     * Test display when toggle is OFF.
     */
    offText?: string;
    /**
     * Checked state of the toggle.
     *
     * @remarks
     * If you are maintaining state yourself, use this property.
     */
    checked?: boolean;
    /**
     * Optional disabled flag.
     */
    disabled?: boolean;
    /**
     * Optional onAriaLabel flag. Text for screen-reader to announce when toggle is ON.
     */
    onAriaLabel?: string;
    /**
     * Optional offAriaLabel flag. Text for screen-reader to announce when toggle is OFF.
     */
    offAriaLabel?: string;
}

/* Excluded from this release type: IScrollEventHandler */

/**
 * Contains collections of data that can be processed by server side services like search index and link fixup
 *
 * @public
 */
export declare interface ISerializedServerProcessedData {
    /**
     * A key-value map where keys are string identifiers and values are rich text with HTML format.
     *
     * @remarks
     * SharePoint servers treat the values as HTML content and run services like safety checks, search index
     * and link fixup on them.
     *
     * Example:
     * {
     *   'myRichDescription': '\<div>Some standard \<b>HTML content\</b>\<a href='http://somelink'>A Link\</a>\</div>'
     *   'anotherRichText': \<div class='aClass'>\<span style='color:red'>Some red text\</div>
     * }
     *
     * @internalremarks
     * Above, the "\" before the "<" characters is an AEDoc escape to ensure the HTML elements don't get
     * processed by the documentation engine.
     */
    htmlStrings?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifiers and values are strings that should be search indexed.
     *
     * @remarks
     * The values are HTML-encoded before being sent to the server. The encoded values are visible to the search
     * indexer, but are not treated as valid HTML. So, other services such as link fixup will not run on them.
     *
     * Example:
     * {
     *  'justSomeText': 'This is some plain text',
     *  'anotherText': 'Can have \<any> characters here: "<>&\\''
     * }
     *
     * @internalremarks
     * Above, the "\" before the "<" characters is an AEDoc escape to ensure the HTML elements don't get
     * processed by the documentation engine.
     */
    searchablePlainTexts?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifiers and values are links.
     *
     * @remarks
     * SharePoint servers treat the values as links and run services like link fixup on them.
     *
     * Example:
     * {
     *   'myWebURL': 'http://contoso.com'
     *   'myFileLink': 'https://res.contoso.com/file.docx'
     * }
     */
    links?: {
        [key: string]: string;
    };
    /**
     * A key-value map where keys are string identifiers and values are image sources.
     *
     * @remarks
     * SharePoint servers treat the values as image sources and run services like search index and link fixup on them.
     *
     * Example:
     * {
     *   'myImage1': 'http://res.contoso.com/path/to/file'
     *   'myImage2': 'https://res.contoso.com/someName.jpg'
     * }
     */
    imageSources?: {
        [key: string]: string;
    };
    /* Excluded from this release type: componentDependencies */
    /* Excluded from this release type: customMetadata */
}

/**
 * This structure represents the part of the serialized state of a web part which is controlled by the web part.
 * It is extended by IWebPartData which contains additional data added by the framework to the serialized data.
 *
 * @public
 */
export declare interface ISerializedWebPartData {
    /**
     * Web part data version.
     *
     * @remarks
     * Note that data version is different from the version field in the manifest.
     * The manifest version is used to control the versioning of the web part code, while data version is used to
     * control the versioning of the serialized data of the web part. Refer to dataVersion field of your web part
     * for more information.
     *
     * Usage: versioning and evolving the serialized data of the web part
     * Required: yes
     * Type: Version
     * Supported values: MAJOR.MINOR
     * Example: "1.0"
     */
    dataVersion: Version;
    /**
     * Web part specific properties. The individual web part owns the definition of these properties.
     *
     * @remarks
     * Usage: used by the web part to manage its internal metadata and config data. The framework code never
     *        touches these properties.
     * Required: yes
     * Type: any
     * Supported values: any JSON stringifiable object hierarchy.
     * Example: { 'value': 'text value' }
     */
    properties?: any;
    /**
     * The collections of data that can be processed by server side services like search index and link fixup.
     */
    serverProcessedContent?: ISerializedServerProcessedData;
    /* Excluded from this release type: dynamicDataPaths */
    /* Excluded from this release type: dynamicDataValues */
}

/**
 * The base context interface for client-side web parts.
 *
 * @remarks
 * A "context" object is a collection of well-known services and other
 * objects that are likely to be needed by any business logic working with
 * a component.  Each component type has its own specialized extension of
 * this interface, e.g. IWebPartContext for web parts, IExtensionContext for
 * client-side extensions, etc.
 *
 * @deprecated This interface will be removed in an upcoming release.  Use the
 * {@link WebPartContext} class instead.
 *
 * @internalremarks
 *
 * NOTE: The context object is a convenience that avoids the overhead of
 * properly factoring the dependencies for each class in your project,
 * in a situation where most classes have essentially the same dependencies.
 * If lots of members are added to the context without displine, it can
 * easily devolve into a poor engineering practice (where "everything depends
 * on everything else").  Think carefully before adding more objects to this
 * interface.
 *
 * Only add data properties or well-defined classes with ubiquitous applicability.
 * Do not add loose functions, callbacks, or settable properties.
 *
 * @public
 */
export declare interface IWebPartContext {
    /**
     * Manifest for the client side web part.
     */
    readonly manifest: IClientSideWebPartManifestInstance<any>;
    /**
     * Web part instance id. This is a globally unique value.
     */
    readonly instanceId: string;
    /**
     * Web part tag to be used for logging and telemetry.
     */
    readonly webPartTag: string;
    /**
     * Reference to the DOM element that hosts this client side component.
     */
    readonly domElement: HTMLElement;
    /**
     * HttpClient instance scoped to this web part.
     */
    readonly httpClient: HttpClient;
    /**
     * SPHttpClient instance scoped to this web part.
     */
    readonly spHttpClient: SPHttpClient;
    /* Excluded from this release type: graphHttpClient */
    /**
     * SharePoint page context.
     */
    readonly pageContext: PageContext;
    /**
     * Web part status renderer.
     */
    readonly statusRenderer: IClientSideWebPartStatusRenderer;
    /**
     * Accessor for common web part property pane operations.
     */
    readonly propertyPane: IPropertyPaneAccessor;
    /* Excluded from this release type: eventAggregator */
    /* Excluded from this release type: host */
    /* Excluded from this release type: _dataUpdatedEvent */
}

/* Excluded from this release type: _IWebPartContextParameters */

/**
 * This structure represents the serialized state of a web part. When the serialize() API is called on
 * a web part, the output should be this structure. The structure of the 'properties' field is owned by the
 * web part and is specific to the web part. Each web part can decide the set of properties it wants to
 * serialize.
 *
 * @public
 */
export declare interface IWebPartData {
    /**
     * Universally unique web part Type id.
     *
     * @remarks
     * Usage: uniquely identify a web part.
     * Required: yes
     * Type: GUID
     * Supported values: any GUID
     * Example: "dbef608d-3ad5-4f8f-b139-d916f2f0a294"
     */
    id: string;
    /**
     * Universally unique instance id of the web part. A web part can have multiple instances on a page.
     * This id is expected to be universally unique across time and page boundaries.
     *
     * @remarks
     * how used: used by the framework to uniquely identify an instance of a web part.
     * mandatory: yes
     * type: string
     * supported values: a unique string. Could be GUID or other uniquely identifiable formats.
     * example: ["dbef608d-3ad5-4f8f-b139-d916f2f0a294"]
     * experimental: yes
     */
    instanceId: string;
    /**
     * Web part title
     *
     * @remarks
     * Usage: display the name of the web part in the toolbox, web part gallery and the page.
     * Required: yes
     * Type: string
     * Supported values: string less than 100 characters
     * Example: "Text"
     */
    title: string;
    /**
     * Web part description
     *
     * @remarks
     * Usage: display the description of the web part.
     * Required: no
     * Type: string
     * Supported values: string with the description.
     * Example: "Text"
     */
    description?: string;
    /**
     * Web part data version
     *
     * @remarks
     * Note that data version is different from the version field in the manifest.
     * The manifest version is used to control the versioning of the web part code, while data version is used to
     * control the versioning of the serialized data of the web part. Refer to dataVersion field of your web part
     * for more information.
     *
     * Usage: versioning and evolving the serialized data of the web part
     * Required: yes
     * Type: string
     * Supported values: MAJOR.MINOR
     * Example: "1.0"
     */
    dataVersion: string;
    /**
     * Web part specific properties. The individual web part owns the definition of these properties.
     *
     * @remarks
     * Usage: used by the web part to manage its internal metadata and config data. The framework code never
     *           touches these properties.
     * Required: yes
     * Type: any
     * Supported values: any JSON stringifiable object hierarchy.
     * Example: { 'value': 'text value' }
     */
    properties?: any;
    /**
     * Definition: The collections of data that can be processed by server side services like search index and link fixup
     * Required: no
     */
    serverProcessedContent?: ISerializedServerProcessedData;
    /* Excluded from this release type: dynamicDataPaths */
    /* Excluded from this release type: dynamicDataValues */
    /* Excluded from this release type: isolationLevel */
}

/* Excluded from this release type: IWebPartEvent */

/* Excluded from this release type: IWebPartFormProps */

/* Excluded from this release type: IWebPartHost */

/* Excluded from this release type: IWebpartLoadExtraLogInfo */

/* Excluded from this release type: IWebPartManagerContext */

/**
 * This structure is used to define metadata for web part properties as a map of string to IWebPartPropertyMetadata
 *
 * @remarks
 * The key should be a JSON path to the property in web part properties. The JSON path supports the following operators:
 *
 * - Dot . for selecting object members e.g. person.name
 *
 * - Brackets [] for selecting array items e.g. person.photoURLs[0]
 *
 * - Bracketed asterisk [*] for array elements wildcard e.g. person.websites[*].
 *
 * You can make combinations of these operators e.g. person.websites[*].url
 * Important Note: Only one wildcard per path is supported.
 *
 * Example: Let's assume we have a web part with properties that have the following schema:
 * {
 *   title: string;
 *   person: {
 *     name: string;
 *     bio: string;
 *     photoURLs: string[];
 *     websites: { title: string; url: string; }[]
 *   }
 * }
 *
 * We can define the metadata for the desired properties as following:
 * {
 *  'person.bio': { isRichContent: true },
 *  'person.photoURLs[*]': { isImageSource: true },
 *  'person.websites[*].url': { isLink: true }
 * }
 *
 * This will make SharePoint servers aware of the content of your properties and run services such as search indexing,
 * link fix-up, etc on the data. In case any of the values needs to update by these services, e.g link fix-up, the
 * web part property bag is automatically updated.
 *
 * @public
 */
export declare interface IWebPartPropertiesMetadata {
    [key: string]: IWebPartPropertyMetadata;
}

/**
 * This is the structure used for map values in IWebPartPropertiesMetadata
 *
 * @public
 */
declare interface IWebPartPropertyMetadata {
    /**
     * Indicates whether the property should be serialized as HTML.
     *
     * @remarks
     * This flag instructs framework to store the value as HTML, so that SharePoint can perform the following
     * services on it:
     * - normalizing HTML encodings
     * - stripping unsafe HTML tags (i.e. for usage with Element.innerHTML)
     * - search indexing
     * - SharePoint link fix-up
     *
     * Only enable this flag for HTML content where these modifications are acceptable. If non-HTML content is
     * provided, SharePoint framework might make modifications to convert it to HTML valid. For plain text content
     * that simply needs to be exposed to the search index (without any rewriting), use the isSearchablePlainText
     * flag instead.
     */
    isHtmlString?: boolean;
    /**
     * Indicates if the property contains plain text that should be search-indexed by SharePoint.
     *
     * @remarks
     * This flag instructs the framework to store the property in a representation that supports search indexing.
     * The content will be treated as plain text; SharePoint will not modify the string in any way, and
     * special HTML characters may be stored encoded and appear in search results. If your string contains
     * HTML markup, use the isHtmlString setting instead.
     * Security note: For security reasons, never assign a plain text string to Element.innerHTML.
     */
    isSearchablePlainText?: boolean;
    /**
     * Indicates if the property contains a link. This allows SharePoint server to treat the value as such and
     * perform services like search indexing, link fix-up, loading from CDN, etc.
     */
    isLink?: boolean;
    /**
     * Indicates if the property contains a link. This allows SharePoint server to treat the value as such and
     * perform services like link fix-up, search indexing, loading from CDN, etc.
     */
    isImageSource?: boolean;
    /**
     * Indicates if the framework should persist the property on the server. Use this for properties that are only
     * important in run-time, and do not need to persist on the server. This can reduce the size of the serialized
     * data of the web part and optimize the webpart load time. The property value will be removed from the
     * serialized data sent to the server, but this has no effect on the run-time property bag. The property value
     * will still be available in onBeforeSerialize() method, and the value will not be cleared from the run-time
     * property bag. The initial render of your web part should not depend on the value of the property. Setting a
     * default value for the property can be done in onInit() method.
     *
     * Note that if the property path refers to a property that has a complex object as the value, the whole object
     * will be removed from the persisted data.
     */
    shouldNotPersist?: boolean;
    /* Excluded from this release type: isComponentDependency */
    /* Excluded from this release type: customMetadata */
}

/* Excluded from this release type: PlaceholderSpinner */

/**
 * The position of pop up window.
 *
 * @public
 */
declare enum PopupWindowPosition {
    /**
     * PopupWindowPosition would be located in center of screen.
     */
    center = 0,
    /**
     * PopupWindowPosition would be located in right top of screen.
     */
    rightTop = 1,
    /**
     * PopupWindowPosition would be located in left top of screen.
     */
    leftTop = 2,
    /**
     * PopupWindowPosition would be located in right bottom of screen.
     */
    rightBottom = 3,
    /**
     * PopupWindowPosition would be located in left bottom of screen.
     */
    leftBottom = 4,
}

/* Excluded from this release type: PropertyPaneAction */

/**
 * Helper method to create a Button on the PropertyPane.
 * @param targetProperty - Target property the Button is associated to.
 * @param properties - Strongly typed Button properties.
 *
 * @public
 */
export declare function PropertyPaneButton(targetProperty: string, properties: IPropertyPaneButtonProps): IPropertyPaneField<IPropertyPaneButtonProps>;

/**
 * Enum for all the supported button types.
 *
 * @public
 */
export declare enum PropertyPaneButtonType {
    /**
     * Optional completion action.
     *
     * @remarks
     * Typically used at the end of a form or task when paired with the Primary button OR
     * as a standalone button to undo an action.
     * Examples: "Done" button which closes a container but doesn't make a server call or
     * an "Undo" button when a user is uploading a file in OneDrive.
     */
    Normal = 0,
    /**
     * Preferred completion action when paired with a Standard button.
     *
     * @remarks
     * Typically used at the end of a task or form.
     * Examples: "Create", "Save", "Send" which makes a server call.
     */
    Primary = 1,
    /**
     * Hero button.
     */
    Hero = 2,
    /**
     * Always used as a set with both Standard and Primary compound buttons.
     *
     * @remarks
     * Typically used in a confirmation dialog.
     * Examples: A confirmation dialog when a user discards a form or task with a possible
     * significant time investment such as an email or a complex form
     */
    Compound = 3,
    /**
     * Optional actions.
     *
     * @remarks
     * Typically used in a command bar at the top of a view, panel and inside an inline command bar.
     * Examples: Command bar at the top of OneDrive, Outlook, SharePoint. Inline command bar on the
     * top of SharePoint web parts.
     */
    Command = 4,
    /**
     * Same usage as Command button, when real estate does not allow for icons + labels or as secondary
     * actions within the command bar.
     *
     * @remarks
     * Typically used in Command bar in small and medium responsive web breakpoints. Also used on objects.
     * Examples: OneDrive small and medium responsive web breakpoint Command Bars and view icons within the
     * Command Bar. In SharePoint and OneDrive, Cards with social actions and images which allow users to
     * access the image picker. In SharePoint, formatting experiences such as formatting a story within the
     * Authoring experience. In Calendar, in the bottom of an event creation Callout when clicking inside
     * an empty time range.
     */
    Icon = 5,
}

/**
 * Helper method to create a Checkbox on the PropertyPane.
 * @param targetProperty - Target property the checkbox is associated to.
 * @param properties - Strongly typed Checkbox properties.
 *
 * @public
 */
export declare function PropertyPaneCheckbox(targetProperty: string, properties: IPropertyPaneCheckboxProps): IPropertyPaneField<IPropertyPaneCheckboxProps>;

/**
 * Helper method to create a Choice Group on the PropertyPane.
 * @param targetProperty - Target property the choice group is associated to.
 * @param properties - Strongly typed Choice Group properties.
 *
 * @public
 */
export declare function PropertyPaneChoiceGroup(targetProperty: string, properties: IPropertyPaneChoiceGroupProps): IPropertyPaneField<IPropertyPaneChoiceGroupProps>;

/* Excluded from this release type: _PropertyPaneController */

/* Excluded from this release type: PropertyPaneCustomField */

/**
 * Helper method to create a Dropdown on the PropertyPane.
 * @param targetProperty - Target property the dropdown is associated to.
 * @param properties - Strongly typed Dropdown properties.
 *
 * @public
 */
export declare function PropertyPaneDropdown(targetProperty: string, properties: IPropertyPaneDropdownProps): IPropertyPaneField<IPropertyPaneDropdownProps>;

/**
 * Specifies the type of option in a dropdown menu rendered by {@link PropertyPaneDropdown}.
 *
 * @public
 */
export declare enum PropertyPaneDropdownOptionType {
    /**
     * Render normal menu item.
     */
    Normal = 0,
    /**
     * Render a divider.
     */
    Divider = 1,
    /**
     * Render menu item as a header.
     */
    Header = 2,
}

/* Excluded from this release type: PropertyPaneDynamicField */

/* Excluded from this release type: PropertyPaneDynamicFieldSet */

/* Excluded from this release type: PropertyPaneDynamicTextField */

/**
 * Enum for all the supported PropertyPane field types.
 *
 * Names should be consistent with those in office-ui-fabric-react, be careful to get letter casing correct.
 *
 * @public
 */
export declare enum PropertyPaneFieldType {
    /**
     * Custom field.
     */
    Custom = 1,
    /**
     * Checkbox field.
     */
    CheckBox = 2,
    /**
     * TextField field.
     */
    TextField = 3,
    /**
     * Toggle field.
     */
    Toggle = 5,
    /**
     * Dropdown field.
     */
    Dropdown = 6,
    /**
     * Label field.
     */
    Label = 7,
    /**
     * Slider field.
     */
    Slider = 8,
    /**
     * Heading field.
     */
    Heading = 9,
    /**
     * Choice Group field.
     */
    ChoiceGroup = 10,
    /**
     * Button field.
     */
    Button = 11,
    /**
     * Horizontal Rule field.
     */
    HorizontalRule = 12,
    /**
     * Link field.
     */
    Link = 13,
    /* Excluded from this release type: DynamicField */
    /* Excluded from this release type: DynamicTextField */
    /* Excluded from this release type: DynamicFieldSet */
}

/**
 * Helper method to create a Horizontal Rule on the PropertyPane.
 * @param properties - Strongly typed Horizontal Rule properties.
 *
 * @public
 */
export declare function PropertyPaneHorizontalRule(): IPropertyPaneField<void>;

/**
 * Helper method to create a Label on the PropertyPane.
 * @param targetProperty - Target property the label is associated to.
 * @param properties - Strongly typed Label properties.
 *
 * @public
 */
export declare function PropertyPaneLabel(targetProperty: string, properties: IPropertyPaneLabelProps): IPropertyPaneField<IPropertyPaneLabelProps>;

/* Excluded from this release type: PropertyPaneLifeCycleEvent */

/**
 * Helper method to create a Link on the PropertyPane.
 * @param targetProperty - Target property the Link is associated to.
 * @param properties - Strongly typed Link properties.
 *
 * @public
 */
export declare function PropertyPaneLink(targetProperty: string, properties: IPropertyPaneLinkProps): IPropertyPaneField<IPropertyPaneLinkProps>;

/**
 * Helper method to create a Slider on the PropertyPane.
 * @param targetProperty - Target property the slider is associated to.
 * @param properties - Strongly typed Slider properties.
 *
 * @public
 */
export declare function PropertyPaneSlider(targetProperty: string, properties: IPropertyPaneSliderProps): IPropertyPaneField<IPropertyPaneSliderProps>;

/**
 * Helper method to create a TextField on the PropertyPane.
 * @param targetProperty - Target property the textfield is associated to.
 * @param properties - Strongly typed TextField properties.
 *
 * @public
 */
export declare function PropertyPaneTextField(targetProperty: string, properties: IPropertyPaneTextFieldProps): IPropertyPaneField<IPropertyPaneTextFieldProps>;

/**
 * Helper method to create a Toggle on the PropertyPane.
 * @param targetProperty - Target property the toggle is associated to.
 * @param properties - Strongly typed Toggle properties.
 *
 * @public
 */
export declare function PropertyPaneToggle(targetProperty: string, properties: IPropertyPaneToggleProps): IPropertyPaneField<IPropertyPaneToggleProps>;

/* Excluded from this release type: ReservedEventNames */

/* Excluded from this release type: _ScrollEventHandler */

/**
 * Web part context object. This object contains the contextual services available to a web part. e.g.
 * a contextual instance to the http client.
 *
 * @public
 */
export declare class WebPartContext extends BaseWebPartContext {
    private _domElement;
    private _statusRenderer;
    /* Excluded from this release type: __constructor */
    /**
     * Reference to the DOM element that hosts this client side component.
     */
    readonly domElement: HTMLElement;
    /**
     * Web part status renderer.
     */
    readonly statusRenderer: IClientSideWebPartStatusRenderer;
}

/* Excluded from this release type: WebPartDataConverter */

/* Excluded from this release type: WebPartForm */

/* Excluded from this release type: WebPartIsolationLevel */
