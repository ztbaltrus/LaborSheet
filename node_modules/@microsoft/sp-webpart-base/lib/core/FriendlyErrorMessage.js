import * as tslib_1 from "tslib";
import strings from './loc/Strings.resx';
import styles from './styles/cswp-base.module.scss';
import ErrorMessage from './ErrorMessage';
import * as React from 'react';
var FriendlyErrorMessage = (function (_super) {
    tslib_1.__extends(FriendlyErrorMessage, _super);
    function FriendlyErrorMessage(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isExpanded: false
        };
        _this._toggleExpandedDetails = _this._toggleExpandedDetails.bind(_this);
        return _this;
    }
    FriendlyErrorMessage.prototype.render = function () {
        var isExpanded = this.state.isExpanded;
        return (React.createElement("div", { className: styles.errorBox },
            React.createElement("div", null,
                React.createElement("h2", { className: styles.somethingWentWrongText }, strings.WebpartErrorSomethingWentWrong)),
            React.createElement("div", null,
                React.createElement("span", { className: styles.siteAdminText }, strings.WebpartErrorSiteAdminAdvice)),
            React.createElement("div", null,
                React.createElement("button", { onClick: this._toggleExpandedDetails, className: styles.detailsButton }, strings.WebpartErrorTechnicalDetails)),
            isExpanded &&
                React.createElement(ErrorMessage, { errorMessage: this.props.errorMessage })));
    };
    FriendlyErrorMessage.prototype._toggleExpandedDetails = function () {
        this.setState({ isExpanded: !this.state.isExpanded });
    };
    return FriendlyErrorMessage;
}(React.Component));
export default FriendlyErrorMessage;
