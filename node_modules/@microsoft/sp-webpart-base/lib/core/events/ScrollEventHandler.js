import * as tslib_1 from "tslib";
import { _SPKillSwitch, Guid, Validate } from '@microsoft/sp-core-library';
import * as lodash from '@microsoft/sp-lodash-subset';
import { autobind } from '@microsoft/office-ui-fabric-react-bundle';
var ScrollEventHandler = (function () {
    function ScrollEventHandler() {
        this._eventListeners = new Set();
        this._isListeningWindow = false;
        this._lazyHandler = lodash.throttle(this._scrollEventHandler, 10).bind(this);
    }
    ScrollEventHandler._findScrollableParent = function (startingElement) {
        var DATA_IS_SCROLLABLE_ATTRIBUTE = 'data-is-scrollable';
        var el = startingElement;
        var body = document.body;
        while (el && el !== body) {
            if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === 'true') {
                return el;
            }
            el = el.parentElement;
        }
        el = startingElement;
        while (el && el !== body) {
            var styles = getComputedStyle(el);
            if (styles) {
                var overflowY = styles.getPropertyValue('overflow-y');
                if (overflowY && (overflowY === this.SCROLL || overflowY === 'auto')) {
                    return el;
                }
            }
            el = el.parentElement;
        }
        if (!el || el === body) {
            el = undefined;
        }
        return el;
    };
    Object.defineProperty(ScrollEventHandler, "instance", {
        get: function () {
            if (ScrollEventHandler._instance === undefined) {
                ScrollEventHandler._instance = new ScrollEventHandler();
            }
            return ScrollEventHandler._instance;
        },
        enumerable: true,
        configurable: true
    });
    ScrollEventHandler.prototype.reset = function () {
        var _this = this;
        this._eventListeners.forEach(function (callback) {
            _this.unregister(_this._scrollableParents[0], callback);
        });
        this._scrollableParents = [];
        this._cachedClientRect = undefined;
    };
    ScrollEventHandler.prototype.register = function (element, callbackFunction, scrollableParent) {
        var _this = this;
        if (!this._scrollableParents || !this._scrollableParents.length) {
            this._scrollableParents =
                scrollableParent ? [scrollableParent] : this._findScrollableParents(element);
        }
        this._scrollableParents.forEach(function (parent, index, allParents) {
            var totalRegisteredCount = _this._updateRegisteredChildren(parent, 1);
            if (totalRegisteredCount === 1) {
                _this._listenEvents(parent);
            }
        });
        this._listenEvents(window);
        this._eventListeners.add(callbackFunction);
    };
    ScrollEventHandler.prototype.unregister = function (element, callbackFunction) {
        var _this = this;
        Validate.isNotNullOrUndefined(callbackFunction, 'unregister callback function');
        if (!this._eventListeners.has(callbackFunction)) {
            return;
        }
        this._eventListeners.delete(callbackFunction);
        var parents = this._scrollableParents && this._scrollableParents.length
            ? this._scrollableParents
            : this._findScrollableParents(element);
        parents.forEach(function (parent, index, allParents) {
            var count = _this._updateRegisteredChildren(parent, -1);
            if (count <= 0) {
                _this._unlistenEvents(parent);
            }
        });
        if (this._eventListeners.size === 0) {
            this._unlistenEvents(window);
        }
    };
    ScrollEventHandler.prototype._scrollEventHandler = function (event) {
        var _this = this;
        if (!this._cachedClientRect || this._cacheExpired) {
            this._cachedClientRect = this._scrollableParents[this._scrollableParents.length - 1].getBoundingClientRect();
            this._cachedClientRectAge = Date.now();
        }
        this._eventListeners.forEach(function (listener) {
            listener(event, _this._cachedClientRect);
        });
    };
    ScrollEventHandler.prototype._findScrollableParents = function (startingElement) {
        var parents = [];
        var parent = startingElement;
        while (parent) {
            parent = ScrollEventHandler._findScrollableParent(parent);
            if (parent) {
                parents.push(parent);
                parent = parent.parentElement;
            }
        }
        return parents.length ? parents : [document.body];
    };
    ScrollEventHandler.prototype._listenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && !this._isListeningWindow)) {
            this._addEventListener(parent);
            if (isWindow) {
                this._isListeningWindow = true;
            }
        }
    };
    ScrollEventHandler.prototype._addEventListener = function (element) {
        element.addEventListener(ScrollEventHandler.SCROLL, this._lazyHandler, false);
        element.addEventListener(ScrollEventHandler.RESIZE, this._lazyHandler, false);
    };
    ScrollEventHandler.prototype._unlistenEvents = function (parent) {
        if (!parent) {
            return;
        }
        var isWindow = parent === window;
        if (!isWindow || (isWindow && this._isListeningWindow)) {
            this._removeEventListener(parent);
            if (isWindow) {
                this._isListeningWindow = false;
            }
        }
    };
    ScrollEventHandler.prototype._removeEventListener = function (element) {
        element.removeEventListener(ScrollEventHandler.SCROLL, this._lazyHandler);
        element.removeEventListener(ScrollEventHandler.RESIZE, this._lazyHandler);
    };
    ScrollEventHandler.prototype._updateRegisteredChildren = function (scrollableParent, count) {
        var lazyChildrenCount = count + Number(scrollableParent.getAttribute(ScrollEventHandler._eventTrackerAttribute));
        if (_SPKillSwitch.isActivated(Guid.parse('9be11127-2aff-4a55-b297-caee84a60ad2'), '8/7/2018', 'SOX_FixRegisteredChildrenCount')) {
            if (count !== 0) {
                scrollableParent.setAttribute(ScrollEventHandler._eventTrackerAttribute, lazyChildrenCount.toString());
            }
        }
        else {
            if (lazyChildrenCount > 0) {
                scrollableParent.setAttribute(ScrollEventHandler._eventTrackerAttribute, lazyChildrenCount.toString());
            }
            else {
                scrollableParent.removeAttribute(ScrollEventHandler._eventTrackerAttribute);
            }
        }
        return lazyChildrenCount;
    };
    Object.defineProperty(ScrollEventHandler.prototype, "_cacheExpired", {
        get: function () {
            return (Date.now() - this._cachedClientRectAge >= ScrollEventHandler.CACHE_EXPIRED);
        },
        enumerable: true,
        configurable: true
    });
    ScrollEventHandler._eventTrackerAttribute = 'data-sp-webpart-event-listener';
    ScrollEventHandler.SCROLL = 'scroll';
    ScrollEventHandler.RESIZE = 'resize';
    ScrollEventHandler.CACHE_EXPIRED = 100;
    tslib_1.__decorate([
        autobind
    ], ScrollEventHandler.prototype, "register", null);
    tslib_1.__decorate([
        autobind
    ], ScrollEventHandler.prototype, "_findScrollableParents", null);
    tslib_1.__decorate([
        autobind
    ], ScrollEventHandler.prototype, "_unlistenEvents", null);
    tslib_1.__decorate([
        autobind
    ], ScrollEventHandler.prototype, "_updateRegisteredChildren", null);
    tslib_1.__decorate([
        autobind
    ], ScrollEventHandler, "_findScrollableParent", null);
    return ScrollEventHandler;
}());
export default ScrollEventHandler;
