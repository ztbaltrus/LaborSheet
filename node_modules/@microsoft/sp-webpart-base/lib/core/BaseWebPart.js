'use strict';
import * as tslib_1 from "tslib";
import { virtual } from '@microsoft/decorators';
import * as lodash from '@microsoft/sp-lodash-subset';
import { _LogSource, _LogType, _LogEntry, _TraceLogger, _EngagementLogger } from '@microsoft/sp-diagnostics';
import { DisplayMode, Text, Validate, Version } from '@microsoft/sp-core-library';
import { BaseComponent, DynamicProperty } from '@microsoft/sp-component-base';
import { PropertyPaneFieldType } from '../propertyPane/propertyPaneFields/propertyPaneField/IPropertyPaneField';
import { SPWebPartError, SPWebPartErrorCode } from './error/SPWebPartError';
import { deepFreeze } from '../utils/Object';
import { executeAndReThrow } from '../utils/ExecuteAndReThrow';
import KillSwitches from './../common/KillSwitches';
import strings from './loc/Strings.resx';
var BaseWebPart = (function (_super) {
    tslib_1.__extends(BaseWebPart, _super);
    function BaseWebPart() {
        var _this = _super.call(this) || this;
        _this._initialized = false;
        _this._baseLogSource = _LogSource.create('BaseWebPart');
        _this._hasEditLogged = false;
        _this._emptyResolvedPromise = Promise.resolve();
        if (_this.constructor['name'] === 'BaseWebPart') {
            throw SPWebPartError.create(SPWebPartErrorCode.BaseConstructError);
        }
        return _this;
    }
    Object.defineProperty(BaseWebPart.prototype, "dataVersion", {
        get: function () {
            return Version.parse('1.0');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "displayMode", {
        get: function () { return this._displayMode; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "properties", {
        get: function () {
            if (this._initialized) {
                return this._properties;
            }
            else {
                throw SPWebPartError.create(SPWebPartErrorCode.NotInitializedError);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "propertiesMetadata", {
        get: function () { return undefined; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "disableReactivePropertyChanges", {
        get: function () { return false; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "previewImageUrl", {
        get: function () { return undefined; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "accessibleTitle", {
        get: function () { return this._getDefaultAccessibleTitle(); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "title", {
        get: function () { return this._title; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "description", {
        get: function () { return this._description; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPart.prototype, "persistedProperties", {
        get: function () {
            return this._backupProperties ? this._backupProperties : this.properties;
        },
        enumerable: true,
        configurable: true
    });
    BaseWebPart.prototype._getPropertyPaneData = function () {
        var _this = this;
        return this._loadPropertyPaneResources().then(function () {
            var configuration = _this.getPropertyPaneConfiguration();
            _this._fixUpDynamicDataConfiguration(configuration);
            return {
                webPartId: _this.context.instanceId,
                title: _this.title,
                isReactive: !_this.disableReactivePropertyChanges,
                configuration: configuration,
                properties: _this._cloneProperties(_this.properties),
                onPropertyPaneFieldChanged: undefined,
                onConfigurationEvent: undefined,
                onRendered: _this.onPropertyPaneRendered,
                dynamicConfiguration: {
                    defaultCallback: (function () { _this._dynamicPropertyRefresh(); }).bind(_this),
                    dynamicDataProvider: _this.context.dynamicDataProvider
                }
            };
        });
    };
    BaseWebPart.prototype._loadPropertyPaneResources = function () {
        if (!this._loadPropertyPaneResourcesPromise) {
            this._loadPropertyPaneResourcesPromise = this.loadPropertyPaneResources();
        }
        return this._loadPropertyPaneResourcesPromise;
    };
    BaseWebPart.prototype._onPropertyPaneFieldChanged = function (propertyPath, newValue) {
        if (this.disableReactivePropertyChanges && !this._backupProperties) {
            this._backupProperties = this._cloneProperties(this.properties);
        }
        var oldValue = lodash.get(this._properties, propertyPath); 
        this._updateProperty(propertyPath, newValue);
        this.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
        this._afterPropertyUpdated(!this.disableReactivePropertyChanges);
    };
    BaseWebPart.prototype._onPropertyPaneLifeCycleEvent = function (event) {
        var _this = this;
        if (this.context.host.propertyPaneLifeCycleEventCallback) {
            this.context.host.propertyPaneLifeCycleEventCallback(event, this._internalSerialize());
        }
        switch (event) {
            case 1 :
                this._loadPropertyPaneResources().then(function () { return _this.onPropertyPaneConfigurationStart(); });
                break;
            case 2 :
                if (this.disableReactivePropertyChanges && this._backupProperties) {
                    this._properties = this._backupProperties;
                    this._backupProperties = undefined;
                }
                this.onPropertyPaneConfigurationComplete();
                break;
            case 5 :
                this._backupProperties = this.properties;
                this.onAfterPropertyPaneChangesApplied();
                this._afterPropertyUpdated(true);
                break;
        }
    };
    BaseWebPart.prototype._isPropertyPaneReactive = function () {
        return !this.disableReactivePropertyChanges;
    };
    BaseWebPart.prototype._internalSerialize = function () {
        var _this = this;
        var data; 
        executeAndReThrow(function () {
            _this.onBeforeSerialize();
            var propertiesJson = JSON.stringify(_this.properties);
            if (!_this._hasEditLogged && _this._initPropertiesSnapshot !== propertiesJson) {
                var isInternal = !!_this.context.manifest.isInternal;
                var logEntry = new _LogEntry(_this._baseLogSource.id, 'WebPartEdited', _LogType.Event, {
                    'alias': _this.context.manifest.alias,
                    'isInternal': isInternal.toString()
                });
                _EngagementLogger.logEventWithLogEntry(logEntry);
                _this._hasEditLogged = true;
            }
            var serializedData = _this._serialize();
            Validate.isNotNullOrUndefined(serializedData.dataVersion, 'serialized data version');
            if (propertiesJson && propertiesJson.indexOf(DynamicProperty._TYPE_NAME) !== -1) {
                _this._serializeDynamicData(serializedData);
            }
            data = {
                id: _this.context.manifest.id,
                instanceId: _this.context.instanceId,
                title: _this.title,
                description: _this.description,
                serverProcessedContent: serializedData.serverProcessedContent,
                dynamicDataPaths: serializedData.dynamicDataPaths,
                dynamicDataValues: serializedData.dynamicDataValues,
                dataVersion: serializedData.dataVersion.toString(),
                properties: serializedData.properties
            };
        }, SPWebPartError.create(SPWebPartErrorCode.SerializationFailed, this.context.webPartTag), this._baseLogSource);
        return data;
    };
    BaseWebPart.prototype._internalDispose = function () {
        _TraceLogger.logVerbose(this._baseLogSource, Text.format(strings.DisposeLog, this.context.webPartTag));
        _super.prototype.dispose.call(this);
    };
    BaseWebPart.prototype._internalOnAfterResize = function () {
    };
    BaseWebPart.prototype.onInit = function () {
        return Promise.resolve(undefined);
    };
    BaseWebPart.prototype.onDisplayModeChanged = function (oldDisplayMode) {
    };
    BaseWebPart.prototype.onBeforeSerialize = function () {
    };
    BaseWebPart.prototype.onAfterDeserialize = function (deserializedObject, dataVersion) {
        return deserializedObject;
    };
    BaseWebPart.prototype.onEvent = function (eventName, eventObject) {
    };
    BaseWebPart.prototype.loadPropertyPaneResources = function () {
        return this._emptyResolvedPromise;
    };
    BaseWebPart.prototype.getPropertyPaneConfiguration = function () {
        return {
            pages: []
        };
    };
    BaseWebPart.prototype.onDispose = function () {
    };
    BaseWebPart.prototype.onPropertyPaneFieldChanged = function (propertyPath, oldValue, newValue) {
    };
    BaseWebPart.prototype.onPropertyPaneConfigurationStart = function () {
    };
    BaseWebPart.prototype.onPropertyPaneConfigurationComplete = function () {
    };
    BaseWebPart.prototype.onAfterPropertyPaneChangesApplied = function () {
    };
    BaseWebPart.prototype.onPropertyPaneRendered = function () {
    };
    BaseWebPart.prototype._internalInitialize = function (webPartContext, addedFromPersistedData, mode) {
        Validate.isNotNullOrUndefined(webPartContext, 'webPartContext');
        deepFreeze(webPartContext.manifest);
        _super.prototype._initializeContext.call(this, webPartContext);
        _TraceLogger.logVerbose(this._baseLogSource, Text.format(strings.ConstructLog, webPartContext.webPartTag));
        this.onDispose = this.onDispose.bind(this);
        this.onPropertyPaneRendered = this.onPropertyPaneRendered.bind(this);
        this._initialized = true;
        this._displayMode = mode;
        this._renderedFromPersistedData = addedFromPersistedData;
        if (!this._renderedFromPersistedData) {
            var isInternal = this.context.manifest.isInternal || false;
            var logEntry = new _LogEntry(this._baseLogSource.id, 'WebPartAdded', _LogType.Event, {
                'alias': this.context.manifest.alias,
                'isInternal': isInternal.toString()
            });
            _EngagementLogger.logEventWithLogEntry(logEntry);
        }
    };
    BaseWebPart.prototype._internalGetData = function () {
        return this._emptyResolvedPromise;
    };
    BaseWebPart.prototype._internalSetDisplayMode = function (newDisplayMode) {
        if (this._displayMode !== newDisplayMode) {
            var oldDisplayMode = this._displayMode;
            this._displayMode = newDisplayMode;
            this.onDisplayModeChanged(oldDisplayMode);
        }
    };
    BaseWebPart.prototype._internalSetDirtyBit = function () {
        if (this.displayMode === DisplayMode.Read) {
            return;
        }
        var serializedState = this._internalSerialize();
        var newState = JSON.stringify(serializedState);
        if (!this._previousState) {
            this._previousState = newState;
        }
        else if (this._previousState !== newState && this.context.host.setDirty) {
            this.context.host.setDirty(this.context.instanceId, serializedState);
            this._previousState = newState;
        }
    };
    BaseWebPart.prototype._getDefaultAccessibleTitle = function () {
        return Text.format(strings.GenericAccessibleLabelTemplate, this.title);
    };
    BaseWebPart.prototype._reInstateServerProcessedData = function (deserializedProperties, serverProcessedContent) {
        var _this = this;
        if (!deserializedProperties) {
            return {};
        }
        var fixedProperties = deserializedProperties;
        if (!this._renderedFromPersistedData) {
            return fixedProperties;
        }
        this._forEachPropertyWithMetaData(function (propPath, metadata) {
            if (_this.context.manifest.id !== 'b7dd04e1-19ce-4b24-9132-b60a1c2b910d'
                && metadata.isHtmlString) {
                lodash.set(fixedProperties, propPath, undefined);
            }
        }, fixedProperties);
        if (serverProcessedContent) {
            var htmlMaps = [
                serverProcessedContent.htmlStrings,
                serverProcessedContent.searchablePlainTexts,
                serverProcessedContent.imageSources,
                serverProcessedContent.links,
                serverProcessedContent.componentDependencies
            ];
            for (var _i = 0, htmlMaps_1 = htmlMaps; _i < htmlMaps_1.length; _i++) {
                var htmlMap = htmlMaps_1[_i];
                if (htmlMap) {
                    for (var propPath in htmlMap) {
                        var value = htmlMap[propPath];
                        if (typeof value === 'string') {
                            lodash.set(fixedProperties, propPath, value);
                        }
                    }
                }
            }
        }
        return fixedProperties;
    };
    BaseWebPart.prototype._forEachPropertyWithMetaData = function (metadataProcessor, properties ) {
        if (this.propertiesMetadata) {
            var _loop_1 = function (propPath) {
                var metadata = this_1.propertiesMetadata[propPath];
                this_1._validateAndIteratePath(propPath, properties || this_1.properties, function (fixedPropPath, index) {
                    metadataProcessor(fixedPropPath, metadata, index);
                });
            };
            var this_1 = this;
            for (var propPath in this.propertiesMetadata) {
                _loop_1(propPath);
            }
        }
    };
    BaseWebPart.prototype._validateAndIteratePath = function (propPath, properties,  propertyPathHandler) {
        var wildcardCount = (propPath.match(/\*/g) || []).length;
        if (wildcardCount > 1) {
            console.warn("Invalid property path: Multiple wildcards are not supported in property paths.\nEntry with path '" + propPath + "' got ignored in the properties metadata.");
            return;
        }
        else if (wildcardCount === 1) {
            var index = propPath.indexOf('[*]');
            if (index < -1) {
                console.warn("Invalid property path: Wildcards are only supported inside brackets to select array\nindices as in 'foo[*].bar'. Entry with path '" + propPath + "' got ignored in the properties metadata.");
                return;
            }
            else {
                var arrayPath = propPath.substr(0, index);
                var arrayInstance = lodash.get(properties, arrayPath);
                if (!arrayInstance) {
                    console.warn("Invalid property path: Could not find an array named '" + arrayPath + "' in the properties.\nEntry with path '" + propPath + "' got ignored in the properties metadata.");
                    return;
                }
                else {
                    for (var i = 0; i < arrayInstance.length; i++) {
                        var fixedPropPath = propPath.replace('*', "" + i);
                        propertyPathHandler(fixedPropPath, i);
                    }
                }
            }
        }
        else {
            propertyPathHandler(propPath);
        }
    };
    BaseWebPart.prototype._foreachCustomMetadata = function (metadata, iteration, customMetadataProcessor, properties ) {
        if (metadata && metadata.customMetadata) {
            var _loop_2 = function (propName) {
                var propPath = metadata.customMetadata[propName];
                if (iteration !== undefined && propPath.indexOf('*') !== -1) {
                    propPath = propPath.replace('*', iteration.toString());
                }
                this_2._validateAndIteratePath(propPath, properties || this_2.properties, function (fixedPropPath, customIteration) {
                    if (customIteration === undefined && metadata.customMetadata) {
                        customMetadataProcessor(fixedPropPath, propName);
                    }
                });
            };
            var this_2 = this;
            for (var propName in metadata.customMetadata) {
                _loop_2(propName);
            }
        }
    };
    BaseWebPart.prototype._internalDeserialize = function (data) {
        if (data) {
            if (data.title) {
                this._title = data.title;
            }
            if (data.description) {
                this._description = data.description;
            }
            if (typeof data.dataVersion !== 'string') {
                data.dataVersion = '1.0';
            }
            var deserializedData = {
                properties: data.properties,
                serverProcessedContent: data.serverProcessedContent,
                dynamicDataPaths: data.dynamicDataPaths,
                dynamicDataValues: data.dynamicDataValues,
                dataVersion: Version.tryParse(data.dataVersion)
            };
            this._deserializeDynamicData(deserializedData);
            var deserializedPropsObject = this._reInstateServerProcessedData(deserializedData.properties, deserializedData.serverProcessedContent);
            var fixedProps = this.onAfterDeserialize(deserializedPropsObject, deserializedData.dataVersion);
            this._initPropertiesSnapshot = JSON.stringify(deserializedPropsObject);
            if (!fixedProps) {
                throw SPWebPartError.create(SPWebPartErrorCode.OnAfterDeserializeReturnedNull, this.context.webPartTag);
            }
            this._properties = fixedProps;
        }
    };
    BaseWebPart.prototype._afterPropertyUpdated = function (shouldRefresh) {
        if (this.context.host.setDirty) {
            this.context.host.setDirty(this.context.instanceId, this.properties);
        }
        if (shouldRefresh) {
            this._refresh();
        }
    };
    BaseWebPart.prototype._internalSetWebPartData = function (webPartData) {
        this._internalDeserialize(webPartData);
        this._refresh();
    };
    BaseWebPart.prototype._fixUpDynamicDataConfiguration = function (configuration) {
        var _this = this;
        configuration.pages.forEach(function (page) {
            page.groups.forEach(function (group) {
                group.groupFields.forEach(function (field) {
                    if (field.type === PropertyPaneFieldType.DynamicTextField) {
                        var props = field.properties;
                        props.dynamicDataProvider = _this.context.dynamicDataProvider;
                        props.changeCallback = (function () { _this._dynamicPropertyRefresh(); }).bind(_this);
                    }
                });
            });
        });
    };
    BaseWebPart.prototype._serialize = function () {
        var _this = this;
        var serverProcessedContent = {
            htmlStrings: {},
            searchablePlainTexts: {},
            imageSources: {},
            links: {}
        };
        var properties = this._cloneProperties(this.persistedProperties);
        this._forEachPropertyWithMetaData(function (propPath, metadata, iteration) {
            if (metadata.shouldNotPersist) {
                lodash.set(properties, propPath, undefined);
            }
            var key = propPath;
            var value = lodash.get(properties, propPath);
            if (serverProcessedContent && typeof value === 'string' && value !== undefined) {
                if (serverProcessedContent.htmlStrings && metadata.isHtmlString) {
                    serverProcessedContent.htmlStrings[key] = value;
                }
                else if (serverProcessedContent.searchablePlainTexts && metadata.isSearchablePlainText) {
                    serverProcessedContent.searchablePlainTexts[key] = value;
                }
                else if (serverProcessedContent.links && metadata.isLink) {
                    serverProcessedContent.links[key] = value;
                }
                else if (serverProcessedContent.imageSources && metadata.isImageSource) {
                    serverProcessedContent.imageSources[key] = value;
                }
                else if (metadata.isComponentDependency) {
                    if (!serverProcessedContent.componentDependencies) {
                        serverProcessedContent.componentDependencies = {};
                    }
                    serverProcessedContent.componentDependencies[key] = value;
                }
                if (metadata.customMetadata) {
                    _this._internalSerializeCustomMetadata(key, metadata, properties, serverProcessedContent, iteration);
                }
                lodash.set(properties, propPath, undefined);
            }
        });
        return {
            dataVersion: this.dataVersion,
            properties: properties,
            serverProcessedContent: serverProcessedContent
        };
    };
    BaseWebPart.prototype._internalSerializeCustomMetadata = function (propertyPath, metadata, properties, serverProcessedContent, iteration) {
        var customMetadata = {};
        this._foreachCustomMetadata(metadata, iteration, function (customPropertyPath, customPropertyName) {
            var customValue = lodash.get(properties, customPropertyPath);
            if (serverProcessedContent && customValue !== undefined) {
                customMetadata[customPropertyName] = customValue;
            }
        });
        if (!serverProcessedContent.customMetadata) {
            serverProcessedContent.customMetadata = {};
        }
        serverProcessedContent.customMetadata[propertyPath] = customMetadata;
    };
    BaseWebPart.prototype._serializeDynamicData = function (serializedData) {
        var props = serializedData.properties; 
        var dynamicDataPaths = {};
        var dynamicDataValues = {}; 
        var key = lodash.findKey(props, { __type: DynamicProperty._TYPE_NAME });
        while (key) {
            var dynamicDataReference = lodash.get(props, key + '.reference');
            var dynamicDataValue = lodash.get(props, key + '.value');
            if (dynamicDataReference) {
                dynamicDataPaths[key] = dynamicDataReference;
                lodash.unset(props, key);
            }
            else if (dynamicDataValue !== undefined) {
                dynamicDataValues[key] = dynamicDataValue;
                lodash.unset(props, key);
            }
            else {
                throw new Error('Dynamic Data is misconfigured');
            }
            key = lodash.findKey(props, { __type: DynamicProperty._TYPE_NAME });
        }
        serializedData.dynamicDataPaths = dynamicDataPaths;
        serializedData.dynamicDataValues = dynamicDataValues;
    };
    BaseWebPart.prototype._deserializeDynamicData = function (data) {
        var _this = this;
        if (data.dynamicDataPaths) {
            for (var path in data.dynamicDataPaths) {
                if (data.dynamicDataPaths.hasOwnProperty(path)) {
                    var dynamicProperty = new DynamicProperty(
                    this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(this));
                    dynamicProperty.setReference(data.dynamicDataPaths[path]);
                    lodash.set(data.properties, path, dynamicProperty);
                }
            }
        }
        if (data.dynamicDataValues) {
            for (var path in data.dynamicDataValues) {
                if (data.dynamicDataValues.hasOwnProperty(path)) {
                    var dynamicProperty = new DynamicProperty(
                    this.context.dynamicDataProvider, (function () { _this._dynamicPropertyRefresh(); }).bind(this));
                    dynamicProperty.setValue(data.dynamicDataValues[path]);
                    lodash.set(data.properties, path, dynamicProperty);
                }
            }
        }
    };
    BaseWebPart.prototype._updateProperty = function (propertyPath, newValue) {
        lodash.update(this.properties, propertyPath, function () { return newValue; });
    };
    BaseWebPart.prototype._cloneProperties = function (propertiesToClone) {
        if (!KillSwitches.isPropertiesCloningUsingDeepCloneWithKillSwitchActivated()) {
            return lodash.cloneDeepWith(propertiesToClone, function (prop) {
                if (prop instanceof DynamicProperty) {
                    return prop._cloneDeep(prop); 
                }
            });
        }
        else {
            return lodash.cloneDeep(propertiesToClone);
        }
    };
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "propertiesMetadata", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "disableReactivePropertyChanges", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "previewImageUrl", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "accessibleTitle", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onInit", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onDisplayModeChanged", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onBeforeSerialize", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onAfterDeserialize", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "loadPropertyPaneResources", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "getPropertyPaneConfiguration", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onDispose", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onPropertyPaneFieldChanged", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onPropertyPaneConfigurationStart", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onPropertyPaneConfigurationComplete", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onAfterPropertyPaneChangesApplied", null);
    tslib_1.__decorate([
        virtual
    ], BaseWebPart.prototype, "onPropertyPaneRendered", null);
    return BaseWebPart;
}(BaseComponent));
export default BaseWebPart;
