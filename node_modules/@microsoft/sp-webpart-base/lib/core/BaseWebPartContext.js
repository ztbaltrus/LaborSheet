import * as tslib_1 from "tslib";
import { _TraceLogger } from '@microsoft/sp-diagnostics';
import { BaseComponentContext } from '@microsoft/sp-component-base';
import { Validate } from '@microsoft/sp-core-library';
import PropertyPaneAccessor from './context/PropertyPaneAccessor';
var BaseWebPartContext = (function (_super) {
    tslib_1.__extends(BaseWebPartContext, _super);
    function BaseWebPartContext(parameters) {
        var _this = _super.call(this, parameters) || this;
        Validate.isNotNullOrUndefined(parameters, 'webpart context');
        Validate.isNotNullOrUndefined(parameters.instanceId, 'webpart context instanceId');
        Validate.isNotNullOrUndefined(parameters.webPartTag, 'webpart context webPartTag');
        Validate.isNotNullOrUndefined(parameters.eventAggregator, 'webpart context eventAggregator');
        Validate.isNotNullOrUndefined(parameters.host, 'webpart context host');
        Validate.isNotNullOrUndefined(parameters.isPropertyPaneRenderedByWebPart, 'webpart context isPropertyPaneRenderedByWebPart');
        Validate.isNotNullOrUndefined(parameters.isPropertyPaneOpen, 'webpart context isPropertyPaneOpen');
        Validate.isNotNullOrUndefined(parameters.requestPropertyPaneAction, 'webpart context requestPropertyPaneAction');
        _this._webPartTag = parameters.webPartTag;
        _this._host = parameters.host;
        _this._eventAggregator = parameters.eventAggregator;
        _this._requestPropertyPaneAction = parameters.requestPropertyPaneAction;
        _this._isPropertyPaneRenderedByWebPart = parameters.isPropertyPaneRenderedByWebPart;
        _this._isPropertyPaneOpen = parameters.isPropertyPaneOpen;
        _this._privateDataUpdatedEvent = parameters._dataUpdatedEvent;
        _this._propertyPaneAccessor = new PropertyPaneAccessor(function () { _this._requestPropertyPaneAction(_this.instanceId, 1 , true); }, function () { _this._requestPropertyPaneAction(_this.instanceId, 5 ); }, function () { return _this._isPropertyPaneRenderedByWebPart(); }, function () { return _this._isPropertyPaneOpen(); });
        return _this;
    }
    Object.defineProperty(BaseWebPartContext.prototype, "webPartTag", {
        get: function () { return this._webPartTag; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "eventAggregator", {
        get: function () {
            if (!DATACENTER) {
                _TraceLogger.logVerbose(this._logSource, 'EventAggregator is not supported for OnPrem.');
            }
            return this._eventAggregator;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "propertyPane", {
        get: function () { return this._propertyPaneAccessor; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "host", {
        get: function () { return this._host; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseWebPartContext.prototype, "_dataUpdatedEvent", {
        get: function () { return this._privateDataUpdatedEvent; },
        enumerable: true,
        configurable: true
    });
    return BaseWebPartContext;
}(BaseComponentContext));
export default BaseWebPartContext;
