import { Guid } from '@microsoft/sp-core-library';
import { PropertyPaneAction } from '../../propertyPane/propertyPaneDefinitions/PropertyPaneAction';
/**
 * A schema for the data send in 'Window.postMessage'.
 * If this interface is changed then you must also change the listener in
 * 'sp-webpart-application:SpWebPartApplication._propertyPaneEventListener()'.
 */
export interface IPropertyPaneEventCallback {
    action: PropertyPaneAction;
    webPartInstanceId: string;
}
export default class IframedWebPartController {
    private _iframeSrcUrl;
    private _iframedWebpartsMap;
    private _ppIframeElement;
    private _pageContentElement;
    private _iframedPropertyPaneContainer;
    constructor();
    /**
     *  Returns an iframe that points to a SpWebApplication that loads the webpart.
     *  @param listId - the id/guid of the page source.
     *  Can be found by on the page context. i.e. 'pageContext.list.id'
     *  Or can be found by inspecting the page source of the hosting page and searching for
     * 'Web/Lists('.
     *  Ex: "Web/Lists(guid'76b431ab-0059-4f43-b079-0f104d473e17')" where '76b431ab-0059-4f43-b079-0f104d473e17' is
     *  the parameter that should be provided.
     *  @param listItemId - the number of the webpart item within the list.
     *  Can be found on the page context. i.e. 'pageContext.listItem.id'
     *  Or by inspecting the page source of the hosting page and searching for '/Items('.
     *  Ex: "Web/Lists(guid'76b431ab-0059-4f43-b079-0f104d473e17')/Items(109)" where the number '109' is the
     *  parameter that should be provided.
     *  @param instanceId - the guid of the web part instance.
     *  @param domElement - the domElement to render the web part into.
     */
    loadWebPart(absoluteUrlPrefix: string, listId: Guid, listItemId: number, instanceId: string, domElement: HTMLElement): void;
    /**
     * To open a property pane for a web part that has been loaded into an iframe, we create a sibling dom element on the
     * page and render the property pane into it. We use the same method of loading an iframe with the addition of a
     * query parameter, 'openPropertyPane=true'. By default 'openPropertyPane' is undefined and thus false.
     * @param instanceId - the instanceId of the corresponding web part.
     * @param propertyPaneState - the desired state of the property pane.
     */
    requestPropertyPaneAction(instanceId: string, propertyPaneState: PropertyPaneAction): void;
    private _hidePropertyPane(webPartInstanceId);
    /**
     * Adds and removes the neccessary styles to show the iframed property pane container.
     * Also posts a message to the window element so that the PropertyPaneController
     * can show the property pane content.
     * @param webPartInstanceId - instanceId so we know which property pane to open
     */
    private _showPropertyPane(webPartInstanceId);
    /**
     * A listener on the window to receive callbacks from the property pane.
     * This is neccessary for the scenario when the iframed property pane (which
     * is in a seperate iframe) does not have access to this IframedWebPartController which
     * can hide and unhide that property pane element.
     */
    private _receivePropertyPaneEvent(event);
    /**
     * Listens for property pane events from an iframed property pane.
     */
    private _registerToIframedPropertyPaneEvents();
}
