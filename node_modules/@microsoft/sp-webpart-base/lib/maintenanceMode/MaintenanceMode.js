import * as tslib_1 from "tslib";
import { sealed } from '@microsoft/decorators';
import * as React from 'react';
import { Environment } from '@microsoft/sp-core-library';
import { IconButton } from '@microsoft/office-ui-fabric-react-bundle';
import { Pivot } from 'office-ui-fabric-react/lib/components/Pivot/Pivot';
import { PivotItem } from 'office-ui-fabric-react/lib/components/Pivot/PivotItem';
import { MaintenanceModeText } from './MaintenanceModeText';
import styles from './MaintenanceMode.module.scss';
import strings from './loc/Strings.resx';
var MaintenanceMode = (function (_super) {
    tslib_1.__extends(MaintenanceMode, _super);
    function MaintenanceMode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MaintenanceMode.prototype.render = function () {
        var context = this.props.context;
        var isInternal = !!context.manifest.isInternal;
        var isInternalString = isInternal.toString() + " (" + (isInternal ? strings.MadeByMicrosoft : strings.NotMadeByMicrosoft) + ")";
        var envStringSuffix = '';
        switch (Environment.type) {
            case 0:
                envStringSuffix = strings.Test;
                break;
            case 1:
                envStringSuffix = strings.LocalWorkbench;
                break;
            case 2:
                envStringSuffix = strings.SharePoint;
                break;
            case 3:
                envStringSuffix = strings.ClassicSharePoint;
                break;
        }
        var envString = Environment.type.toString() + " (" + envStringSuffix + ")";
        return (React.createElement("div", { className: styles.maintenanceModeCard },
            React.createElement("div", { className: styles.cardContainer },
                React.createElement("div", { className: styles.cardHeader },
                    React.createElement("span", null, context.manifest.alias),
                    React.createElement(IconButton, { iconProps: { iconName: 'Copy' }, title: strings.CopyToClipboard, ariaLabel: strings.CopyToClipboard, className: styles.copyButton, onClick: this._copyData.bind(this) })),
                React.createElement("div", { className: styles.cardBody },
                    React.createElement(Pivot, null,
                        React.createElement(PivotItem, { linkText: strings.General },
                            React.createElement("div", { className: styles.pivotItem },
                                React.createElement("pre", null,
                                    React.createElement("code", null,
                                        React.createElement(MaintenanceModeText, { label: strings.Alias, value: context.manifest.alias }),
                                        React.createElement(MaintenanceModeText, { label: strings.Id, value: context.manifest.id }),
                                        React.createElement(MaintenanceModeText, { label: strings.InstanceId, value: context.instanceId }),
                                        React.createElement(MaintenanceModeText, { label: strings.IsInternal, value: isInternalString }),
                                        React.createElement(MaintenanceModeText, { label: strings.Version, value: context.manifest.version }),
                                        React.createElement(MaintenanceModeText, { label: strings.Environment, value: envString }),
                                        React.createElement(MaintenanceModeText, { label: strings.UserAgent, value: navigator.userAgent }))))),
                        React.createElement(PivotItem, { linkText: strings.Manifest, className: styles.pivotItem },
                            React.createElement("div", { className: styles.pivotItemContent },
                                React.createElement("pre", null,
                                    React.createElement("code", null,
                                        React.createElement("span", null, JSON.stringify(context.manifest, undefined, 2)))))),
                        React.createElement(PivotItem, { linkText: strings.Data, className: styles.pivotItem },
                            React.createElement("div", { className: styles.pivotItemContent },
                                React.createElement("pre", null,
                                    React.createElement("code", null,
                                        React.createElement("span", null, JSON.stringify(this.props.data, undefined, 2)))))))))));
    };
    MaintenanceMode.prototype._copyData = function () {
        var details = {}; 
        var context = this.props.context;
        var general = {}; 
        general.alias = context.manifest.alias;
        general.id = context.manifest.id;
        general.instanceId = context.instanceId;
        general.isInternal = context.manifest.isInternal;
        general.version = context.manifest.version;
        general.environment = Environment.type.toString();
        general.userAgent = navigator.userAgent;
        details.general = general;
        details.manifest = context.manifest;
        details.webPartData = this.props.data;
        this._copyDataToClipBoard(JSON.stringify(details, undefined, 2));
    };
    MaintenanceMode.prototype._copyDataToClipBoard = function (data) {
        var result = false;
        if (window.clipboardData && window.window.clipboardData.setData) {
            result = window.clipboardData.setData('Text', data); 
        }
        else if (document.queryCommandSupported && document.queryCommandSupported('copy')) {
            var textarea = document.createElement('textarea');
            textarea.textContent = data;
            textarea.style.position = 'fixed'; 
            textarea.style.height = '0';
            document.body.appendChild(textarea);
            textarea.select();
            try {
                result = document.execCommand('copy'); 
            }
            catch (ex) {
                result = false;
            }
            finally {
                document.body.removeChild(textarea);
            }
        }
        return result;
    };
    MaintenanceMode = tslib_1.__decorate([
        sealed
    ], MaintenanceMode);
    return MaintenanceMode;
}(React.Component));
export default MaintenanceMode;
