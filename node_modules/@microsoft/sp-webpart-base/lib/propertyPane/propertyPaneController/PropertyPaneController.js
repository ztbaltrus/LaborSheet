'use strict';
import * as ReactDOM from 'react-dom';
import * as React from 'react';
import { Environment, EnvironmentType, ServiceKey, Text, Validate } from '@microsoft/sp-core-library';
import { _EngagementLogger, _LogSource, _TraceLogger, _LogType, _LogEntry, _QosMonitor } from '@microsoft/sp-diagnostics';
import KillSwitches from '../../common/KillSwitches';
import strings from '../loc/Strings.resx';
import styles from './PropertyPaneController.module.scss';
var PropertyPaneController = (function () {
    function PropertyPaneController(getConsumer, callback) {
        this._logSource = _LogSource.create('PropertyPaneController');
        this._consumers = new Map();
        this._getConsumer = getConsumer;
        this._lifeCycleEventCallback = callback;
        this._constructor();
    }
    PropertyPaneController._create = function (serviceScope) {
        return new PropertyPaneController();
    };
    PropertyPaneController.prototype.registerConsumer = function (instanceId, consumer) {
        Validate.isNonemptyString(instanceId, 'instanceId');
        Validate.isNotNullOrUndefined(consumer, 'consumer');
        this._consumers.set(instanceId, consumer);
    };
    PropertyPaneController.prototype.isConsumerRegistered = function (instanceId) {
        return this._consumers.has(instanceId);
    };
    Object.defineProperty(PropertyPaneController.prototype, "currentlyConfiguredConsumerId", {
        get: function () { return this._currentlyConfiguredConsumerId; },
        enumerable: true,
        configurable: true
    });
    PropertyPaneController.prototype.requestAction = function (toBeConfiguredConsumerId, propertyPaneAction, renderedByWebPart) {
        if (propertyPaneAction === void 0) { propertyPaneAction = 4 ; }
        var noOp = renderedByWebPart &&
            propertyPaneAction === 5  &&
            toBeConfiguredConsumerId !== this._currentlyConfiguredConsumerId;
        if (!noOp) {
            var toBeConfiguredConsumer = this._tryGetConsumer(toBeConfiguredConsumerId);
            this._setPropertyPaneDOMElements();
            var paneWillOpen = !this._isOpen &&
                (propertyPaneAction === 1  || propertyPaneAction === 3 );
            var activeComponentChanged = false;
            if (toBeConfiguredConsumerId &&
                this._currentlyConfiguredConsumerId &&
                (toBeConfiguredConsumerId !== this._currentlyConfiguredConsumerId || paneWillOpen)) {
                activeComponentChanged = true;
                if (toBeConfiguredConsumer && (this._isOpen || paneWillOpen)) {
                    toBeConfiguredConsumer._loadPropertyPaneResources();
                }
                this._fireConfigurationEvent(toBeConfiguredConsumerId, 7 );
            }
            if (propertyPaneAction !== 5 ) {
                if (propertyPaneAction === 3 ) {
                    var internalToOverallComponentEdit = !!this._isPaneRenderedByWebPart !== !!renderedByWebPart;
                    if (!activeComponentChanged && internalToOverallComponentEdit) {
                        propertyPaneAction = 5 ;
                    }
                }
                this._isPaneRenderedByWebPart = !!renderedByWebPart;
            }
            this._executeAction(toBeConfiguredConsumer, toBeConfiguredConsumerId, propertyPaneAction);
            this._currentlyConfiguredConsumerId = toBeConfiguredConsumerId;
        }
        else {
            _TraceLogger.logVerbose(this._logSource, Text.format(strings.NoOpOnRefreshPropertyPaneText, toBeConfiguredConsumerId));
        }
    };
    PropertyPaneController.prototype.isRenderedByConsumer = function () {
        return this._isPaneRenderedByWebPart;
    };
    PropertyPaneController.prototype.isOpen = function () {
        return this._isOpen;
    };
    PropertyPaneController.prototype.onConsumerDelete = function (id) {
        Validate.isNonemptyString(id, 'id');
        if (id === this._currentlyConfiguredConsumerId) {
            if (this._isOpen) {
                this._renderPropertyPane(undefined, true);
            }
            this._currentlyConfiguredConsumerId = undefined;
        }
    };
    PropertyPaneController.prototype._constructor = function () {
        this._propertyPaneContainerId = Environment.type !== EnvironmentType.ClassicSharePoint ?
            PropertyPaneController.PROPERTY_PANE_CONTAINER_ID :
            PropertyPaneController.PROPERTY_PANE_CONTAINER_NOFLEXBOX_ID;
        this._onPropertyPaneFieldChanged = this._onPropertyPaneFieldChanged.bind(this);
        this._onConfigurationEvent = this._onConfigurationEvent.bind(this);
        this._fireConfigurationEvent = this._fireConfigurationEvent.bind(this);
    };
    PropertyPaneController.prototype._executeAction = function (toBeConfiguredConsumer, toBeConfiguredConsumerInstanceId, propertyPaneAction) {
        switch (propertyPaneAction) {
            case 1 :
                var paneOpenBeforeRender = this._isOpen;
                this._renderPropertyPane(toBeConfiguredConsumer, true, true);
                this._showPropertyPane();
                if (paneOpenBeforeRender) {
                    this._fireNoToggleConfigurationEvents(toBeConfiguredConsumerInstanceId);
                }
                else {
                    this._firePostToggleConfigurationEvents();
                }
                break;
            case 2 :
                if (this._isOpen) {
                    this._hidePropertyPane();
                    this._firePostToggleConfigurationEvents();
                }
                break;
            case 3 :
                if (this._isOpen) {
                    this._hidePropertyPane();
                }
                else {
                    this._renderPropertyPane(toBeConfiguredConsumer, true, true);
                    this._showPropertyPane();
                }
                this._firePostToggleConfigurationEvents();
                break;
            case 4 :
                if (this._isOpen) {
                    this._fireNoToggleConfigurationEvents(toBeConfiguredConsumerInstanceId);
                    var reset = false;
                    if (KillSwitches.isPropertyPaneDefaultActionUsingFalseResetKillSwitchActivated()) {
                        reset = true;
                    }
                    if (this._isCurrentlyConfiguredPropertyPaneReactive) {
                        this._renderPropertyPane(toBeConfiguredConsumer, true, reset);
                    }
                    else {
                        this._renderPropertyPane(toBeConfiguredConsumer, true, reset);
                    }
                }
                break;
            case 5 :
                if (this._isOpen) {
                    this._renderPropertyPane(toBeConfiguredConsumer, true, false);
                }
                break;
        }
        if (this._isOpen !== false && toBeConfiguredConsumer) {
            var wpContext = toBeConfiguredConsumer.context; 
            var wpAlias = wpContext && wpContext._manifest && wpContext._manifest.alias;
            var isInternal = wpContext && wpContext._manifest && wpContext._manifest.isInternal || false;
            var logEntry = new _LogEntry(this._logSource.id, 'PropertyPaneOpened', _LogType.Event, {
                'alias': wpAlias,
                'isInternal': isInternal.toString()
            });
            _EngagementLogger.logEventWithLogEntry(logEntry);
        }
    };
    PropertyPaneController.prototype._showPropertyPane = function () {
        if (this._pageContentElement) {
            this._pageContentElement.classList.add(styles.shrinkContent);
        }
        else {
            this._propertyPaneContainer.style.top = '50px';
            this._propertyPaneContainer.style.zIndex = '999';
        }
        if (this._workbenchCommandBarElement) {
            this._workbenchCommandBarElement.classList.add(styles.shrinkContent);
        }
        this._propertyPaneContainer.classList.add(styles.showPane);
        this._isOpen = true;
    };
    PropertyPaneController.prototype._hidePropertyPane = function () {
        if (this._pageContentElement) {
            this._pageContentElement.classList.remove(styles.shrinkContent);
        }
        else {
            ReactDOM.unmountComponentAtNode(this._propertyPaneElement);
        }
        if (this._workbenchCommandBarElement) {
            this._workbenchCommandBarElement.classList.remove(styles.shrinkContent);
        }
        this._propertyPaneContainer.classList.remove(styles.showPane);
        this._isOpen = false;
    };
    PropertyPaneController.prototype._renderPropertyPane = function (currentConsumer, recreatePropertyPane, reset) {
        var _this = this;
        var qosMonitor = new _QosMonitor('PropertyPaneController.renderPropertyPane');
        if (currentConsumer) {
            currentConsumer._getPropertyPaneData().then(function (data) {
                if (_this._currentlyConfiguredConsumerId === data.webPartId) {
                    _this._buildAndLoadPropertyPane(data, reset);
                }
            }).catch(function (error) {
                _TraceLogger.logErrorData({
                    source: _this._logSource,
                    error: error
                });
                qosMonitor.writeUnexpectedFailure('UnhandledError', error);
                throw error;
            });
        }
        else {
            this._currentPropertyPaneData = this._getEmptyPropertyPaneData();
            this._loadPropertyPaneComponent(recreatePropertyPane);
        }
    };
    PropertyPaneController.prototype._buildAndLoadPropertyPane = function (propertyPaneData, reset) {
        var _this = this;
        this._currentPropertyPaneData = propertyPaneData;
        propertyPaneData.onPropertyPaneFieldChanged = this._onPropertyPaneFieldChanged;
        propertyPaneData.onConfigurationEvent = this._onConfigurationEvent;
        propertyPaneData.render = function () { _this._reRender(); };
        propertyPaneData.shouldResetState = reset;
        if (propertyPaneData.configuration &&
            propertyPaneData.configuration.showLoadingIndicator) {
            var delay = propertyPaneData.configuration.loadingIndicatorDelayTime === undefined ?
                500 : propertyPaneData.configuration.loadingIndicatorDelayTime;
            setTimeout(function () {
                if (propertyPaneData.configuration.showLoadingIndicator) {
                    _this._loadPropertyPaneComponent(true);
                }
            }, delay);
        }
        else {
            this._loadPropertyPaneComponent(true);
        }
    };
    PropertyPaneController.prototype._loadPropertyPaneComponent = function (recreatePropertyPane) {
        var _this = this;
        import( '../propertyPane/PropertyPane')
            .then(function (propertyPane) {
            var insertIntoDom = false;
            if (recreatePropertyPane) {
                if (!_this._propertyPaneElement) {
                    _this._propertyPaneElement = document.createElement('div');
                    insertIntoDom = true;
                }
            }
            _this._propertyPaneElement.className = _this._currentPropertyPaneData.webPartId;
            var el = React.createElement(propertyPane.default, { data: _this._currentPropertyPaneData });
            ReactDOM.render(el, _this._propertyPaneElement);
            if (_this._propertyPaneContainer) {
                if (insertIntoDom) {
                    _this._clearPropertyPaneContainer();
                    _this._propertyPaneContainer.appendChild(_this._propertyPaneElement);
                }
            }
            else {
                if (insertIntoDom && document.body.lastChild) {
                    document.body.insertBefore(_this._propertyPaneElement, document.body.lastChild.nextSibling);
                }
            }
        });
    };
    PropertyPaneController.prototype._reRender = function () {
        var consumer = this._tryGetConsumer(this._currentPropertyPaneData.webPartId);
        if (consumer) {
            this._renderPropertyPane(consumer);
        }
    };
    PropertyPaneController.prototype._onPropertyPaneFieldChanged = function (propertyName, newValue) {
        Validate.isNonemptyString(propertyName, 'propertyName');
        if (!this._currentPropertyPaneData.webPartId) {
            throw new Error('onPropertyPaneFieldChanged event is not expected when no consumer is being configured');
        }
        var consumer = this._tryGetConsumer(this._currentPropertyPaneData.webPartId);
        if (consumer) {
            consumer._onPropertyPaneFieldChanged(propertyName, newValue);
            this._renderPropertyPane(consumer);
        }
        if (this._isCurrentlyConfiguredPropertyPaneReactive()) {
            this._resetConfigurationCompleteTimeout();
        }
    };
    PropertyPaneController.prototype._onConfigurationEvent = function (configurationEvent) {
        switch (configurationEvent) {
            case 4 :
                this._hidePropertyPane();
                this._firePostToggleConfigurationEvents();
                break;
            case 5 :
            case 6 :
                this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, configurationEvent);
                this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, 2 );
                break;
        }
    };
    PropertyPaneController.prototype._firePostToggleConfigurationEvents = function () {
        var _this = this;
        if (this._isOpen) {
            window.setTimeout(function () {
                _this._fireConfigurationEvent(_this._currentlyConfiguredConsumerId, 3 );
                _this._fireConfigurationEvent(_this._currentlyConfiguredConsumerId, 1 );
                window.postMessage('Property pane toggled', window.location.origin);
            }, PropertyPaneController.ANIMATION_TIMEOUT);
        }
        else {
            this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, 2 );
            window.setTimeout(function () {
                _this._fireConfigurationEvent(_this._currentlyConfiguredConsumerId, 4 );
                window.postMessage('Property pane toggled', window.location.origin);
            }, PropertyPaneController.ANIMATION_TIMEOUT);
        }
    };
    PropertyPaneController.prototype._fireNoToggleConfigurationEvents = function (id) {
        this._fireConfigurationEvent(this._currentlyConfiguredConsumerId, 2 );
        this._fireConfigurationEvent(id, 1 );
    };
    PropertyPaneController.prototype._fireConfigurationEvent = function (componentId, configurationEvent) {
        this._clearConfigurationCompleteTimeout();
        var consumer = this._tryGetConsumer(componentId);
        if (consumer) {
            if (this._lifeCycleEventCallback) {
                this._lifeCycleEventCallback(configurationEvent, componentId);
            }
            consumer._onPropertyPaneLifeCycleEvent(configurationEvent);
        }
    };
    PropertyPaneController.prototype._setPropertyPaneDOMElements = function () {
        var workbenchElement = document.getElementById('workbenchPageContent');
        if (workbenchElement) {
            this._pageContentElement = workbenchElement;
            this._workbenchCommandBarElement = document.getElementById('workbenchCommandBar');
        }
        else {
            this._pageContentElement = document.getElementById('spPageChromeAppDiv');
        }
        if (!this._pageContentElement) {
            if (!this._propertyPaneContainer) {
                this._propertyPaneContainer = document.createElement('div');
                this._propertyPaneContainer.id = this._propertyPaneContainerId;
                this._propertyPaneContainer.className = this._propertyPaneContainerId;
                document.body.appendChild(this._propertyPaneContainer);
            }
        }
        else {
            this._propertyPaneContainer = document.getElementById(this._propertyPaneContainerId) ||
                document.getElementById(PropertyPaneController.PROPERTY_PANE_CONTAINER_NOFLEXBOX_ID);
        }
    };
    PropertyPaneController.prototype._clearPropertyPaneContainer = function () {
        while (this._propertyPaneContainer && this._propertyPaneContainer.firstChild) {
            this._propertyPaneContainer.removeChild(this._propertyPaneContainer.firstChild);
        }
    };
    PropertyPaneController.prototype._resetConfigurationCompleteTimeout = function () {
        this._clearConfigurationCompleteTimeout();
        this._configurationCompletionTimeout = window.setTimeout(this._fireConfigurationEvent, PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT, this._currentlyConfiguredConsumerId, 2 );
    };
    PropertyPaneController.prototype._clearConfigurationCompleteTimeout = function () {
        if (this._configurationCompletionTimeout) {
            window.clearTimeout(this._configurationCompletionTimeout);
            this._configurationCompletionTimeout = undefined;
        }
    };
    PropertyPaneController.prototype._isCurrentlyConfiguredPropertyPaneReactive = function () {
        if (this._currentlyConfiguredConsumerId) {
            var consumer = this._tryGetConsumer(this._currentlyConfiguredConsumerId);
            var isReactive = this._currentPropertyPaneData ?
                this._currentPropertyPaneData.isReactive :
                consumer && !consumer._isPropertyPaneReactive();
            return !!isReactive;
        }
        return false;
    };
    PropertyPaneController.prototype._tryGetConsumer = function (id) {
        var consumer;
        if (!KillSwitches.isPropertyPaneControllerFromServiceScopeKillSwitchActivated()) {
            consumer = this._consumers.get(id);
        }
        else {
            consumer = this._getConsumer(id);
        }
        return consumer;
    };
    PropertyPaneController.prototype._getEmptyPropertyPaneData = function () {
        return {
            webPartId: undefined,
            title: undefined,
            shouldResetState: true,
            onPropertyPaneFieldChanged: undefined,
            onConfigurationEvent: this._onConfigurationEvent,
            onRendered: undefined,
            properties: undefined,
            configuration: undefined,
            dynamicConfiguration: undefined
        };
    };
    PropertyPaneController.serviceKey = ServiceKey.createCustom('sp-property-pane:PropertyPaneController', PropertyPaneController._create);
    PropertyPaneController.ANIMATION_TIMEOUT = 400;
    PropertyPaneController.CONFIGURATION_COMPLETE_TIMEOUT = 5000;
    PropertyPaneController.PROPERTY_PANE_CONTAINER_ID = 'spPropertyPaneContainer';
    PropertyPaneController.PROPERTY_PANE_CONTAINER_NOFLEXBOX_ID = 'spPropertyPaneContainerNoFlexbox';
    return PropertyPaneController;
}());
export default PropertyPaneController;
