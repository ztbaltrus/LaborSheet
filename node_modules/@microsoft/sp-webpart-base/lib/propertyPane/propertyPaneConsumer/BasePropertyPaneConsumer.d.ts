/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Abstract implementation of IPropertyPaneControl.
 */
import { default as IWebPartData } from '../../core/IWebPartData';
import { IPropertyPaneConsumer } from './IPropertyPaneConsumer';
import { IPropertyPaneData } from '../propertyPane/IPropertyPane';
import { PropertyPaneLifeCycleEvent } from '../propertyPaneDefinitions/PropertyPaneLifeCycleEvent';
/**
 * Base implementation of IPropertyPaneControl. Derived classes will be able to use the
 * ClientSideWebPartManager.setPropertyPaneControl API to enable configuration with the
 * application's Property Pane.
 *
 * @internalremarks - We will not be exposing this pattern to third-party developers.
 * @internal
 */
declare abstract class BasePropertyPaneConsumer implements IPropertyPaneConsumer {
    /**
     * Indicates whether the property pane is reactive or not.
     *
     * @remarks
     * The default behavior is Reactive.
     *
     * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
     * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
     * configuration changes or not.
     *
     * NonReactive implies that the configuration changes are transmitted to the web part only after "Apply" PropertyPane
     * button is clicked.
     */
    _isPropertyPaneReactive(): boolean;
    /**
     * API to get property pane configuration asynchronously.
     */
    abstract _getPropertyPaneData(): Promise<IPropertyPaneData>;
    abstract _onPropertyPaneFieldChanged(newPropertyPath: string, newValue: any): void;
    /**
     * API to enable asynchronous loading of property pane related resources of a web part.
     */
    _loadPropertyPaneResources(): void;
    /**
     * API invoked when a life cycle event happens on the property pane.
     * @param propertyPaneLifeCycleEvent - propertyPaneLifeCycleEvent
     */
    _onPropertyPaneLifeCycleEvent(propertyPaneLifeCycleEvent: PropertyPaneLifeCycleEvent): void;
    /**
     * Below APIs should be moved to IClientSideWebPartInternal when the kill switch
     * '6b3ca2d8-871e-41cb-9de1-11ed1fc90bf9' is graduated.
     */
    _internalDispose(): void;
    _internalOnAfterResize(): void;
    _internalSerialize(): IWebPartData | undefined;
}
export default BasePropertyPaneConsumer;
