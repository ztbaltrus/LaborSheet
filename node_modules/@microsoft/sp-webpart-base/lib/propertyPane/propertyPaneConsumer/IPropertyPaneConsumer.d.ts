/**
 * @Copyright (c) Microsoft Corporation.  All rights reserved.
 *
 * @file Internal interface to interact with the Property Pane
 */
import { default as IWebPartData } from '../../core/IWebPartData';
import { IPropertyPaneData } from '../propertyPane/IPropertyPane';
import { PropertyPaneLifeCycleEvent } from '../propertyPaneDefinitions/PropertyPaneLifeCycleEvent';
/**
 * The interface needed for a control to implement if they want to utilize the Property Pane
 * for configuration through the ClientSideWebPartManager.
 *
 * @internal
 */
export interface IPropertyPaneConsumer {
    /**
     * Indicates whether the property pane is reactive or not.
     *
     * @remarks
     * The default behavior is Reactive.
     *
     * Reactive implies that changes made in the PropertyPane are transmitted to the web part instantly and the user can
     * see instant updates. This helps the page creator get instant feedback and decide if they should keep the new
     * configuration changes or not.
     *
     * NonReactive implies that the configuration changes are transmitted to the web part only after "Apply" PropertyPane
     * button is clicked.
     */
    _isPropertyPaneReactive(): boolean;
    /**
     * API to get the property pane configuration asynchronously.
     */
    _getPropertyPaneData(): Promise<IPropertyPaneData>;
    /**
     * API to enable asynchronous loading of property pane related resources of a web part.
    */
    _loadPropertyPaneResources(): void;
    _onPropertyPaneLifeCycleEvent(lifeCycleEvent: PropertyPaneLifeCycleEvent): void;
    _onPropertyPaneFieldChanged(propertyPath: string, newValue: any): void;
    /**
     * Below APIs should be moved to IClientSideWebPartInternal when the kill switch
     * '6b3ca2d8-871e-41cb-9de1-11ed1fc90bf9' is graduated.
     */
    _internalDispose(): void;
    _internalOnAfterResize(): void;
    _internalSerialize(): IWebPartData | undefined;
}
