import * as tslib_1 from "tslib";
import * as React from 'react';
import { sealed } from '@microsoft/decorators';
import * as lodash from '@microsoft/sp-lodash-subset';
import { ActionButton, Button, CompoundButton, Icon, IconButton, Label, Link, PrimaryButton, TextField, autobind, css } from '@microsoft/office-ui-fabric-react-bundle';
import { Toggle } from 'office-ui-fabric-react/lib/components/Toggle/Toggle';
import { TooltipHost } from 'office-ui-fabric-react/lib/components/Tooltip/TooltipHost';
import { TooltipOverflowMode } from 'office-ui-fabric-react/lib/components/Tooltip/TooltipHost.types';
import { Checkbox } from 'office-ui-fabric-react/lib/components/Checkbox/Checkbox.base';
import { ChoiceGroup } from 'office-ui-fabric-react/lib/components/ChoiceGroup/ChoiceGroup';
import { Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown';
import { DropdownMenuItemType } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown.types';
import { Slider } from 'office-ui-fabric-react/lib/Slider';
import { Guid, _SPKillSwitch } from '@microsoft/sp-core-library';
import { DynamicProperty } from '@microsoft/sp-component-base';
import { _EngagementLogger, _LogEntry, _LogType } from '@microsoft/sp-diagnostics';
import { PropertyPaneButtonType } from '../propertyPaneFields/propertyPaneButton/IPropertyPaneButton';
import PropertyPaneCustomFieldHost from '../propertyPaneFields/propertyPaneCustomField/PropertyPaneCustomFieldHost';
import { PropertyPaneFieldType } from '../propertyPaneFields/propertyPaneField/IPropertyPaneField';
import propertyPaneGroupStyles from './PropertyPaneGroup.module.scss';
import strings from '../loc/Strings.resx';
import choiceGroupStyles from './PropertyPaneChoiceGroup.module.scss';
import { generateGroupFieldKey, getFixedUpPropValue } from './PropertyPaneGroupHelper';
import DynamicDataWidget from '../propertyPaneDynamicData/dynamicDataWidget/DynamicDataWidget';
var propertyPaneGroupInstance = 0;
var PropertyPaneGroup = (function (_super) {
    tslib_1.__extends(PropertyPaneGroup, _super);
    function PropertyPaneGroup(props) {
        var _this = _super.call(this, props) || this;
        _this._initialValue = '';
        _this.state = {
            isDetailsShown: true,
            id: "PropertyPaneGroup-" + propertyPaneGroupInstance++
        };
        _this._onHeaderClicked = _this._onHeaderClicked.bind(_this);
        return _this;
    }
    PropertyPaneGroup_1 = PropertyPaneGroup;
    PropertyPaneGroup._getCheckedStatus = function (propValue, groupField) {
        return (propValue !== undefined && propValue !== null) ? propValue : groupField.properties.checked;
    };
    PropertyPaneGroup.prototype.componentWillMount = function () {
        this.setState({
            isDetailsShown: this._isDetailsShown(this.props)
        });
    };
    PropertyPaneGroup.prototype.componentWillReceiveProps = function (props) {
        if (props.groupFields &&
            props.groupFields.some(function (groupField) { return groupField.shouldFocus || false; })) {
            this.setState({
                isDetailsShown: true
            });
        }
        else {
            this.setState({
                isDetailsShown: this._isDetailsShown(props)
            });
        }
    };
    PropertyPaneGroup.prototype.componentDidMount = function () {
        this._setFocus();
    };
    PropertyPaneGroup.prototype.componentDidUpdate = function () {
        this._setFocus();
    };
    PropertyPaneGroup.prototype.render = function () {
        this._keys = {}; 
        this._elementRefs = {}; 
        return (React.createElement("div", null,
            this._renderGroupName(),
            this._renderGroupContent()));
    };
    PropertyPaneGroup.prototype._isDetailsShown = function (props) {
        var isDetailsShown = undefined;
        if (props.propertyPanePagesStateMap[props.pageNumber] &&
            props.groupName) {
            isDetailsShown = props.propertyPanePagesStateMap[props.pageNumber][props.groupName];
        }
        return (isDetailsShown !== undefined) ? isDetailsShown : !props.isCollapsed;
    };
    PropertyPaneGroup.prototype._setFocus = function () {
        var _this = this;
        setTimeout(function () {
            if (_this._focusElementKey) {
                var nextFocusedElement = _this._elementRefs[_this._focusElementKey];
                if (nextFocusedElement && nextFocusedElement.focus) {
                    nextFocusedElement.focus();
                    _this._focusElementKey = undefined;
                }
            }
        }, 0);
    };
    PropertyPaneGroup.prototype._renderGroupName = function () {
        var groupNameElem = undefined; 
        var rtl = document.dir === 'rtl';
        if (!this.props.displayGroupsAsAccordion) {
            if (this.props.groupName) {
                groupNameElem = (React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupHeaderNoAccordion }, this.props.groupName));
            }
        }
        else {
            var chevronIcon = this.state.isDetailsShown ? 'ChevronDown' : rtl ?
                'ChevronLeft' : 'ChevronRight';
            groupNameElem = (React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupHeaderWithAccordion },
                React.createElement("button", { className: propertyPaneGroupStyles.propertyPaneGroupHeader, "aria-expanded": this.state.isDetailsShown, onClick: this._onHeaderClicked },
                    React.createElement(Icon, { className: this.state.isDetailsShown ?
                            propertyPaneGroupStyles.propertyPaneGroupHeaderIcon :
                            propertyPaneGroupStyles.propertyPaneGroupHeaderIcon, "data-automation-state": this.state.isDetailsShown ? 'expanded' : 'collapsed', iconName: chevronIcon }),
                    React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupHeaderText }, this.props.groupName))));
        }
        return groupNameElem;
    };
    PropertyPaneGroup.prototype._renderGroupContent = function () {
        var _this = this;
        if (this.state.isDetailsShown) {
            return (React.createElement("div", { className: propertyPaneGroupStyles.propertyPaneGroupContent }, this.props.groupFields.map(function (groupField) { return _this._renderGroupField(groupField); })));
        }
        return undefined; 
    };
    PropertyPaneGroup.prototype._renderGroupField = function (groupField) {
        var _this = this;
        var key = generateGroupFieldKey(this._keys, groupField);
        var propValue = getFixedUpPropValue(groupField, this.props.properties, this.props.dynamicConfiguration);
        if (groupField.shouldFocus) {
            this._focusElementKey = key;
        }
        var setRef = function (instance) {
            _this._elementRefs[key] = instance; 
            if (typeof groupField.properties.ref === 'function') {
                groupField.properties.ref(instance);
            }
        };
        var groupFieldElement;
        switch (groupField.type) {
            case PropertyPaneFieldType.Custom:
                groupFieldElement = React.createElement(PropertyPaneCustomFieldHost, tslib_1.__assign({}, groupField.properties, { onChanged: function (targetProperty, value) {
                        if (_this.props.setEntryState) {
                            _this.props.setEntryState(targetProperty, true);
                        }
                        if (_this.props.onChange) {
                            _this.props.onChange(targetProperty, value);
                        }
                    } }));
                break;
            case PropertyPaneFieldType.Toggle:
                groupFieldElement =
                    React.createElement(Toggle, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, checked: PropertyPaneGroup_1._getCheckedStatus(propValue, groupField), onText: groupField.properties.onText || strings.ToggleOnText, offText: groupField.properties.offText || strings.ToggleOffText, onChanged: function (value) {
                            _this._onChange(groupField, value);
                        } }));
                break;
            case PropertyPaneFieldType.TextField:
                var textFieldValue = propValue || groupField.properties.value || '';
                groupFieldElement = React.createElement(TextField, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, value: textFieldValue, onChanged: function (value) {
                        if (!groupField.properties.onGetErrorMessage) {
                            _this._onChange(groupField, value);
                        }
                    }, onNotifyValidationResult: function (errorMessage, value) {
                        return _this._onNotifyValidationResult(errorMessage, value, groupField, _this.props.setEntryState);
                    }, onFocus: function (ev) { return _this._onFocusTextFieldPropertyPane(ev, groupField.properties); }, onBlur: function (ev) { return _this._onBlurTextFieldPropertyPane(ev, groupField.properties); } }));
                break;
            case PropertyPaneFieldType.Dropdown:
                var dropdownOptions = groupField.properties.options
                    ? groupField.properties.options.map(function (option) { return ({
                        key: option.key,
                        index: option.index,
                        text: option.text,
                        itemType: option.type || DropdownMenuItemType.Normal
                    }); })
                    : [];
                groupFieldElement = React.createElement(Dropdown, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, selectedKey: propValue || groupField.properties.selectedKey, disabled: groupField.properties.isDisabled || groupField.properties.disabled, ariaLabel: groupField.properties.ariaLabel, "aria-posinset": groupField.properties.ariaPositionInSet, "aria-setsize": groupField.properties.ariaSetSize, label: groupField.properties.label, options: dropdownOptions, calloutProps: groupField.properties.calloutProps, onChanged: function (option, index) {
                        _this._onDropDownChange(groupField, option, index);
                    } }));
                break;
            case PropertyPaneFieldType.CheckBox:
                groupFieldElement = React.createElement(Checkbox, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, label: groupField.properties.text, checked: PropertyPaneGroup_1._getCheckedStatus(propValue, groupField), disabled: this._isDisabled(groupField), onChange: function (ev, isChecked) {
                        _this._onChange(groupField, isChecked);
                    } }));
                break;
            case PropertyPaneFieldType.Label:
                groupFieldElement = React.createElement(Label, tslib_1.__assign({}, groupField.properties), groupField.properties.text);
                break;
            case PropertyPaneFieldType.Slider:
                groupFieldElement =
                    React.createElement(Slider, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, value: propValue || groupField.properties.value, onChange: function (value) {
                            _this._onChange(groupField, value);
                        } }));
                break;
            case PropertyPaneFieldType.ChoiceGroup:
                groupField.properties.options.forEach(function (option) {
                    if (propValue !== undefined && propValue !== '' && propValue !== null) {
                        option.checked = option.key === propValue;
                    }
                    if (option.hasOwnProperty('disabled') && option.disabled !== undefined) {
                        option.disabled = option.disabled;
                    }
                    if (!option.onRenderLabel && (option.imageSrc || option.iconProps)) {
                        option.onRenderLabel = function (choice) {
                            return (React.createElement(TooltipHost, { overflowMode: TooltipOverflowMode.Parent, calloutProps: { gapSpace: 65 }, content: choice.text },
                                React.createElement("span", { id: choice.labelId, className: 'ms-label' }, choice.text)));
                        };
                    }
                });
                var options = groupField.properties.options.map(function (option) {
                    var propertyPaneChoiceGroupOptionIconProps = option.iconProps, otherOptions = tslib_1.__rest(option, ["iconProps"]);
                    var iconOption = propertyPaneChoiceGroupOptionIconProps
                        ? {
                            iconProps: {
                                iconName: propertyPaneChoiceGroupOptionIconProps.officeFabricIconFontName
                            }
                        }
                        : undefined;
                    var themableSvg = option.themableSvg;
                    var renderOption = themableSvg ?
                        {
                            onRenderField: _this._renderChoiceGroupWithSvg
                        }
                        : undefined;
                    var dataAutomationIdOption = {
                        'data-automation-id': "PropertyPaneChoiceGroup-" + option.key
                    };
                    if (!_SPKillSwitch.isActivated(Guid.parse('aa7db439-76c0-4a93-8b84-b00010e0534e'), '03/20/18', 'PropertypaneChoiceGroupDataAutomationIdKillSwitch')) {
                        return lodash.merge({}, otherOptions, iconOption, renderOption, dataAutomationIdOption);
                    }
                    else {
                        return lodash.merge({}, otherOptions, iconOption, renderOption);
                    }
                });
                var choiceGroupClassName = css(propertyPaneGroupStyles.propertyPaneChoiceGroup, (_a = {},
                    _a[propertyPaneGroupStyles.choiceGroupContainsIconOrImage] = options.some(function (option) { return Boolean(option.iconProps || option.imageSrc); }),
                    _a));
                groupFieldElement =
                    React.createElement(ChoiceGroup, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, options: options, className: choiceGroupClassName, onChanged: function (checkedOption) {
                            _this._onChoiceGroupChange(groupField, checkedOption);
                        } }));
                break;
            case PropertyPaneFieldType.Button:
                var handleClick = function () {
                    var newValue = groupField.properties.onClick(propValue); 
                    _this._onChange(groupField, newValue);
                };
                var iconProps = groupField.properties.icon
                    ? { iconName: groupField.properties.icon }
                    : undefined;
                var buttonType = groupField.properties.buttonType;
                var buttonProps = tslib_1.__assign({}, groupField.properties, { ariaLabel: groupField.properties.ariaLabel || groupField.properties.text, componentRef: setRef, iconProps: iconProps, onClick: handleClick, text: groupField.properties.text });
                if (buttonType) {
                    delete buttonProps.buttonType; 
                }
                switch (buttonType) {
                    case PropertyPaneButtonType.Primary:
                        groupFieldElement = React.createElement(PrimaryButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case PropertyPaneButtonType.Compound:
                        groupFieldElement = React.createElement(CompoundButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case PropertyPaneButtonType.Command:
                        groupFieldElement = React.createElement(ActionButton, tslib_1.__assign({}, buttonProps));
                        break;
                    case PropertyPaneButtonType.Icon:
                        groupFieldElement = React.createElement(IconButton, tslib_1.__assign({}, buttonProps));
                        break;
                    default:
                        groupFieldElement = React.createElement(Button, tslib_1.__assign({}, buttonProps));
                        break;
                }
                break;
            case PropertyPaneFieldType.HorizontalRule:
                groupFieldElement =
                    React.createElement("hr", tslib_1.__assign({}, groupField.properties));
                break;
            case PropertyPaneFieldType.Link:
                groupFieldElement = React.createElement(Link, tslib_1.__assign({ componentRef: setRef }, groupField.properties), groupField.properties.text);
                break;
            case PropertyPaneFieldType.DynamicField:
                groupFieldElement = React.createElement(DynamicDataWidget, { parentKey: key, label: groupField.properties.label, entries: [propValue], dynamicDataProvider: this.props.dynamicConfiguration.dynamicDataProvider, onApplyClick: this._onDynamicDataWidgetApplyClick.bind(this, groupField) });
                break;
            case PropertyPaneFieldType.DynamicFieldSet:
                groupFieldElement = React.createElement(DynamicDataWidget, { parentKey: key, label: groupField.properties.label, entries: propValue, dynamicDataProvider: this.props.dynamicConfiguration.dynamicDataProvider, onApplyClick: this._onDynamicDataWidgetApplyClick.bind(this, groupField) });
                break;
            case PropertyPaneFieldType.DynamicTextField:
                groupFieldElement = this._getDynamicTextField(groupField, propValue, setRef);
                break;
            default:
                groupFieldElement = null; 
        }
        return (React.createElement("div", { key: key, className: propertyPaneGroupStyles.propertyPaneGroupField }, groupFieldElement));
        var _a;
    };
    PropertyPaneGroup.prototype._getDynamicTextField = function (groupField, dataPath, setRef 
    ) {
        var _this = this;
        var textFieldValue = dataPath.reference ?
            '[' + dataPath.reference + ']' :
            (dataPath.value || groupField.properties.value || '');
        return (React.createElement(TextField, tslib_1.__assign({}, groupField.properties, { componentRef: setRef, value: textFieldValue, onGetErrorMessage: this._validateDynamicDataPath.bind(this, groupField), onNotifyValidationResult: function (errorMessage, value) {
                return _this._onNotifyValidationResult(errorMessage, _this._getDynamicProperty(value, groupField), groupField, _this.props.setEntryState);
            } })));
    };
    PropertyPaneGroup.prototype._renderChoiceGroupWithSvg = function (props) {
        var themableSvg = props.themableSvg;
        return (React.createElement("label", { htmlFor: props.id, className: css('ms-ChoiceField-field', choiceGroupStyles.field, (_a = {},
                _a['ms-ChoiceField-field--image ' + choiceGroupStyles.fieldIsImage] = !!props.imageSrc,
                _a['ms-ChoiceField--icon ' + choiceGroupStyles.fieldIsIcon] = !!props.iconProps,
                _a['is-checked ' + choiceGroupStyles.fieldIsChecked] = props.checked,
                _a['is-disabled ' + choiceGroupStyles.fieldIsDisabled] = props.disabled,
                _a)) },
            props.imageSrc && (React.createElement("div", { className: css('ms-ChoiceField-innerField', choiceGroupStyles.innerField) },
                React.createElement("div", { className: css('ms-ChoiceField-imageWrapper', choiceGroupStyles.imageWrapper, (_b = {},
                        _b['is-hidden ' + choiceGroupStyles.imageWrapperIsHidden] = props.checked,
                        _b)) },
                    React.createElement("div", { className: css('ms-Image', choiceGroupStyles.imageRoot), style: {
                            width: props.imageSize ? props.imageSize.width : undefined,
                            height: props.imageSize ? props.imageSize.height : undefined
                        } }, themableSvg)),
                React.createElement("div", { className: css('ms-ChoiceField-imageWrapper', choiceGroupStyles.imageWrapper, (_c = {},
                        _c['is-hidden ' + choiceGroupStyles.imageWrapperIsHidden] = !props.checked,
                        _c)) },
                    React.createElement("div", { className: css('ms-Image', choiceGroupStyles.imageRoot), style: {
                            width: props.imageSize ? props.imageSize.width : undefined,
                            height: props.imageSize ? props.imageSize.height : undefined
                        } }, themableSvg)))),
            props.iconProps &&
                React.createElement("div", { className: css('ms-ChoiceField-innerField', choiceGroupStyles.innerField) },
                    React.createElement("div", { className: css('ms-ChoiceField-iconWrapper', choiceGroupStyles.iconWrapper) },
                        React.createElement(Icon, tslib_1.__assign({}, props.iconProps)))),
            props.imageSrc || props.iconProps
                ? (React.createElement("div", { className: css('ms-ChoiceField-labelWrapper', choiceGroupStyles.labelWrapper) },
                    React.createElement("span", { id: props.labelId, className: 'ms-Label' }, props.text))) : React.createElement("span", { id: props.labelId, className: 'ms-Label' }, props.text)));
        var _a, _b, _c;
    };
    PropertyPaneGroup.prototype._onNotifyValidationResult = function (errorMessage, value, groupField,  setEntryState) {
        if (setEntryState) {
            setEntryState(groupField.targetProperty, !errorMessage);
        }
        this._onChange(groupField, value);
    };
    PropertyPaneGroup.prototype._validateDynamicDataPath = function (groupField, value) {
        var errorMessage = '';
        if (groupField.properties.onGetErrorMessage) {
            errorMessage = groupField.properties.onGetErrorMessage(value);
        }
        if (!errorMessage) {
            if (!!value.match(PropertyPaneGroup_1.DYNAMICPROPERTY_DEFAULT_REGEX) ||
                !!value.match(PropertyPaneGroup_1.DYNAMICPROPERTY_COMPONENT_REGEX)) {
                var dynamicProperty = this._getDynamicProperty(value, groupField);
                if (!dynamicProperty.tryGetValue()) {
                    errorMessage = strings.NoDynamicDataReturnedErrorText;
                }
            }
        }
        return errorMessage;
    };
    PropertyPaneGroup.prototype._getDynamicProperty = function (value, groupField) {
        var dynamicProperty = new DynamicProperty(groupField.properties.dynamicDataProvider, groupField.properties.changeCallback);
        var matches = PropertyPaneGroup_1.DYNAMICPROPERTY_DEFAULT_REGEX.exec(value) ||
            PropertyPaneGroup_1.DYNAMICPROPERTY_COMPONENT_REGEX.exec(value);
        if (matches) {
            dynamicProperty.setReference(matches[1]); 
        }
        else {
            dynamicProperty.setValue(value);
        }
        return dynamicProperty;
    };
    PropertyPaneGroup.prototype._onFocusTextFieldPropertyPane = function (ev, props) {
        if (props.logName) {
            this._initialValue = ev.target.value;
        }
    };
    PropertyPaneGroup.prototype._onBlurTextFieldPropertyPane = function (ev, props) {
        if (props.logName) {
            var action = void 0;
            var currentText = ev.target.value;
            var defaultValue = props.value || '';
            if (this._initialValue !== currentText) {
                if (currentText === defaultValue || currentText === '') {
                    action = 'Clear';
                }
                else if (this._initialValue === defaultValue) {
                    action = 'Add';
                }
                else {
                    action = 'Edit';
                }
                _EngagementLogger.logEventWithLogEntry(new _LogEntry(props.logName.moduleName, props.logName.controlName, _LogType.Event, {
                    'action': action,
                    'length': currentText.length.toString()
                }));
            }
        }
    };
    PropertyPaneGroup.prototype._onChoiceGroupChange = function (groupField, checkedOption) {
        groupField.properties.options.forEach(function (option) {
            return option.checked = option.key === checkedOption.key;
        });
        this._onChange(groupField, checkedOption.key);
    };
    PropertyPaneGroup.prototype._onDropDownChange = function (groupField, selectedItem, selectedIndex) {
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, selectedItem.key);
        }
    };
    PropertyPaneGroup.prototype._onChange = function (groupField, value) {
        if (this.props.onChange) {
            this.props.onChange(groupField.targetProperty, value);
        }
        if (!groupField.properties.onGetErrorMessage && this.props.setEntryState) {
            this.props.setEntryState(groupField.targetProperty, true);
        }
    };
    PropertyPaneGroup.prototype._onHeaderClicked = function () {
        if (this.props.groupName && this.props.groupName.length > 0) {
            this.props.propertyPaneGroupStateChanged(this.props.pageNumber, this.props.groupName, !this.state.isDetailsShown);
        }
        this.setState({
            isDetailsShown: !this.state.isDetailsShown
        });
    };
    PropertyPaneGroup.prototype._isDisabled = function (groupField) {
        var disabled = groupField.properties.disabled;
        if (disabled === undefined) {
            if (groupField.properties.hasOwnProperty('isDisabled') && groupField.properties.isDisabled !== undefined) {
                disabled = groupField.properties.isDisabled;
            }
            else if (groupField.properties.hasOwnProperty('enabled') && groupField.properties.enabled !== undefined) {
                disabled = !groupField.properties.enabled;
            }
            else if (groupField.properties.hasOwnProperty('isEnabled') && groupField.properties.isEnabled !== undefined) {
                disabled = !groupField.properties.isEnabled;
            }
        }
        return disabled;
    };
    PropertyPaneGroup.prototype._onDynamicDataWidgetApplyClick = function (groupField, targetProperty, newPropValue 
    ) {
        groupField.targetProperty = targetProperty;
        this._onChange(groupField, newPropValue);
    };
    PropertyPaneGroup.DYNAMICPROPERTY_DEFAULT_REGEX = /^\[(\w+:\w+(?::\w+)?)\]$/;
    PropertyPaneGroup.DYNAMICPROPERTY_COMPONENT_REGEX = /^\[([a-zA-Z]+\.([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12})\.([0-9A-Fa-f]{8}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{4}[-][0-9A-Fa-f]{12}):\w+(?::\w+)?)\]$/;
    tslib_1.__decorate([
        autobind
    ], PropertyPaneGroup.prototype, "_renderGroupField", null);
    tslib_1.__decorate([
        autobind
    ], PropertyPaneGroup.prototype, "_renderChoiceGroupWithSvg", null);
    tslib_1.__decorate([
        autobind
    ], PropertyPaneGroup.prototype, "_onDynamicDataWidgetApplyClick", null);
    PropertyPaneGroup = PropertyPaneGroup_1 = tslib_1.__decorate([
        sealed
    ], PropertyPaneGroup);
    return PropertyPaneGroup;
    var PropertyPaneGroup_1;
}(React.Component));
export default PropertyPaneGroup;
