import * as tslib_1 from "tslib";
import * as React from 'react';
import * as ReactDOM from 'react-dom';
import { sealed } from '@microsoft/decorators';
import Compare from '../../utils/Compare';
import PropertyPanePage from '../propertyPanePage/PropertyPanePage';
import PropertyPaneTitleBar from '../propertyPaneTitleBar/PropertyPaneTitleBar';
import PropertyPaneFooter from '../propertyPaneFooter/PropertyPaneFooter';
import Strings from '../loc/Strings.resx';
import propertyPaneStyles from './PropertyPane.module.scss';
import propertyPanePageStyles from '../propertyPanePage/PropertyPanePage.module.scss';
import { css, Fabric, FocusTrapZone, Overlay, Spinner, SpinnerType } from '@microsoft/office-ui-fabric-react-bundle';
import { getFocusableChildren, getFirstFocusableChild, isKey } from '../../utils/CanvasA11y';
export var PageDirection;
(function (PageDirection) {
    PageDirection[PageDirection["back"] = -1] = "back";
    PageDirection[PageDirection["next"] = 1] = "next";
})(PageDirection = PageDirection || (PageDirection = {}));
var CLEAR_DELAY = 100;
var NO_WEBPART_ID = 'No_Web_Part_ID';
var PropertyPane = (function (_super) {
    tslib_1.__extends(PropertyPane, _super);
    function PropertyPane(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isSaveButtonEnabled: false,
            saveConfirmationMessage: '',
            currentPage: 1
        };
        _this._currentlyConfiguredWebPartId = props.data.webPartId;
        _this._onChange = _this._onChange.bind(_this);
        _this._onPropertyPaneKeyDown = _this._onPropertyPaneKeyDown.bind(_this);
        _this._flipPage = _this._flipPage.bind(_this);
        _this._handleSaveClick = _this._handleSaveClick.bind(_this);
        _this._handleCloseClick = _this._handleCloseClick.bind(_this);
        _this._propertyPaneShouldLooseFocus = _this._propertyPaneShouldLooseFocus.bind(_this);
        _this._setContainerDiv = _this._setContainerDiv.bind(_this);
        _this._propertyPaneGroupStateChanged = _this._propertyPaneGroupStateChanged.bind(_this);
        _this._invalidEntries = {};
        _this._propertyPanePagesStateMap = {};
        return _this;
    }
    PropertyPane.prototype.componentWillReceiveProps = function (props) {
        if (props.data.shouldResetState) {
            this._propertyPanePagesStateMap = {};
        }
        if (this._currentlyConfiguredWebPartId !== props.data.webPartId || props.data.shouldResetState) {
            var webPartId = props.data.webPartId ? props.data.webPartId : NO_WEBPART_ID;
            this._resetState(webPartId);
        }
        else {
            this.setState({
                saveConfirmationMessage: ''
            });
        }
    };
    PropertyPane.prototype.componentDidMount = function () {
        var domNode = ReactDOM.findDOMNode(this);
        domNode.style.zIndex = '999';
        if (this.props.data.onRendered) {
            this.props.data.onRendered();
        }
        this._setTimeOutForFocus();
    };
    PropertyPane.prototype.componentDidUpdate = function (props) {
        if (this._isPropertyPaneReplaced) {
            this._updateTabIndexes(0, true);
            this._setTimeOutForFocus();
            this._isPropertyPaneReplaced = false;
        }
        if (this.props.data.onRendered) {
            this.props.data.onRendered();
        }
    };
    PropertyPane.prototype.shouldComponentUpdate = function (nextProps, nextState) {
        return !Compare.shallowCompare(this.props, nextProps) ||
            !Compare.shallowCompare(this.state, nextState) ||
            !!(nextProps.data.configuration && nextProps.data.configuration.showLoadingIndicator);
    };
    PropertyPane.prototype.render = function () {
        var _this = this;
        this._properties = this.props.data.properties;
        var showOverlaySpinner = this.props.data.configuration && this.props.data.configuration.showLoadingIndicator;
        return (React.createElement(Fabric, null,
            React.createElement("div", { role: 'alert', "aria-live": 'polite', className: propertyPaneStyles.propertyPaneScreenReaderOnly },
                React.createElement("span", null, this.state.saveConfirmationMessage)),
            React.createElement(FocusTrapZone, { isClickableOutsideFocusTrap: true, firstFocusableSelector: this._cssClassForActionableElement, forceFocusInsideTrap: false },
                React.createElement("div", { className: propertyPaneStyles.propertyPane, role: 'dialog', "aria-labelledby": 'propertyPaneTitleId', "aria-describedby": this._descriptionId, ref: function (c) { return _this._propertyPane = c; }, onKeyDown: this._onPropertyPaneKeyDown, key: this.props.data.webPartId },
                    showOverlaySpinner && (React.createElement(Overlay, { className: propertyPaneStyles.overlay },
                        React.createElement(Spinner, { className: propertyPaneStyles.spinner, type: SpinnerType.large, label: Strings.PropertyPaneFetchingSettingsDataLabel }))),
                    React.createElement(PropertyPaneTitleBar, { title: this.props.data.title, onClose: this._handleCloseClick }),
                    React.createElement("div", null, this._shouldRenderEmptyPage ? this._renderNoConfigurationState() : this._renderPage())))));
    };
    PropertyPane.prototype._renderNoConfigurationState = function () {
        return (React.createElement("div", { role: 'alert', "aria-live": 'polite', className: propertyPaneStyles.propertyPaneDescription, "data-automation-id": 'noConfigurationPropertyPane' }, Strings.PropertyPaneEmptyStateDescription));
    };
    Object.defineProperty(PropertyPane.prototype, "_descriptionId", {
        get: function () {
            var page = undefined;
            if (this.props.data.configuration && this.props.data.configuration.pages) {
                var pages = this.props.data.configuration.pages;
                page = pages[this.state.currentPage - 1];
            }
            return (page && page.header && page.header.description) ? 'propertyPaneDescriptionId' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    PropertyPane.prototype._renderPage = function () {
        var _this = this;
        var pages = this.props.data.configuration.pages;
        var page = pages[this.state.currentPage - 1];
        var classForPropertyPanePageContentBottom = this._getCssBottomValueForPageContentElement();
        return (React.createElement("div", null,
            React.createElement("div", { className: css(classForPropertyPanePageContentBottom, propertyPanePageStyles.propertyPanePageContent) },
                React.createElement(PropertyPanePage, tslib_1.__assign({}, this.props.data, { pageNumber: this.state.currentPage, pageDescription: page.header ? page.header.description : '', displayGroupsAsAccordion: page.displayGroupsAsAccordion || false, onChange: this._onChange.bind(this), propertyGroups: page.groups, properties: this._properties, setEntryState: function (targetProperty, isValidEntry) {
                        _this._setEntryState(targetProperty, isValidEntry);
                    }, setContainerDiv: this._setContainerDiv, propertyPaneGroupStateChanged: this._propertyPaneGroupStateChanged, propertyPanePagesStateMap: this._propertyPanePagesStateMap, dynamicConfiguration: this.props.data.dynamicConfiguration }))),
            React.createElement(PropertyPaneFooter, { isReactive: this.props.data.isReactive || false, isSaveButtonEnabled: this.state.isSaveButtonEnabled, numberOfPages: (this.props.data.configuration &&
                    this.props.data.configuration.pages &&
                    this.props.data.configuration.pages.length) ? this.props.data.configuration.pages.length : 0, currentPage: this.state.currentPage, onSaveClick: this._handleSaveClick, onFlipPage: this._flipPage })));
    };
    PropertyPane.prototype._setContainerDiv = function (containerDiv) {
        this._propertyPaneContent = containerDiv;
    };
    PropertyPane.prototype._propertyPaneGroupStateChanged = function (pageNumber, groupName, isCollapsed) {
        if (!this._propertyPanePagesStateMap[pageNumber]) {
            this._propertyPanePagesStateMap[pageNumber] = {};
        }
        this._propertyPanePagesStateMap[pageNumber][groupName] = isCollapsed;
    };
    Object.defineProperty(PropertyPane.prototype, "_shouldRenderEmptyPage", {
        get: function () {
            return (!this.props.data.configuration ||
                !this.props.data.configuration.pages ||
                this.props.data.configuration.pages.length === 0 ||
                !this.props.data.configuration.pages[this.state.currentPage - 1].groups ||
                this.props.data.configuration.pages[this.state.currentPage - 1].groups.length === 0);
        },
        enumerable: true,
        configurable: true
    });
    PropertyPane.prototype._flipPage = function (direction) {
        var page = this.state.currentPage + direction;
        this.setState({
            currentPage: page
        });
        if (this.props.data.render) {
            this.props.data.render();
        }
        this._setTimeOutForFocus();
    };
    PropertyPane.prototype._setEntryState = function (targetProperty, isValidEntry) {
        if (isValidEntry) {
            if (this._invalidEntries.hasOwnProperty(targetProperty)) {
                delete this._invalidEntries[targetProperty];
            }
        }
        else {
            this._invalidEntries[targetProperty] = !isValidEntry;
        }
    };
    PropertyPane.prototype._enableSaveButton = function (enabled) {
        this.setState({
            isSaveButtonEnabled: enabled
        });
    };
    PropertyPane.prototype._onChange = function (targetProperty, value) {
        this._properties[targetProperty] = value;
        if (!this.props.data.isReactive) {
            this._enableSaveButton(Object.keys(this._invalidEntries).length === 0);
        }
        if (!this._invalidEntries.hasOwnProperty(targetProperty)) {
            this._raiseEvent(targetProperty, value);
        }
    };
    PropertyPane.prototype._handleSaveClick = function () {
        var _this = this;
        this.setState({
            saveConfirmationMessage: Strings.SaveConfirmation
        });
        this._enableSaveButton(false);
        setTimeout(function () {
            _this.setState({
                saveConfirmationMessage: ''
            });
        }, CLEAR_DELAY);
        this.props.data.onConfigurationEvent(5 );
    };
    PropertyPane.prototype._handleCloseClick = function () {
        this._resetState(NO_WEBPART_ID);
        this._updateTabIndexes(-1, false);
        this.props.data.onConfigurationEvent(4 );
    };
    PropertyPane.prototype._raiseEvent = function (targetProperty, value) {
        this.props.data.onPropertyPaneFieldChanged(targetProperty, value);
    };
    PropertyPane.prototype._onPropertyPaneKeyDown = function (ev) {
        if (isKey(27 , ev)) {
            ev.preventDefault();
            this._handleCloseClick();
        }
        else if (isKey(80 , ev, true)) {
            ev.preventDefault();
            this._propertyPaneShouldLooseFocus();
        }
    };
    PropertyPane.prototype._propertyPaneShouldLooseFocus = function () {
        this._resetState(NO_WEBPART_ID);
        this._updateTabIndexes(-1, false);
        this.props.data.onConfigurationEvent(6 );
    };
    PropertyPane.prototype._setTimeOutForFocus = function () {
        var _this = this;
        if (!this._isManagingFocusBySettings) {
            setTimeout(function () {
                var propertyPane = _this._shouldRenderEmptyPage ?
                    _this._propertyPane : _this._propertyPaneContent;
                _this._focusOnFirstActionableElement(propertyPane);
            }, 0);
        }
    };
    Object.defineProperty(PropertyPane.prototype, "_isManagingFocusBySettings", {
        get: function () {
            return this.props.data.configuration &&
                this.props.data.configuration.pages &&
                this.props.data.configuration.pages
                    .some(function (page) { return page.groups
                    .some(function (group) { return group.groupFields
                    .some(function (groupField) { return groupField.shouldFocus || false; }); }); });
        },
        enumerable: true,
        configurable: true
    });
    PropertyPane.prototype._focusOnFirstActionableElement = function (propertyPane) {
        if (propertyPane) {
            var firstElement = getFirstFocusableChild(propertyPane);
            if (firstElement) {
                firstElement.focus();
            }
        }
    };
    PropertyPane.prototype._updateTabIndexes = function (tabIndex, ignoreTabIndexes) {
        var rootElement = this._propertyPane;
        var elements = getFocusableChildren(rootElement, ignoreTabIndexes);
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var el = elements_1[_i];
            el.tabIndex = tabIndex;
        }
    };
    PropertyPane.prototype._resetState = function (webPartId) {
        this._isPropertyPaneReplaced = true;
        this._currentlyConfiguredWebPartId = webPartId;
        this.setState({
            isSaveButtonEnabled: false,
            saveConfirmationMessage: '',
            currentPage: 1
        });
    };
    PropertyPane.prototype._getCssBottomValueForPageContentElement = function () {
        var pageContentBottom = undefined;
        if (!this.props.data.isReactive) {
            pageContentBottom = propertyPaneStyles.oneRowFooter;
        }
        if (this.props.data.configuration &&
            this.props.data.configuration.pages &&
            this.props.data.configuration.pages.length &&
            this.props.data.configuration.pages.length > 1) {
            if (!pageContentBottom) {
                pageContentBottom = propertyPaneStyles.oneRowFooter;
            }
            else {
                pageContentBottom = propertyPaneStyles.twoRowFooter;
            }
        }
        return pageContentBottom;
    };
    PropertyPane = tslib_1.__decorate([
        sealed
    ], PropertyPane);
    return PropertyPane;
}(React.Component));
export default PropertyPane;
