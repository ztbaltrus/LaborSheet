/// <reference types="react" />
import * as React from 'react';
import { IDynamicDataWidgetEntryProps, IDynamicDataWidgetEntryState } from './IDynamicDataWidgetEntry';
export default class DynamicDataWidgetEntry extends React.Component<IDynamicDataWidgetEntryProps, IDynamicDataWidgetEntryState> {
    private _selectedPropertyText;
    private _selectedSubPropertyText;
    constructor(props: IDynamicDataWidgetEntryProps);
    render(): React.ReactElement<{}>;
    /**
     * Retuns dropdown options with id-title pairs of all availables properties for a specified DD source.
     */
    private _getPropertyDropdownOptions();
    /**
     * Returns the dropdown for the sub property.
     *
     * @param property - Property selected in the previous dropdown, and for which the dropdown
     *  needs to be constructed.
     * @param selectedKey - SelectedKey for the new dropdown.
     * @param level - Current level of the new dropdown
     */
    private _getDropdownForSubProperty(level, property, selectedKey?);
    /**
     * Retuns dropdown options with id-title pairs of all availables properties for a specified property.
     */
    private _getSubPropertyDropdownOptions(property, selectedKey?);
    /**
     * Handler for the sub property dropdown.
     *
     * @param option - selected option.
     * @param level - level of the current dropdown among the sub property dropdowns.
     */
    private _onSubPropertySelectionChange(level, option);
    /**
     * Returns the dropdown options based on the type of the object passed.
     *
     * @param propValue - Object with which dropdown options are to to be built.
     */
    private _getDropdownOptions(propValue, recursiveCall, selectedKey?);
    private _getFooter();
    private _onApplyButtonClick();
    /**
     * Updates dynamic property's reference using the current state
     */
    private _updateReference();
    /**
     * Returns the dynamic data reference using the current state.
     */
    private _getReference();
}
