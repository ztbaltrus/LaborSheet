import * as tslib_1 from "tslib";
import * as React from 'react';
import { Text } from '@microsoft/sp-core-library';
import { autobind, PrimaryButton, css, Label } from '@microsoft/office-ui-fabric-react-bundle';
import { Dropdown } from 'office-ui-fabric-react/lib/components/Dropdown/Dropdown';
import Strings from '../../loc/Strings.resx';
import Styles from './DynamicDataWidget.module.scss';
var DynamicDataWidgetEntry = (function (_super) {
    tslib_1.__extends(DynamicDataWidgetEntry, _super);
    function DynamicDataWidgetEntry(props) {
        var _this = _super.call(this, props) || this;
        _this._selectedPropertyText = '';
        _this._selectedSubPropertyText = '';
        var value = _this.props.value;
        _this.state = {
            selectedPropertyId: value._getProperty(),
            selectedPropertyPath: value._getPropertyPath(),
            isApplyButtonEnabled: false
        };
        return _this;
    }
    DynamicDataWidgetEntry.prototype.render = function () {
        var _this = this;
        var _a = this.state, selectedPropertyId = _a.selectedPropertyId, selectedPropertyPath = _a.selectedPropertyPath;
        var dropDowns = [];
        if (this.props.selectedSourceId) {
            dropDowns.push(React.createElement("div", { key: this.props.parentKey + 'dynamicDataWidget-property' },
                React.createElement(Dropdown, { label: Text.format(Strings.DynamicDataPropertiesDropdownLabel, this.props.selectedSourceText), onChanged: function (option) {
                        _this.setState({
                            selectedPropertyId: option.key,
                            selectedPropertyText: option.text,
                            isApplyButtonEnabled: !!option.key
                        });
                    }, options: this._getPropertyDropdownOptions(), selectedKey: selectedPropertyId })));
            if (selectedPropertyId) {
                var subPropertyLevel_1 = 0;
                var paths = selectedPropertyPath ? selectedPropertyPath.split(':') : [];
                if (paths.length > 0) {
                    var currentProperty_1 = selectedPropertyId;
                    paths.forEach(function (path) {
                        if (subPropertyLevel_1 < 2) {
                            dropDowns.push(_this._getDropdownForSubProperty(subPropertyLevel_1++, currentProperty_1, path));
                            currentProperty_1 = path;
                        }
                    });
                }
                else {
                    dropDowns.push(this._getDropdownForSubProperty(subPropertyLevel_1++, selectedPropertyId));
                }
            }
        }
        return (React.createElement("div", { key: this.props.parentKey + 'dynamicDataWidget-entry', className: css(this.props.showBorders ? Styles.widgetEntryWithBorders : '') },
            React.createElement(Label, null, this.props.label),
            dropDowns,
            this._getFooter()));
    };
    DynamicDataWidgetEntry.prototype._getPropertyDropdownOptions = function () {
        var selectedPropertyId = this.state.selectedPropertyId;
        var source = this.props.dynamicDataProvider.tryGetSource(this.props.selectedSourceId);
        if (!source) {
            return [];
        }
        var data = source.getPropertyDefinitions();
        var options = [];
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var propertyDef = data_1[_i];
            options.push({ key: propertyDef.id, text: propertyDef.title });
            if (propertyDef.id === selectedPropertyId) {
                this._selectedPropertyText = propertyDef.title;
            }
        }
        return options;
    };
    DynamicDataWidgetEntry.prototype._getDropdownForSubProperty = function (level, property, selectedKey) {
        var key = 'dynamicDataWidget-sub-property' + level;
        var options = this._getSubPropertyDropdownOptions(property, selectedKey);
        var selectedText = (level === 0) ?
            (this.state.selectedPropertyText || this._selectedPropertyText) :
            (this.state.selectedSubPropertyText || this._selectedSubPropertyText);
        return (React.createElement("div", { key: key }, (options.length > 0) &&
            React.createElement(Dropdown, { label: Text.format(Strings.DynamicDataPropertiesDropdownLabel, selectedText), onChanged: this._onSubPropertySelectionChange.bind(this, level), options: options, selectedKey: selectedKey || '' })));
    };
    DynamicDataWidgetEntry.prototype._getSubPropertyDropdownOptions = function (property, selectedKey) {
        var source = this.props.dynamicDataProvider.tryGetSource(this.props.selectedSourceId);
        if (!source) {
            return [];
        }
        return this._getDropdownOptions(source.getPropertyValue(property), false, selectedKey);
    };
    DynamicDataWidgetEntry.prototype._onSubPropertySelectionChange = function (level, option) {
        var selectedPropertyPath = this.state.selectedPropertyPath;
        var selectedKey = option.key;
        var paths = selectedPropertyPath ? selectedPropertyPath.split('.') : [];
        paths[level] = selectedKey;
        this.setState({
            selectedSubPropertyText: option.text,
            selectedPropertyPath: paths.join('.'),
            isApplyButtonEnabled: (paths.length > 0)
        });
    };
    DynamicDataWidgetEntry.prototype._getDropdownOptions = function (propValue, 
        recursiveCall, selectedKey) {
        var _this = this;
        var options = [];
        if (typeof propValue === 'object') {
            if (Array.isArray(propValue)) {
                options = this._getDropdownOptions(propValue[0], true); 
            }
            else if (propValue instanceof Set) {
            }
            else if (propValue instanceof Map) {
                propValue.forEach(function (value, key) {
                    options.push({ key: key, text: key });
                    if (key === selectedKey) {
                        _this._selectedSubPropertyText = key;
                    }
                });
            }
            else {
                Object.keys(propValue).forEach(function (key) {
                    options.push({ key: key, text: key });
                    if (key === selectedKey) {
                        _this._selectedSubPropertyText = key;
                    }
                });
            }
            if (!recursiveCall && options.length > 1) {
                options.unshift({ key: '', text: '' });
            }
        }
        return options;
    };
    DynamicDataWidgetEntry.prototype._getFooter = function () {
        return (React.createElement("div", { className: Styles.widgetFooter },
            React.createElement("div", { className: Styles.applyButton },
                React.createElement(PrimaryButton, { "data-automation-id": this.props.targetProperty + '-apply-button', disabled: !this.state.isApplyButtonEnabled, text: Strings.DynamicDataApplyButtonText, onClick: this._onApplyButtonClick })),
            React.createElement("div", { className: Styles.clear })));
    };
    DynamicDataWidgetEntry.prototype._onApplyButtonClick = function () {
        var _this = this;
        this.setState({
            isApplyButtonEnabled: false
        }, function () {
            _this._updateReference();
            _this.props.onApplyClick(_this.props.targetProperty, _this.props.value);
        });
    };
    DynamicDataWidgetEntry.prototype._updateReference = function () {
        this.props.value.setReference(this._getReference());
    };
    DynamicDataWidgetEntry.prototype._getReference = function () {
        var reference = this.props.selectedSourceId;
        if (this.state.selectedPropertyId) {
            reference += ':' + this.state.selectedPropertyId;
            if (this.state.selectedPropertyPath) {
                reference += ':' + this.state.selectedPropertyPath;
            }
        }
        return reference;
    };
    tslib_1.__decorate([
        autobind
    ], DynamicDataWidgetEntry.prototype, "_getSubPropertyDropdownOptions", null);
    tslib_1.__decorate([
        autobind
    ], DynamicDataWidgetEntry.prototype, "_onSubPropertySelectionChange", null);
    tslib_1.__decorate([
        autobind
    ], DynamicDataWidgetEntry.prototype, "_onApplyButtonClick", null);
    tslib_1.__decorate([
        autobind
    ], DynamicDataWidgetEntry.prototype, "_updateReference", null);
    return DynamicDataWidgetEntry;
}(React.Component));
export default DynamicDataWidgetEntry;
