var CommandSetDistinctInstances = (function () {
    function CommandSetDistinctInstances(serverURL) {
        this._serverURL = serverURL;
        this._listName = 'TABTestFieldCustomizerList';
        this._commandItems = [];
    }
    CommandSetDistinctInstances.prototype.TestName = function () {
        return 'CommandSet: two instances of different CommandSets';
    };
    CommandSetDistinctInstances.prototype.TestOwner = function () {
        return 'dagaeta';
    };
    CommandSetDistinctInstances.prototype.TestIncludeScripts = function () {
        return [
            '<ProductScriptsLocation>msajaxbundle.debug.js',
            '<ProductScriptsLocation>sp.runtime.debug.js',
            '<ProductScriptsLocation>sp.debug.js',
            '<TestLocation>/TabTaskLib.debug.js',
            '<AzureTaskLibLocation>/sp-tab-tasklib.js'
        ];
    };
    CommandSetDistinctInstances.prototype.TestSetup = function () {
        var azurePath = TAB.Settings.Get('AzurePath');
        var loaderUrl = azurePath + "/listview-host-assembly_default.js";
        SPTaskLib.PageUtil.SetDebugManifests({ loaderUrl: loaderUrl });
        TAB.Log.Comment('CommandSet test start');
        SPTaskLib.ExtensionUtil.loadList(this._listName);
    };
    CommandSetDistinctInstances.prototype.TestRun = function () {
        var customListPagePath = "/Lists/" + this._listName + "/AllItems.aspx";
        var customActionParams = '{' +
            '"1516565a-1785-4cb4-b339-79f104f88d22": {"location":"ClientSideExtension.ListViewCommandSet.CommandBar"},' +
            '"fd83646f-e2a7-4d7a-8423-85c69ec917fd": {"location":"ClientSideExtension.ListViewCommandSet.CommandBar"}' +
            '}';
        var spQueryParams = {
            loadSPFX: true,
            customActions: customActionParams,
            params: 'disableFeatures=802,851,858'
        };
        var pageUrl = SPTaskLib.PageUtil.CreatePageUrl(customListPagePath, spQueryParams);
        TAB.AddTask(TAB.LoadPage(pageUrl));
        TAB.AddTask(TAB.MakeTask(function () {
            SPTaskLib.Utilities.ClientFeatures.SetOverrideFeature(802, false); 
            SPTaskLib.Utilities.ClientFeatures.SetOverrideFeature(851, false); 
            SPTaskLib.Utilities.ClientFeatures.SetOverrideFeature(858, false); 
        }), SPTaskLib.Controls.CommandBar.WaitForCommandBar({ area: 'primary' }));
        TAB.AddTask(TAB.MakeTask(function () {
            var cb = new SPTaskLib.Controls.CommandBar({ area: 'primary' });
            cb.AddTaskEnsureCommandBarItem('Command One');
            cb.AddTaskEnsureCommandBarItem('Command Two');
            cb.AddTaskEnsureCommandBarItem('Command Dialog One');
            cb.AddTaskEnsureCommandBarItem('Command Dialog Two');
        }));
        TAB.Log.Comment('Validating CommandSet items are set by the ' +
            'CommandSet extension (should be \'Command One\', \'Command Two\',' +
            '\'Command Dialog One\',\'Command Dialog Two\').');
        SPTaskLib.Controls.CommandBar.AddItemVerificationTask({
            area: 'primary',
            expectedItems: [
                { title: 'Command One' },
                { title: 'Command Two' },
                { title: 'Command Dialog One' },
                { title: 'Command Dialog Two' }
            ],
            requireExactMatch: false,
            checkOverflow: true
        });
        TAB.AddTask(TAB.MakeTask(function () {
            var commandBar = new SPTaskLib.Controls.CommandBar({ area: 'primary' });
            SPTaskLib.ExtensionUtil.testCommandBarItem(commandBar.GetItemByTitle('Command One'), 'CommandOneDiv');
            SPTaskLib.ExtensionUtil.testCommandBarItem(commandBar.GetItemByTitle('Command Two'), 'CommandTwoDiv');
            SPTaskLib.ExtensionUtil.testDialogCommandBarItem(commandBar.GetItemByTitle('Command Dialog One'), 'Clicked Command Dialog One');
            SPTaskLib.ExtensionUtil.testDialogCommandBarItem(commandBar.GetItemByTitle('Command Dialog Two'), 'Clicked Command Dialog Two. Enter something to alert:');
        }));
        TAB.Log.AddTaskPass('Test complete');
    };
    return CommandSetDistinctInstances;
}());
TabTest = CommandSetDistinctInstances;
