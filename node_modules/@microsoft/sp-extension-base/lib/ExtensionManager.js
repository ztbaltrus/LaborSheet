import { _LegacyThirdPartyFabricCoreLoader } from '@microsoft/sp-component-base';
import { Guid, Text } from '@microsoft/sp-core-library';
import { _LogSource, _QosMonitor, _TraceLogger } from '@microsoft/sp-diagnostics';
import { SPComponentLoader } from '@microsoft/sp-loader';
import { _PerformanceLogger } from '@ms/sp-telemetry';
import BaseExtension from './BaseExtension';
import strings from './ExtensionStrings.resx';
var ExtensionManager = (function () {
    function ExtensionManager(serviceScope, expectedType) {
        this._serviceScope = serviceScope;
        this._expectedType = expectedType;
        this._extensions = [];
    }
    ExtensionManager.prototype.createExtension = function (componentId, propertiesJson, contextCreator) {
        var _this = this;
        var qosMonitor = new _QosMonitor('Extension.Create', true);
        var manifest = SPComponentLoader.tryGetManifestById(componentId);
        if (!manifest) {
            var manifestError = new Error(Text.format(strings.manifestNotFound, componentId));
            qosMonitor.writeUnexpectedFailure('ManifestNotFound', manifestError, { componentId: componentId });
            return Promise.reject(manifestError);
        }
        var instanceId = Guid.newGuid().toString();
        var loggingTag = "Extension." + manifest.id + "." + instanceId;
        var context = contextCreator({
            manifest: manifest,
            parentServiceScope: this._serviceScope,
            instanceId: instanceId,
            loggingTag: loggingTag
        });
        var perfLogKeyCreate = loggingTag + '.Extension.Create';
        var perfLogKeyScriptLoad = loggingTag + '.Extension.ScriptLoad';
        _PerformanceLogger.startMarkForComponent(perfLogKeyCreate);
        var error = undefined;
        var extraData = this._createQosExtraData(manifest);
        try {
            _PerformanceLogger.startMarkForComponent(perfLogKeyScriptLoad);
            var modulePromise = SPComponentLoader.loadComponent(manifest);
            modulePromise.then(function () {
                _PerformanceLogger.endMarkForComponent(perfLogKeyScriptLoad);
                _PerformanceLogger.logPerformanceMetricToConsole(perfLogKeyScriptLoad, 'Extension.ScriptLoad', manifest.id, manifest.alias);
            });
            var createPromise = modulePromise.then(function (component) {
                var extensionClass = component.default;
                var extension = new extensionClass();
                if (!(extension instanceof BaseExtension)) {
                    error = new Error(strings.expectingBaseExtension);
                    qosMonitor.writeExpectedFailure('DoesNotExtendBaseExtension', error, extraData);
                    throw error;
                }
                if (!(extension instanceof _this._expectedType)) {
                    error = Error(Text.format(strings.wrongExtensionType, _this._expectedType));
                    qosMonitor.writeExpectedFailure('WrongExtensionType', error, extraData);
                    throw error;
                }
                return extension._init(context, propertiesJson).then(function () {
                    return extension;
                }).catch(function (e) {
                    error = new Error(Text.format(strings.extensionInitFailure, componentId));
                    qosMonitor.writeExpectedFailure('ExtensionInitFailure', error, extraData);
                    throw error;
                });
            }, function (e) {
                if (!error) {
                    error = new Error(Text.format(strings.extensionLoadFailure, componentId));
                    qosMonitor.writeExpectedFailure('ExtensionLoadFailure', error, extraData);
                }
                throw error;
            }).then(function (extension) {
                qosMonitor.writeSuccess(extraData);
                return extension;
            });
            createPromise.then(function (moduleLibrary) {
                _PerformanceLogger.endMarkForComponent(perfLogKeyCreate);
                _PerformanceLogger.logPerformanceMetricToConsole(perfLogKeyScriptLoad, 'Extension.Create', manifest.id, manifest.alias);
                _this._extensions.push(moduleLibrary);
            });
            _LegacyThirdPartyFabricCoreLoader.load(manifest.isInternal);
            return createPromise;
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure('UnhandledCreateError', e, extraData);
            return Promise.reject(e);
        }
    };
    ExtensionManager.prototype.dispose = function () {
        if (!this._isDisposed) {
            this.disposeExtensions();
            delete this._serviceScope;
            delete this._extensions;
            delete this._expectedType;
        }
        this._isDisposed = true;
    };
    Object.defineProperty(ExtensionManager.prototype, "isDisposed", {
        get: function () {
            return this._isDisposed;
        },
        enumerable: true,
        configurable: true
    });
    ExtensionManager.prototype.disposeExtensions = function () {
        for (var _i = 0, _a = this._extensions; _i < _a.length; _i++) {
            var extension = _a[_i];
            try {
                extension.dispose();
            }
            catch (e) {
                var manifest = extension.manifest;
                _TraceLogger.logError(ExtensionManager._logSource, new Error("Failed to dispose extension \"" + manifest.alias + "\"\n            + \" with id=" + manifest.id + ": " + e.message));
            }
        }
        this._extensions = [];
    };
    ExtensionManager.prototype._createQosExtraData = function (manifest) {
        var qosExtraData = {
            alias: manifest.alias,
            isInternal: manifest.isInternal,
            manifestId: manifest.id,
            extensionType: manifest.extensionType
        };
        return qosExtraData;
    };
    ExtensionManager._logSource = _LogSource.create('ExtensionManager');
    return ExtensionManager;
}());
export default ExtensionManager;
