import { _SPEventManager, SPEvent, Validate, Text, Log, ServiceKey } from '@microsoft/sp-core-library';
import strings from './loc/Strings.resx';
var ANY_PROPERTY_EVENT_PREFIX = 'DynamicData_AnyPropertyChanged';
var PROPERTY_EVENT_PREFIX = 'DynamicData_PropertyChanged';
var ALL_PROPERTIES_EVENT_PREFIX = 'DynamicData_AllPropertiesChanged';
var SOURCES_CHANGED_EVENT_NAME = 'DynamicData_SourcesChanged';
var EVENT_NAME_SEPARATOR = '_';
var DynamicDataManager = (function () {
    function DynamicDataManager(serviceScope) {
        this._sources = new Map();
        this._sourcesChangedEvent = new SPEvent(SOURCES_CHANGED_EVENT_NAME);
    }
    Object.defineProperty(DynamicDataManager.prototype, "sourcesChangedEvent", {
        get: function () {
            return this._sourcesChangedEvent;
        },
        enumerable: true,
        configurable: true
    });
    DynamicDataManager.prototype.notifySourceChanged = function (sourceId) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        _SPEventManager.instance.raiseEvent(this._getAllPropertiesChangedEventName(sourceId), {});
        _SPEventManager.instance.raiseEvent(this._getAnyPropertyChangedEventName(sourceId), {});
    };
    DynamicDataManager.prototype.notifyPropertyChanged = function (sourceId, propertyId) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNonemptyString(propertyId, 'propertyId');
        _SPEventManager.instance.raiseEvent(this._getPropertyChangedEventName(sourceId, propertyId), {});
        _SPEventManager.instance.raiseEvent(this._getAnyPropertyChangedEventName(sourceId), {});
    };
    DynamicDataManager.prototype.registerSourceChanged = function (sourceId, observer, callback) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNotNullOrUndefined(observer, 'observer');
        Validate.isNotNullOrUndefined(callback, 'callback');
        if (!this._sources.has(sourceId)) {
            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));
        }
        _SPEventManager.instance.registerEvent(this._getAllPropertiesChangedEventName(sourceId), observer, callback);
        _SPEventManager.instance.registerEvent(this._getAnyPropertyChangedEventName(sourceId), observer, callback);
    };
    DynamicDataManager.prototype.unregisterSourceChanged = function (sourceId, observer, callback) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNotNullOrUndefined(observer, 'observer');
        Validate.isNotNullOrUndefined(callback, 'callback');
        if (!this._sources.has(sourceId)) {
            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));
        }
        _SPEventManager.instance.unregisterEvent(this._getAllPropertiesChangedEventName(sourceId), observer, callback);
        _SPEventManager.instance.unregisterEvent(this._getAnyPropertyChangedEventName(sourceId), observer, callback);
    };
    DynamicDataManager.prototype.registerPropertyChanged = function (sourceId, propertyId, observer, callback) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNonemptyString(propertyId, 'propertyId');
        Validate.isNotNullOrUndefined(observer, 'observer');
        Validate.isNotNullOrUndefined(callback, 'callback');
        if (!this._sources.has(sourceId)) {
            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));
        }
        _SPEventManager.instance.registerEvent(this._getPropertyChangedEventName(sourceId, propertyId), observer, callback);
        _SPEventManager.instance.registerEvent(this._getAllPropertiesChangedEventName(sourceId), observer, callback);
    };
    DynamicDataManager.prototype.unregisterPropertyChanged = function (sourceId, propertyId, observer, callback) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        Validate.isNonemptyString(propertyId, 'propertyId');
        Validate.isNotNullOrUndefined(observer, 'observer');
        Validate.isNotNullOrUndefined(callback, 'callback');
        if (!this._sources.has(sourceId)) {
            throw new Error(Text.format(strings.dynamicDataManagerSourceDoesntExist, sourceId));
        }
        _SPEventManager.instance.unregisterEvent(this._getPropertyChangedEventName(sourceId, propertyId), observer, callback);
        _SPEventManager.instance.unregisterEvent(this._getAllPropertiesChangedEventName(sourceId), observer, callback);
    };
    DynamicDataManager.prototype.getSources = function () {
        var sources = [];
        this._sources.forEach(function (source) { return sources.push(source); });
        return sources;
    };
    DynamicDataManager.prototype.tryGetSource = function (sourceId) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        return this._sources.get(sourceId);
    };
    DynamicDataManager.prototype.addSource = function (source) {
        this._validateSource(source);
        if (this._sources.has(source.id)) {
            Log.warn('DynamicDataManager', Text.format(strings.dynamicDataManagerSourceAlreadyExists, source.id));
        }
        this._sources.set(source.id, source);
        this._raiseSourcesChangedEvent();
    };
    DynamicDataManager.prototype.removeSource = function (sourceId) {
        Validate.isNonemptyString(sourceId, 'sourceId');
        if (this._sources.has(sourceId)) {
            _SPEventManager.instance.removeEvent(this._getAllPropertiesChangedEventName(sourceId));
            _SPEventManager.instance.removeEvent(this._getAnyPropertyChangedEventName(sourceId));
            _SPEventManager.instance.removeEventsByPrefix(this._getPropertyChangedEventPrefix(sourceId));
            this._sources.delete(sourceId);
            this._raiseSourcesChangedEvent();
        }
    };
    DynamicDataManager.prototype._validateSource = function (source) {
        Validate.isNotNullOrUndefined(source, 'source');
        if (source.id.indexOf(EVENT_NAME_SEPARATOR) > -1) {
            throw new Error("Source id contains invalid characters, like \"" + EVENT_NAME_SEPARATOR + "\". Id: \"" + source.id + "\".");
        }
        var regex = /^[a-zA-Z0-9\-_]+$/;
        source.getPropertyDefinitions().forEach(function (def) {
            if (!regex.test(def.id)) {
                throw new Error("Source contains invalid property \"" + def.id + "\".");
            }
        });
    };
    DynamicDataManager.prototype._raiseSourcesChangedEvent = function () {
        _SPEventManager.instance.raiseStickyEvent(SOURCES_CHANGED_EVENT_NAME, {});
    };
    DynamicDataManager.prototype._getAllPropertiesChangedEventName = function (sourceId) {
        return [ALL_PROPERTIES_EVENT_PREFIX, sourceId].join(EVENT_NAME_SEPARATOR);
    };
    DynamicDataManager.prototype._getAnyPropertyChangedEventName = function (sourceId) {
        return [ANY_PROPERTY_EVENT_PREFIX, sourceId].join(EVENT_NAME_SEPARATOR);
    };
    DynamicDataManager.prototype._getPropertyChangedEventPrefix = function (sourceId) {
        return [PROPERTY_EVENT_PREFIX, sourceId].join(EVENT_NAME_SEPARATOR);
    };
    DynamicDataManager.prototype._getPropertyChangedEventName = function (sourceId, propertyId) {
        return [this._getPropertyChangedEventPrefix(sourceId), propertyId].join(EVENT_NAME_SEPARATOR);
    };
    DynamicDataManager.serviceKey = ServiceKey.create('sp-core-library:DynamicDataManager', DynamicDataManager);
    return DynamicDataManager;
}());
export default DynamicDataManager;
