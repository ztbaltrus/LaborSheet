import { IDynamicDataPropertyDefinition } from './IDynamicDataPropertyDefinition';
import { IDynamicDataEventDefinition } from './IDynamicDataEventDefinition';
/**
 * Interface for components to implement in order to be dynamic data sources.
 * This can be implemented as an object with state, or a set of loose functions that
 * returns the data.
 *
 * @beta
 */
export interface IDynamicDataCallables {
    /**
     * Returns all the property definitions for dynamic data.
     * This needs to be overriden by the implementation of the component.
     */
    getPropertyDefinitions(): ReadonlyArray<IDynamicDataPropertyDefinition>;
    /**
     * Given a property id, returns the value of the property.
     * This needs to be overriden by the implementation of the component.
     */
    getPropertyValue(propertyId: string): any;
    /**
     * Returns list of allowed events on the dynamic data source.
     *
     * When this api returns a non-empty result, then source must define 'sendData' api.
     *
     * If this api is not defined or returns an empty map, then no consumer will be able
     * to talk to this source.
     *
     * @alpha
     */
    allowedEvents?(): ReadonlyArray<IDynamicDataEventDefinition>;
    /**
     * If defined, enables the consumer to send data to the associated
     * dynamic data source. Then source can act accordingly.
     *
     * Invoking this api throws an error when the passed in 'eventName' is not
     * one of the allowed events on the source.
     *
     * @param eventName - A case-sensitive string representing the name of the event.
     * @param data - Data to be sent to the dynamic data source.
     *
     * @alpha
     */
    sendEvent?(eventName: string, data: any): void;
}
